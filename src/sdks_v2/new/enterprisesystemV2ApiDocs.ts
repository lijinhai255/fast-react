/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysBusinessAddProps = {
  req: SysBusiness;
};

export const postEnterprisesystemSysBusinessAdd = (
  { req }: postEnterprisesystemSysBusinessAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysCellAddProps = {
  req: Cell;
};

export const postEnterprisesystemSysCellAdd = (
  { req }: postEnterprisesystemSysCellAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Cell> => {
  let backendApiUrl = `/enterprisesystem/sysCell/add`;

  return axios.request<通用接口返回对象Cell>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 填充数据
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysFillParamAddProps = {
  req: SysBusinessParamReq;
};

export const postEnterprisesystemSysFillParamAdd = (
  { req }: postEnterprisesystemSysFillParamAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysFillParam/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysReportAddProps = {
  req: SysReport;
};

export const postEnterprisesystemSysReportAdd = (
  { req }: postEnterprisesystemSysReportAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysReport/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysSupportFileAddProps = {
  req: SysSupportFile;
};

export const postEnterprisesystemSysSupportFileAdd = (
  { req }: postEnterprisesystemSysSupportFileAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysSupportFile/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 待审核人列表-分页
 * @param {integer}  [id]            [required]  审核数据id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemAuditUserPageProps = {
  id: number;
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemAuditUserPage = (
  { id, pageNum, pageSize }: getEnterprisesystemAuditUserPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditUserDto> => {
  let backendApiUrl = `/enterprisesystem/audit/user/page`;

  return axios.request<通用接口返回对象IPageAuditUserDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审核
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemAuditAuditProps = {
  req: AuditDto;
};

export const postEnterprisesystemAuditAudit = (
  { req }: postEnterprisesystemAuditAuditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/audit/audit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 批量新增填充数据文件
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysSupportFileBatchAddFillFileProps = {
  req: SysSupportFile[];
};

export const postEnterprisesystemSysSupportFileBatchAddFillFile = (
  { req }: postEnterprisesystemSysSupportFileBatchAddFillFileProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysSupportFile/batchAddFillFile`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 批量新增
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysSupportFileBatchAddProps = {
  req: SysSupportFile[];
};

export const postEnterprisesystemSysSupportFileBatchAdd = (
  { req }: postEnterprisesystemSysSupportFileBatchAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysSupportFile/batchAdd`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 校验生产单元是否被引用
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysCellCheckProps = {
  id: number;
};

export const getEnterprisesystemSysCellCheck = (
  { id }: getEnterprisesystemSysCellCheckProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/enterprisesystem/sysCell/check`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 当前审批流程列表
 * @param {integer}  [computationDataId] [required]  排放数据id
 */

export type getEnterprisesystemAuditNodeListCurrProps = {
  computationDataId: number;
};

export const getEnterprisesystemAuditNodeListCurr = (
  { computationDataId }: getEnterprisesystemAuditNodeListCurrProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditNode> => {
  let backendApiUrl = `/enterprisesystem/audit/node/list/curr`;

  return axios.request<通用接口返回对象ListAuditNode>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批记录列表-指定审批
 * @param {integer}  [auditDataId]   [required]  审核数据id
 */

export type getEnterprisesystemAuditDataLogListProps = {
  auditDataId: number;
};

export const getEnterprisesystemAuditDataLogList = (
  { auditDataId }: getEnterprisesystemAuditDataLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/enterprisesystem/audit/data/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysBusinessDeleteProps = {
  req: IdReq;
};

export const postEnterprisesystemSysBusinessDelete = (
  { req }: postEnterprisesystemSysBusinessDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysCellDeleteProps = {
  req: IdReq;
};

export const postEnterprisesystemSysCellDelete = (
  { req }: postEnterprisesystemSysCellDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysCell/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysFillParamDeleteProps = {
  req: SysBusinessParamDelReq;
};

export const postEnterprisesystemSysFillParamDelete = (
  { req }: postEnterprisesystemSysFillParamDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysFillParam/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysReportDeleteProps = {
  req: IdReq;
};

export const postEnterprisesystemSysReportDelete = (
  { req }: postEnterprisesystemSysReportDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysReport/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysSupportFileDeleteProps = {
  req: SysSupportFile;
};

export const postEnterprisesystemSysSupportFileDelete = (
  { req }: postEnterprisesystemSysSupportFileDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysSupportFile/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 根据排放源id查询排放源的列名
 * @param {integer}  [businessMaterialId] [required]  排放源id
 * @param {integer}  [isShow]           是否展示
 */

export type getEnterprisesystemSysBusinessColumnNameQueryByBusinessMaterialIdProps =
  {
    businessMaterialId: number;
    isShow?: number | null | undefined;
  };

export const getEnterprisesystemSysBusinessColumnNameQueryByBusinessMaterialId =
  (
    {
      businessMaterialId,
      isShow,
    }: getEnterprisesystemSysBusinessColumnNameQueryByBusinessMaterialIdProps,
    $config?: AxiosRequestConfig,
  ): AxiosPromise<通用接口返回对象ListSysBusinessColumnName> => {
    let backendApiUrl = `/enterprisesystem/sysBusinessColumnName/queryByBusinessMaterialId`;

    return axios.request<通用接口返回对象ListSysBusinessColumnName>({
      url: backendApiUrl,
      method: 'GET',
      params: serializeQueryParam({
        businessMaterialId: businessMaterialId,
        isShow: isShow,
      }),
      // baseURL: `${process.env.REACT_APP_API_URL}`,
      ...$config,
    });
  };

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysCellIdProps = {
  id: number;
};

export const getEnterprisesystemSysCellId = (
  { id }: getEnterprisesystemSysCellIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Cell> => {
  let backendApiUrl = `/enterprisesystem/sysCell/${id}`;

  return axios.request<通用接口返回对象Cell>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysFillParamIdProps = {
  id: number;
};

export const getEnterprisesystemSysFillParamId = (
  { id }: getEnterprisesystemSysFillParamIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SysBusinessParam> => {
  let backendApiUrl = `/enterprisesystem/sysFillParam/${id}`;

  return axios.request<通用接口返回对象SysBusinessParam>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysReportIdProps = {
  id: number;
};

export const getEnterprisesystemSysReportId = (
  { id }: getEnterprisesystemSysReportIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SysReport> => {
  let backendApiUrl = `/enterprisesystem/sysReport/${id}`;

  return axios.request<通用接口返回对象SysReport>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysBusinessEditProps = {
  req: SysBusiness;
};

export const postEnterprisesystemSysBusinessEdit = (
  { req }: postEnterprisesystemSysBusinessEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysCellEditProps = {
  req: Cell;
};

export const postEnterprisesystemSysCellEdit = (
  { req }: postEnterprisesystemSysCellEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Cell> => {
  let backendApiUrl = `/enterprisesystem/sysCell/edit`;

  return axios.request<通用接口返回对象Cell>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysFillParamEditProps = {
  req: SysBusinessParamReq;
};

export const postEnterprisesystemSysFillParamEdit = (
  { req }: postEnterprisesystemSysFillParamEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysFillParam/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysReportEditProps = {
  req: SysReport;
};

export const postEnterprisesystemSysReportEdit = (
  { req }: postEnterprisesystemSysReportEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysReport/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批记录列表-关联数据的全量记录
 * @param {integer}  [computationDataId] [required]  排放数据id
 */

export type getEnterprisesystemAuditLogListProps = {
  computationDataId: number;
};

export const getEnterprisesystemAuditLogList = (
  { computationDataId }: getEnterprisesystemAuditLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/enterprisesystem/audit/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批流程列表
 * @param {integer}  [auditDataId]   [required]  审核数据id
 */

export type getEnterprisesystemAuditNodeListProps = {
  auditDataId: number;
};

export const getEnterprisesystemAuditNodeList = (
  { auditDataId }: getEnterprisesystemAuditNodeListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditNode> => {
  let backendApiUrl = `/enterprisesystem/audit/node/list`;

  return axios.request<通用接口返回对象ListAuditNode>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询是否有审批配置
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getEnterprisesystemAuditOrgIdProps = {
  orgId: number;
};

export const getEnterprisesystemAuditOrgId = (
  { orgId }: getEnterprisesystemAuditOrgIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/audit/${orgId}`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据审核列表-分页
 * @param {integer}  [auditStatus]      审核状态。0 待审核；1 审核通过；2 审核不通过；3 已撤回；4 已作废
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemAuditPageProps = {
  auditStatus?: 0 | 1 | 2 | 3 | 4 | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemAuditPage = (
  { auditStatus, pageNum, pageSize }: getEnterprisesystemAuditPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditData> => {
  let backendApiUrl = `/enterprisesystem/audit/page`;

  return axios.request<通用接口返回对象IPageAuditData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditStatus: auditStatus,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 列表-分页
 * @param {string}   [accountYear]      核算年度
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemSysBusinessPageProps = {
  accountYear?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemSysBusinessPage = (
  {
    accountYear,
    orgId,
    pageNum,
    pageSize,
  }: getEnterprisesystemSysBusinessPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageInfoSysBusiness> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/page`;

  return axios.request<通用接口返回对象PageInfoSysBusiness>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      accountYear: accountYear,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询所有数据
 * @param {integer}  [classifyId]    [required]  分类id
 */

export type getEnterprisesystemSysBusinessSupportPageProps = {
  classifyId: number;
};

export const getEnterprisesystemSysBusinessSupportPage = (
  { classifyId }: getEnterprisesystemSysBusinessSupportPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListSysBusinessSupport> => {
  let backendApiUrl = `/enterprisesystem/sysBusinessSupport/page`;

  return axios.request<通用接口返回对象ListSysBusinessSupport>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      classifyId: classifyId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 列表-分页
 * @param {string}   [accountYear]      核算年度
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [status]           状态
 */

export type getEnterprisesystemSysBusinessTenetPageProps = {
  accountYear?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  status?: number | null | undefined;
};

export const getEnterprisesystemSysBusinessTenetPage = (
  {
    accountYear,
    orgId,
    pageNum,
    pageSize,
    status,
  }: getEnterprisesystemSysBusinessTenetPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageInfoSysBusinessTenet> => {
  let backendApiUrl = `/enterprisesystem/sysBusinessTenet/page`;

  return axios.request<通用接口返回对象PageInfoSysBusinessTenet>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      accountYear: accountYear,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      status: status,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 列表-分页
 * @param {string}   [cellNo]           生产单元编码
 * @param {string}   [name]             生产单元名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemSysCellPageProps = {
  cellNo?: string | null | undefined;
  name?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemSysCellPage = (
  {
    cellNo,
    name,
    orgId,
    pageNum,
    pageSize,
  }: getEnterprisesystemSysCellPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageInfoCell> => {
  let backendApiUrl = `/enterprisesystem/sysCell/page`;

  return axios.request<通用接口返回对象PageInfoCell>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      cellNo: cellNo,
      name: name,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 列表-分页
 * @param {integer}  [materialId]    [required]  排放源id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemSysFillParamPageProps = {
  materialId: number;
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemSysFillParamPage = (
  { materialId, pageNum, pageSize }: getEnterprisesystemSysFillParamPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageInfoSysBusinessParam> => {
  let backendApiUrl = `/enterprisesystem/sysFillParam/page`;

  return axios.request<通用接口返回对象PageInfoSysBusinessParam>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      materialId: materialId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 列表-分页
 * @param {string}   [accountYear]      核算年度
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemSysReportPageProps = {
  accountYear?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemSysReportPage = (
  {
    accountYear,
    orgId,
    pageNum,
    pageSize,
  }: getEnterprisesystemSysReportPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageInfoSysReport> => {
  let backendApiUrl = `/enterprisesystem/sysReport/page`;

  return axios.request<通用接口返回对象PageInfoSysReport>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      accountYear: accountYear,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询生产单元机组类型
 */

export type getEnterprisesystemSysCellQueryAllCellProps = {};

export const getEnterprisesystemSysCellQueryAllCell = (
  {}: getEnterprisesystemSysCellQueryAllCellProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListenterpriseCell> => {
  let backendApiUrl = `/enterprisesystem/sysCell/queryAllCell`;

  return axios.request<通用接口返回对象ListenterpriseCell>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 根据列名id查询批量查询数据
 * @param {string}   [columnId]      [required]  columnId
 */

export type getEnterprisesystemSysSupportFileQueryBatchByColumnIdProps = {
  columnId: string;
};

export const getEnterprisesystemSysSupportFileQueryBatchByColumnId = (
  { columnId }: getEnterprisesystemSysSupportFileQueryBatchByColumnIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListSysSupportFileRes> => {
  let backendApiUrl = `/enterprisesystem/sysSupportFile/queryBatchByColumnId`;

  return axios.request<通用接口返回对象ListSysSupportFileRes>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      columnId: columnId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 根据后台生产单元id查询数据
 * @param {integer}  [id]            [required]  id
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getEnterprisesystemSysCellQueryByBossCellIdProps = {
  id: number;
  orgId: number;
};

export const getEnterprisesystemSysCellQueryByBossCellId = (
  { id, orgId }: getEnterprisesystemSysCellQueryByBossCellIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListCell> => {
  let backendApiUrl = `/enterprisesystem/sysCell/queryByBossCellId`;

  return axios.request<通用接口返回对象ListCell>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 根据列名id查询数据
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysSupportFileQueryByColumnIdProps = {
  id: number;
};

export const getEnterprisesystemSysSupportFileQueryByColumnId = (
  { id }: getEnterprisesystemSysSupportFileQueryByColumnIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListSysSupportFile> => {
  let backendApiUrl = `/enterprisesystem/sysSupportFile/queryByColumnId`;

  return axios.request<通用接口返回对象ListSysSupportFile>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询详情信息
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysBusinessQueryByIdProps = {
  id: number;
};

export const getEnterprisesystemSysBusinessQueryById = (
  { id }: getEnterprisesystemSysBusinessQueryByIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SysBusiness> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/queryById`;

  return axios.request<通用接口返回对象SysBusiness>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询详情
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysBusinessTenetQueryByIdProps = {
  id: number;
};

export const getEnterprisesystemSysBusinessTenetQueryById = (
  { id }: getEnterprisesystemSysBusinessTenetQueryByIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SysBusinessTenet> => {
  let backendApiUrl = `/enterprisesystem/sysBusinessTenet/queryById`;

  return axios.request<通用接口返回对象SysBusinessTenet>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算周期id查询核算周期下的一二级分类名称
 * @param {integer}  [status]           status
 * @param {integer}  [tentId]        [required]  核算周期id
 */

export type getEnterprisesystemSysBusinessClassifyQueryByTentIdProps = {
  status?: number | null | undefined;
  tentId: number;
};

export const getEnterprisesystemSysBusinessClassifyQueryByTentId = (
  { status, tentId }: getEnterprisesystemSysBusinessClassifyQueryByTentIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListSysBusinessClassifyReq> => {
  let backendApiUrl = `/enterprisesystem/sysBusinessClassify/queryByTentId`;

  return axios.request<通用接口返回对象ListSysBusinessClassifyReq>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      status: status,
      tentId: tentId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询核算模型
 */

export type getEnterprisesystemSysBusinessQueryModelProps = {};

export const getEnterprisesystemSysBusinessQueryModel = (
  {}: getEnterprisesystemSysBusinessQueryModelProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListenterpriseBusinessModel> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/queryModel`;

  return axios.request<通用接口返回对象ListenterpriseBusinessModel>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 根据核算id查询核算周期数据
 * @param {integer}  [businessId]    [required]  核算id
 */

export type getEnterprisesystemSysBusinessTenetQueryTentByBusinessIdProps = {
  businessId: number;
};

export const getEnterprisesystemSysBusinessTenetQueryTentByBusinessId = (
  { businessId }: getEnterprisesystemSysBusinessTenetQueryTentByBusinessIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListSysBusinessTenetReq> => {
  let backendApiUrl = `/enterprisesystem/sysBusinessTenet/queryTentByBusinessId`;

  return axios.request<通用接口返回对象ListSysBusinessTenetReq>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      businessId: businessId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询默认数据
 * @param {string}   [accountYear]      核算年度
 * @param {integer}  [bossModelId]      boss--后台模型id
 */

export type getEnterprisesystemDefaultValueQueryValueProps = {
  accountYear?: string | null | undefined;
  bossModelId?: number | null | undefined;
};

export const getEnterprisesystemDefaultValueQueryValue = (
  { accountYear, bossModelId }: getEnterprisesystemDefaultValueQueryValueProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象DefaultValueRes> => {
  let backendApiUrl = `/enterprisesystem/defaultValue/queryValue`;

  return axios.request<通用接口返回对象DefaultValueRes>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      accountYear: accountYear,
      bossModelId: bossModelId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询核算年度
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getEnterprisesystemSysReportQueryYearProps = {
  orgId: number;
};

export const getEnterprisesystemSysReportQueryYear = (
  { orgId }: getEnterprisesystemSysReportQueryYearProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Liststring> => {
  let backendApiUrl = `/enterprisesystem/sysReport/queryYear`;

  return axios.request<通用接口返回对象Liststring>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 撤回审批
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemAuditRollbackProps = {
  req: IdReq;
};

export const postEnterprisesystemAuditRollback = (
  { req }: postEnterprisesystemAuditRollbackProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/audit/rollback`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 提交审批
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemAuditSubmitProps = {
  req: IdReq;
};

export const postEnterprisesystemAuditSubmit = (
  { req }: postEnterprisesystemAuditSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/audit/submit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 校验
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemSysBusinessVerifyProps = {
  req: IdReq;
};

export const postEnterprisesystemSysBusinessVerify = (
  { req }: postEnterprisesystemSysBusinessVerifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/sysBusiness/verify`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemBusinessSettingAddProps = {
  req: enterpriseBusinessSetting;
};

export const postEnterprisesystemBusinessSettingAdd = (
  { req }: postEnterprisesystemBusinessSettingAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/businessSetting/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemBusinessSettingDeleteProps = {
  req: IdReq;
};

export const postEnterprisesystemBusinessSettingDelete = (
  { req }: postEnterprisesystemBusinessSettingDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/businessSetting/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemBusinessSettingIdProps = {
  id: number;
};

export const getEnterprisesystemBusinessSettingId = (
  { id }: getEnterprisesystemBusinessSettingIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象enterpriseBusinessSetting> => {
  let backendApiUrl = `/enterprisesystem/businessSetting/${id}`;

  return axios.request<通用接口返回对象enterpriseBusinessSetting>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postEnterprisesystemBusinessSettingEditProps = {
  req: enterpriseBusinessSetting;
};

export const postEnterprisesystemBusinessSettingEdit = (
  { req }: postEnterprisesystemBusinessSettingEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/businessSetting/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 列表-分页
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getEnterprisesystemBusinessSettingPageProps = {
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemBusinessSettingPage = (
  { pageNum, pageSize }: getEnterprisesystemBusinessSettingPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageenterpriseBusinessSetting> => {
  let backendApiUrl = `/enterprisesystem/businessSetting/page`;

  return axios.request<通用接口返回对象IPageenterpriseBusinessSetting>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description coreUrl
 */

export type getEnterprisesystemCoreProps = {};

export const getEnterprisesystemCore = (
  {}: getEnterprisesystemCoreProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/enterprisesystem/core`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description flush
 */

export type getEnterprisesystemFlushProps = {};

export const getEnterprisesystemFlush = (
  {}: getEnterprisesystemFlushProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/enterprisesystem/flush`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description health
 */

export type getEnterprisesystemHealthProps = {};

export const getEnterprisesystemHealth = (
  {}: getEnterprisesystemHealthProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<string> => {
  let backendApiUrl = `/enterprisesystem/health`;

  return axios.request<string>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询枚举值（忽略大小写）
 * @param {string}   [enumName]      [required]  枚举名
 */

export type getEnterprisesystemEnumsEnumNameProps = {
  enumName: string;
};

export const getEnterprisesystemEnumsEnumName = (
  { enumName }: getEnterprisesystemEnumsEnumNameProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEnumResp> => {
  let backendApiUrl = `/enterprisesystem/enums/${enumName}`;

  return axios.request<通用接口返回对象ListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      enumName: enumName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [ro]            [required]  ro
 */

export type postEnterprisesystemSysDefaultYearProps = {
  ro: DefaultQo;
};

export const postEnterprisesystemSysDefaultYear = (
  { ro }: postEnterprisesystemSysDefaultYearProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象long> => {
  let backendApiUrl = `/enterprisesystem/sys/defaultYear`;

  return axios.request<通用接口返回对象long>({
    url: backendApiUrl,
    method: 'POST',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {integer}  [id]            [required]  id
 */

export type deleteEnterpriseSystemDefaultYearIdProps = {
  id: number;
};

export const deleteEnterpriseSystemDefaultYearId = (
  { id }: deleteEnterpriseSystemDefaultYearIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/enterprisesystem/sys/defaultYear/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询,全部时businessModelId传null或者0
 * @param {integer}  [appType]          应用类型:0,boss;1,应用平台
 * @param {integer}  [businessModelId] [required]  核算模型id
 * @param {integer}  [id]            [required]  行业缺省值id
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {integer}  [updateBy]
 * @param {string}   [year]          [required]  核算年度
 */

export type getEnterprisesystemSysDefaultYearProps = {
  appType?: number | null | undefined;
  businessModelId: number;
  id: number;
  pageNum: number;
  pageSize: number;
  updateBy?: number | null | undefined;
  year: string;
};

export const getEnterprisesystemSysDefaultYear = (
  {
    appType,
    businessModelId,
    id,
    pageNum,
    pageSize,
    updateBy,
    year,
  }: getEnterprisesystemSysDefaultYearProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageDefaultYear> => {
  let backendApiUrl = `/enterprisesystem/sys/defaultYear`;

  return axios.request<通用接口返回对象PageDefaultYear>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      appType: appType,
      businessModelId: businessModelId,
      id: id,
      pageNum: pageNum,
      pageSize: pageSize,
      updateBy: updateBy,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getEnterprisesystemSysDefaultYearIdProps = {
  id: number;
};

export const getEnterprisesystemSysDefaultYearId = (
  { id }: getEnterprisesystemSysDefaultYearIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象DefaultYear> => {
  let backendApiUrl = `/enterprisesystem/sys/defaultYear/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象DefaultYear>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 下拉选择核算模型,增加全部
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 */

export type getEnterprisesystemSysDefaultYearSelectBusinessPageProps = {
  pageNum: number;
  pageSize: number;
};

export const getEnterprisesystemSysDefaultYearSelectBusinessPage = (
  {
    pageNum,
    pageSize,
  }: getEnterprisesystemSysDefaultYearSelectBusinessPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageBusinessModel> => {
  let backendApiUrl = `/enterprisesystem/sys/defaultYear/selectBusinessPage`;

  return axios.request<通用接口返回对象PageBusinessModel>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 修改,赋值
 * @param {any}      [ro]            [required]  ro
 */

export type putEnterprisesystemDefaultYearProps = {
  ro: DefaultValueInsert[];
};

export const putEnterprisesystemDefaultYear = (
  { ro }: putEnterprisesystemDefaultYearProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/enterprisesystem/sys/defaultYear/defaultValue`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface AuditData {
  auditStatus?: 0 | 1 | 2 | 3 | 4;

  auditType?: 1 | 3 | 4;

  companyId?: number;

  createBy?: number;

  createByName?: string;

  createTime?: Date;

  dataId?: string;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  targetNames?: string;

  updateBy?: number;

  updateTime?: Date;

  userBtnFlag?: boolean;
}

export interface AuditDto {
  auditComment?: string;

  auditDataId?: number;

  auditStatus?: 0 | 1 | 2 | 3 | 4;
}

export interface AuditLog {
  auditBy?: number;

  auditByMobile?: string;

  auditByName?: string;

  auditComment?: string;

  auditDataId?: number;

  auditStatus?: 0 | 1 | 2 | 3 | 4;

  auditTime?: Date;

  auditType?: 1 | 3 | 4;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataId?: string;

  id?: number;

  orgId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface AuditNode {
  auditDataId?: number;

  auditOrgId?: number;

  auditStatus?: 0 | 1 | 2 | 3 | 4;

  auditType?: 1 | 3 | 4;

  companyId?: number;

  configType?: 1 | 2;

  createBy?: number;

  createTime?: Date;

  dataId?: string;

  deleted?: boolean;

  id?: number;

  nodeLevel?: number;

  nodeName?: string;

  orgId?: number;

  passed?: boolean;

  sysAuditId?: number;

  targetIds?: number[];

  targetNames?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface AuditUserDto {
  orgId?: number;

  orgName?: string;

  realName?: string;

  userId?: number;

  username?: string;
}

// 核算模型
export interface BusinessModel {
  businessInfo: string;

  businessName: string;

  businessNo?: string;

  createBy?: number;

  createTime?: Date;

  delFlag?: number;

  id?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface Cell {
  cellId?: number;

  cellNo?: string;

  cellType?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  customField?: string;

  delFlag?: 0 | 1;

  id?: number;

  name?: string;

  orgId?: number;
  orgIdList?: number[];

  orgName?: string;

  updateBy?: number;

  updateName?: string;

  updateTime?: Date;
}

export interface DefaultQo {
  businessModelId: number;

  id: number;

  year: string;

  appType?: number;
  updateBy?: number;
}

// 缺省值--数据配置
export interface DefaultValue {
  defaultYearId: number;

  dictValue: string;

  paramId: number;

  businessModelId?: number;

  createBy?: number;

  createTime?: Date;

  dataSetting?: 0 | 1 | 2;

  delFlag?: number;

  dictLabel?: string;

  dictType?: string;

  digits?: number;

  id?: number;

  maxValue?: string;

  minValue?: string;

  orderNum?: number;

  paramName?: string;

  relevanceId?: number;

  relevanceName?: string;
  unit?: string;
  unitOneName?: string;
  unitTwoName?: string;

  updateBy?: number;

  updateTime?: Date;

  value?: string;
}

export interface DefaultValueDto {
  defaultValues?: DefaultValueListDto[];

  digits?: number;

  fields?: FieldDto[];

  id?: number;

  maxValue?: string;

  minValue?: string;

  orderNum?: number;

  paramName?: string;

  type?: number;

  value?: string;
}

export interface DefaultValueInsert {
  id: number;

  value: string;
}

export interface DefaultValueListDto {
  defaultValueList?: DefaultValue[];

  dictLabel?: string;

  dictValue?: string;
}

export interface DefaultValueRes {
  entityList?: enterpriseDefaultValue[];

  mainList?: MainRes[];
}

// 缺省值
export interface DefaultYear {
  businessModelId: number;

  year: string;

  appType?: number;

  businessName?: string;

  createBy?: number;

  createTime?: Date;

  defaultValueList?: DefaultValueDto[];

  delFlag?: number;

  id?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface EnumResp {
  code?: number;
  name?: string;
  score?: string;
  subList?: EnumResp[];
}

export interface FieldDto {
  dataSetting?: number;

  dictType?: string;

  id?: number;

  name?: string;
}

export interface IPageAuditData {
  list?: AuditData[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageAuditUserDto {
  list?: AuditUserDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageenterpriseBusinessSetting {
  list?: enterpriseBusinessSetting[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IdReq {
  id: number;
}

export interface MainEntityRes {
  dictValue?: string;

  entityList?: enterpriseDefaultValue[];

  paramId?: number;
}

export interface MainRes {
  entityList?: MainEntityRes[];

  paramId?: number;
}

export interface OrderItem {
  asc?: boolean;
  column?: string;
}

export interface PageInfoCell {
  endRow?: number;
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
  isFirstPage?: boolean;
  isLastPage?: boolean;
  list?: Cell[];
  navigateFirstPage?: number;
  navigateLastPage?: number;
  navigatePages?: number;
  navigatepageNums?: number[];
  nextPage?: number;
  pageNum?: number;
  pageSize?: number;
  pages?: number;
  prePage?: number;
  size?: number;
  startRow?: number;
  total?: number;
}

export interface PageInfoSysBusinessParam {
  endRow?: number;
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
  isFirstPage?: boolean;
  isLastPage?: boolean;
  list?: SysBusinessParam[];
  navigateFirstPage?: number;
  navigateLastPage?: number;
  navigatePages?: number;
  navigatepageNums?: number[];
  nextPage?: number;
  pageNum?: number;
  pageSize?: number;
  pages?: number;
  prePage?: number;
  size?: number;
  startRow?: number;
  total?: number;
}

export interface PageInfoSysBusinessTenet {
  endRow?: number;
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
  isFirstPage?: boolean;
  isLastPage?: boolean;
  list?: SysBusinessTenet[];
  navigateFirstPage?: number;
  navigateLastPage?: number;
  navigatePages?: number;
  navigatepageNums?: number[];
  nextPage?: number;
  pageNum?: number;
  pageSize?: number;
  pages?: number;
  prePage?: number;
  size?: number;
  startRow?: number;
  total?: number;
}

export interface PageInfoSysBusiness {
  endRow?: number;
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
  isFirstPage?: boolean;
  isLastPage?: boolean;
  list?: SysBusiness[];
  navigateFirstPage?: number;
  navigateLastPage?: number;
  navigatePages?: number;
  navigatepageNums?: number[];
  nextPage?: number;
  pageNum?: number;
  pageSize?: number;
  pages?: number;
  prePage?: number;
  size?: number;
  startRow?: number;
  total?: number;
}

export interface PageInfoSysReport {
  endRow?: number;
  hasNextPage?: boolean;
  hasPreviousPage?: boolean;
  isFirstPage?: boolean;
  isLastPage?: boolean;
  list?: SysReport[];
  navigateFirstPage?: number;
  navigateLastPage?: number;
  navigatePages?: number;
  navigatepageNums?: number[];
  nextPage?: number;
  pageNum?: number;
  pageSize?: number;
  pages?: number;
  prePage?: number;
  size?: number;
  startRow?: number;
  total?: number;
}

export interface PageBusinessModel {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: BusinessModel[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageDefaultYear {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: DefaultYear[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface SysBusiness {
  accountYear?: string;

  businessModelId?: number;

  collectCycle?: 0 | 1 | 2;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  discharge?: string;

  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateName?: string;

  updateTime?: Date;
}

export interface SysBusinessClassifyReq {
  bossModelId?: number;

  classifyId?: number;

  classifyName?: string;

  classifyType?: 0 | 1 | 2;

  delFlag?: 0 | 1;

  emissionList?: SysBusinessMaterial[];

  emissionSourceId?: number;

  orderNum?: number;

  sysBusinessId?: number;

  tenetId?: number;
}

export interface SysBusinessColumnName {
  bossParamId?: number;
  classifyIdList?: number[];

  createBy?: number;

  createTime?: Date;

  dataSetting?: 0 | 1 | 2;

  dataType?: 0 | 1 | 2;

  delFlag?: 0 | 1;

  dictSetting?: number;

  dictType?: string;

  digits?: number;

  emissionType?: 0 | 1 | 2 | 3;

  filedType?: 0 | 1 | 2;

  fixedParameter?: string;

  id?: number;

  isEmission?: 0 | 1;

  isShow?: 0 | 1;

  maxValue?: string;

  minValue?: string;

  name?: string;

  orderNum?: number;

  paramId?: number;

  paramNo?: string;

  paramType?: 0 | 1;

  relevance?: number;

  relevanceId?: number;

  required?: 0 | 1;

  statusFlag?: 0 | 1;

  sysBusinessClassifyId?: number;

  sysBusinessId?: number;

  sysBusinessMaterial?: number;

  unitName?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface SysBusinessMaterial {
  bossMaterialId?: number;

  businessType?: 0 | 1;

  cellId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  id?: number;

  materialName?: string;

  materialType?: 0 | 1 | 2;

  materialsNo?: string;

  statusFlag?: 0 | 1;

  sysBusinessClassifyId?: number;

  sysBusinessId?: number;

  sysBusinessTencentId?: number;

  sysCellType?: string;
  tentIdList?: number[];

  updateBy?: number;

  updateTime?: Date;
}

export interface SysBusinessParam {
  bossCellId?: number;

  chDischarge?: string;
  classifyIdList?: number[];

  coDischarge?: string;

  coeDischarge?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  dictName?: string;

  dictValue?: string;

  discharge?: string;

  fillParamList?: SysFillParam[];

  id?: number;

  materialName?: string;

  materialType?: 0 | 1;

  noDischarge?: string;

  orgId?: number;

  statusFlag?: 0 | 1;

  sysBusinessClassifyId?: number;

  sysBusinessId?: number;

  sysBusinessMaterialId?: number;

  sysCellId?: number;

  sysCellType?: string;
  tenetId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface SysBusinessParamDelReq {
  id: number;

  classifyType?: 0 | 1 | 2;

  collectTime?: string;

  orgId?: number;
}

export interface SysBusinessParamReq {
  bossMaterialId?: number;

  classifyType?: 0 | 1 | 2;

  collectTime?: string;
  companyId?: number;

  fillParamList?: SysFillParamReq[];

  orgId?: number;

  tenetId?: number;
}

export interface SysBusinessSupport {
  classifyIdList?: number[];
  collectTime?: string;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  fileList?: SysSupportFile[];

  id?: number;
  orgId?: number;

  required?: 0 | 1;

  statusFlag?: 0 | 1;

  supportData?: string;

  supportInfo?: string;

  supportPath?: string;

  sysBusinessClassifyId?: number;

  sysBusinessId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface SysBusinessTenet {
  accountYear?: string;

  collectCycle?: 0 | 1 | 2;

  collectTime?: string;
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  discharge?: string;

  id?: number;

  orgId?: number;

  orgName?: string;

  rollbackBtnFlag?: boolean;

  status?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;

  subTime?: Date;

  sysBusinessId?: number;

  tenet?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface SysBusinessTenetReq {
  accountYear?: string;

  collectCycle?: 0 | 1 | 2;

  id?: number;
  orgId?: number;

  sysBusinessId?: number;

  tenet?: number;

  tenetMontage?: string;
}

export interface SysFillParam {
  classifyIdList?: number[];

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  emissionType?: 0 | 1 | 2 | 3;

  fieldName?: string;

  fieldValue?: string;

  fieldValueName?: string;

  filedType?: string;

  id?: number;

  isEmission?: 0 | 1;

  isShow?: 0 | 1;

  paramNo?: string;

  statusFlag?: 0 | 1;

  sysBusinessClassifyId?: number;

  sysBusinessColumnId?: number;

  sysBusinessId?: number;

  sysBusinessMaterialId?: number;

  sysBusinessParamId?: number;

  sysCellId?: number;

  sysCellType?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface SysFillParamReq {
  dataSetting?: 0 | 1 | 2;

  delFlag?: 0 | 1;

  fieldName?: string;

  fieldValue?: string;

  fieldValueName?: string;

  filedType?: 0 | 1 | 2;

  id?: number;

  isShow?: 0 | 1;

  paramNo?: string;

  required?: 0 | 1;

  sysBusinessClassifyId?: number;

  sysBusinessColumnId?: number;

  sysBusinessId?: number;

  sysBusinessMaterialId?: number;
}

export interface SysReport {
  accountYear?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  discharge?: string;

  id?: number;

  institutionName?: string;

  institutionNumber?: string;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateName?: string;

  updateTime?: Date;
}

export interface SysSupportFile {
  collectTime?: string;

  colunmId?: number;
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  fileId?: string;

  fileName?: string;

  fileUrl?: string;

  id?: number;

  orgId?: number;

  sysSupportId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface SysSupportFileRes {
  colunmId?: number;
  fileList?: SysSupportFile[];
}

export interface enterpriseBusinessModel {
  businessInfo?: string;

  businessName?: string;

  businessNo?: string;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  id?: number;

  updateBy?: number;

  updateName?: string;

  updateTime?: Date;
}

export interface enterpriseBusinessSetting {
  businessModelId?: number;
  createBy?: number;

  createTime?: Date;

  delFlag?: number;

  digits?: number;

  formula?: string;

  formulaIds?: string;

  gwpData?: string;

  id?: number;

  unit?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface enterpriseCell {
  cellInfo?: string;

  cellName?: string;

  cellNo?: string;

  createBy?: number;

  createTime?: Date;

  delFlag?: 0 | 1;

  id?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface enterpriseDefaultValue {
  createBy?: number;
  createTime?: Date;

  delFlag?: number;

  dictValue?: string;

  id?: number;

  paramId?: number;
  updateBy?: number;
  updateTime?: Date;

  value?: string;
}

export interface 通用接口返回对象 {
  code: number;

  data: unknown;

  msg: string;
}

export interface 通用接口返回对象Cell {
  code: number;

  data: Cell;

  msg: string;
}

export interface 通用接口返回对象DefaultValueRes {
  code: number;

  data: DefaultValueRes;

  msg: string;
}

export interface 通用接口返回对象DefaultYear {
  code: number;

  data: DefaultYear;

  msg: string;
}

export interface 通用接口返回对象IPageAuditData {
  code: number;

  data: IPageAuditData;

  msg: string;
}

export interface 通用接口返回对象IPageAuditUserDto {
  code: number;

  data: IPageAuditUserDto;

  msg: string;
}

export interface 通用接口返回对象IPageenterpriseBusinessSetting {
  code: number;

  data: IPageenterpriseBusinessSetting;

  msg: string;
}

export interface 通用接口返回对象ListAuditLog {
  code: number;

  data: AuditLog[];

  msg: string;
}

export interface 通用接口返回对象ListAuditNode {
  code: number;

  data: AuditNode[];

  msg: string;
}

export interface 通用接口返回对象ListCell {
  code: number;

  data: Cell[];

  msg: string;
}

export interface 通用接口返回对象ListEnumResp {
  code: number;

  data: EnumResp[];

  msg: string;
}

export interface 通用接口返回对象ListSysBusinessClassifyReq {
  code: number;

  data: SysBusinessClassifyReq[];

  msg: string;
}

export interface 通用接口返回对象ListSysBusinessColumnName {
  code: number;

  data: SysBusinessColumnName[];

  msg: string;
}

export interface 通用接口返回对象ListSysBusinessSupport {
  code: number;

  data: SysBusinessSupport[];

  msg: string;
}

export interface 通用接口返回对象ListSysBusinessTenetReq {
  code: number;

  data: SysBusinessTenetReq[];

  msg: string;
}

export interface 通用接口返回对象ListSysSupportFileRes {
  code: number;

  data: SysSupportFileRes[];

  msg: string;
}

export interface 通用接口返回对象ListSysSupportFile {
  code: number;

  data: SysSupportFile[];

  msg: string;
}

export interface 通用接口返回对象ListenterpriseBusinessModel {
  code: number;

  data: enterpriseBusinessModel[];

  msg: string;
}

export interface 通用接口返回对象ListenterpriseCell {
  code: number;

  data: enterpriseCell[];

  msg: string;
}

export interface 通用接口返回对象Liststring {
  code: number;

  data: string[];

  msg: string;
}

export interface 通用接口返回对象PageInfoCell {
  code: number;

  data: PageInfoCell;

  msg: string;
}

export interface 通用接口返回对象PageInfoSysBusinessParam {
  code: number;

  data: PageInfoSysBusinessParam;

  msg: string;
}

export interface 通用接口返回对象PageInfoSysBusinessTenet {
  code: number;

  data: PageInfoSysBusinessTenet;

  msg: string;
}

export interface 通用接口返回对象PageInfoSysBusiness {
  code: number;

  data: PageInfoSysBusiness;

  msg: string;
}

export interface 通用接口返回对象PageInfoSysReport {
  code: number;

  data: PageInfoSysReport;

  msg: string;
}

export interface 通用接口返回对象PageBusinessModel {
  code: number;

  data: PageBusinessModel;

  msg: string;
}

export interface 通用接口返回对象PageDefaultYear {
  code: number;

  data: PageDefaultYear;

  msg: string;
}

export interface 通用接口返回对象SysBusinessParam {
  code: number;

  data: SysBusinessParam;

  msg: string;
}

export interface 通用接口返回对象SysBusinessTenet {
  code: number;

  data: SysBusinessTenet;

  msg: string;
}

export interface 通用接口返回对象SysBusiness {
  code: number;

  data: SysBusiness;

  msg: string;
}

export interface 通用接口返回对象SysReport {
  code: number;

  data: SysReport;

  msg: string;
}

export interface 通用接口返回对象boolean {
  code: number;

  data: boolean;

  msg: string;
}

export interface 通用接口返回对象enterpriseBusinessSetting {
  code: number;

  data: enterpriseBusinessSetting;

  msg: string;
}

export interface 通用接口返回对象long {
  code: number;

  data: number;

  msg: string;
}
