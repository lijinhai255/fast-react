/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 新增
 * @param {any}      [ro]            [required]  ro
 */

export type postAccountsystemGoodsProps = {
  ro: Goods;
};

export const postAccountsystemGoods = (
  { ro }: postAccountsystemGoodsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/goods`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 出入库
 * @param {any}      [ro]            [required]  ro
 */

export type postAccountsystemInventoryRecordProps = {
  ro: InventoryRecord;
};

export const postAccountsystemInventoryRecord = (
  { ro }: postAccountsystemInventoryRecordProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/inventoryRecord`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [ro]            [required]  ro
 */

export type postAccountsystemQuestionProps = {
  ro: Question;
};

export const postAccountsystemQuestion = (
  { ro }: postAccountsystemQuestionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/question`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [ro]            [required]  ro
 */

export type postAccountsystemSceneProps = {
  ro: Scene;
};

export const postAccountsystemScene = (
  { ro }: postAccountsystemSceneProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/scene`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [ro]            [required]  ro
 */

export type postAccountsystemUserProps = {
  ro: User;
};

export const postAccountsystemUser = (
  { ro }: postAccountsystemUserProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/user`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {integer}  [id]            [required]  id
 */

export type deleteAccountsystemQuestionIdProps = {
  id: number;
};

export const deleteAccountsystemQuestionId = (
  { id }: deleteAccountsystemQuestionIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/question/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {integer}  [id]            [required]  id
 */

export type deleteAccountsystemSceneIdProps = {
  id: number;
};

export const deleteAccountsystemSceneId = (
  { id }: deleteAccountsystemSceneIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/scene/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {integer}  [id]            [required]  id
 */

export type DELETEbee7ec10bf0563c3479683d1d22dfa04Props = {
  id: number;
};

export const DELETEbee7ec10bf0563c3479683d1d22dfa04 = (
  { id }: DELETEbee7ec10bf0563c3479683d1d22dfa04Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/user/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导出用户到下载管理中
 * @param {integer}  [deptId]           分组id
 * @param {string}   [userInfo]         用户信息
 * @param {string}   [userNumber]       用户id
 * @param {integer}  [userStatus]       状态:0正常1撤销
 */

export type getAccountsystemAccountFileDownloadFileProps = {
  deptId?: number | null | undefined;
  userInfo?: string | null | undefined;
  userNumber?: string | null | undefined;
  userStatus?: number | null | undefined;
};

export const getAccountsystemAccountFileDownloadFile = (
  {
    deptId,
    userInfo,
    userNumber,
    userStatus,
  }: getAccountsystemAccountFileDownloadFileProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象object> => {
  let backendApiUrl = `/accountsystem/accountFile/downloadFile`;

  return axios.request<通用接口返回对象object>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      deptId: deptId,
      userInfo: userInfo,
      userNumber: userNumber,
      userStatus: userStatus,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {string}   [adminMobile]
 * @param {string}   [adminRealName]
 * @param {string}   [adminUsername]
 * @param {string}   [companyCode]
 * @param {string}   [companyName]
 * @param {integer}  [companyStatus]
 * @param {integer}  [companyType]
 * @param {integer}  [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [id]
 * @param {integer}  [page]          [required]  page
 * @param {integer}  [roleId]
 * @param {integer}  [size]          [required]  size
 * @param {integer}  [updateBy]
 * @param {string}   [updateTime]
 * @param {string}   [uscc]
 */

export type getAccountsystemCompanyProps = {
  adminMobile?: string | null | undefined;
  adminRealName?: string | null | undefined;
  adminUsername?: string | null | undefined;
  companyCode?: string | null | undefined;
  companyName?: string | null | undefined;
  companyStatus?: number | null | undefined;
  companyType?: number | null | undefined;
  createBy?: number | null | undefined;
  createTime?: Date | null | undefined;
  id?: number | null | undefined;
  page: number;
  roleId?: number | null | undefined;
  size: number;
  updateBy?: number | null | undefined;
  updateTime?: Date | null | undefined;
  uscc?: string | null | undefined;
};

export const getAccountsystemCompany = (
  {
    adminMobile,
    adminRealName,
    adminUsername,
    companyCode,
    companyName,
    companyStatus,
    companyType,
    createBy,
    createTime,
    id,
    page,
    roleId,
    size,
    updateBy,
    updateTime,
    uscc,
  }: getAccountsystemCompanyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageCompany> => {
  let backendApiUrl = `/accountsystem/company`;

  return axios.request<通用接口返回对象PageCompany>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      adminMobile: adminMobile,
      adminRealName: adminRealName,
      adminUsername: adminUsername,
      companyCode: companyCode,
      companyName: companyName,
      companyStatus: companyStatus,
      companyType: companyType,
      createBy: createBy,
      createTime: createTime,
      id: id,
      page: page,
      roleId: roleId,
      size: size,
      updateBy: updateBy,
      updateTime: updateTime,
      uscc: uscc,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {string}   [deptId]           分组id
 * @param {string}   [goodsName]        商品名称
 * @param {integer}  [goodsStatus]      商品状态0未上架 1上架
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 */

export type getAccountsystemGoodsProps = {
  deptId?: string | null | undefined;
  goodsName?: string | null | undefined;
  goodsStatus?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getAccountsystemGoods = (
  {
    deptId,
    goodsName,
    goodsStatus,
    pageNum,
    pageSize,
  }: getAccountsystemGoodsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageGoods> => {
  let backendApiUrl = `/accountsystem/goods`;

  return axios.request<通用接口返回对象PageGoods>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      deptId: deptId,
      goodsName: goodsName,
      goodsStatus: goodsStatus,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 库存列表
 * @param {string}   [goodsName]        商品名称
 * @param {integer}  [pageNum]       [required]  分页页码
 * @param {integer}  [pageSize]      [required]  分页页数
 */

export type getAccountsystemGoodsStockProps = {
  goodsName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getAccountsystemGoodsStock = (
  { goodsName, pageNum, pageSize }: getAccountsystemGoodsStockProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageGoodsStock> => {
  let backendApiUrl = `/accountsystem/goodsStock`;

  return axios.request<通用接口返回对象PageGoodsStock>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      goodsName: goodsName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 库存记录列表
 * @param {integer}  [goodsId]       [required]  goodsId
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 */

export type getAccountsystemInventoryRecordProps = {
  goodsId: number;
  pageNum: number;
  pageSize: number;
};

export const getAccountsystemInventoryRecord = (
  { goodsId, pageNum, pageSize }: getAccountsystemInventoryRecordProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageInventoryRecordDto> => {
  let backendApiUrl = `/accountsystem/inventoryRecord`;

  return axios.request<通用接口返回对象PageInventoryRecordDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      goodsId: goodsId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {string}   [beginDate]        开始日期
 * @param {string}   [endDate]          截止日期
 * @param {string}   [goodsName]        商品名称
 * @param {string}   [orderNo]          订单号
 * @param {integer}  [orderStatus]      订单状态0已领取 1未领取
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {string}   [userInfo]         用户信息
 * @param {string}   [userNumber]       用户id
 */

export type getAccountsystemOrdersProps = {
  beginDate?: string | null | undefined;
  endDate?: string | null | undefined;
  goodsName?: string | null | undefined;
  orderNo?: string | null | undefined;
  orderStatus?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  userInfo?: string | null | undefined;
  userNumber?: string | null | undefined;
};

export const getAccountsystemOrders = (
  {
    beginDate,
    endDate,
    goodsName,
    orderNo,
    orderStatus,
    pageNum,
    pageSize,
    userInfo,
    userNumber,
  }: getAccountsystemOrdersProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageOrders> => {
  let backendApiUrl = `/accountsystem/orders`;

  return axios.request<通用接口返回对象PageOrders>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      beginDate: beginDate,
      endDate: endDate,
      goodsName: goodsName,
      orderNo: orderNo,
      orderStatus: orderStatus,
      pageNum: pageNum,
      pageSize: pageSize,
      userInfo: userInfo,
      userNumber: userNumber,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {string}   [questionTitle]    标题
 * @param {integer}  [questionType]     问题类型: 0单选1多选2判断
 */

export type getAccountsystemQuestionProps = {
  pageNum: number;
  pageSize: number;
  questionTitle?: string | null | undefined;
  questionType?: number | null | undefined;
};

export const getAccountsystemQuestion = (
  {
    pageNum,
    pageSize,
    questionTitle,
    questionType,
  }: getAccountsystemQuestionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageQuestion> => {
  let backendApiUrl = `/accountsystem/question`;

  return axios.request<通用接口返回对象PageQuestion>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
      questionTitle: questionTitle,
      questionType: questionType,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {string}   [sceneClassify]    场景分类:0绿色出行、1低碳知识、2低碳生活、3绿色办公
 * @param {string}   [sceneCode]        场景编号
 * @param {string}   [sceneName]        场景名称
 * @param {integer}  [sceneStatus]      场景状态:0正常1禁用
 */

export type getAccountsystemSceneProps = {
  pageNum: number;
  pageSize: number;
  sceneClassify?: string | null | undefined;
  sceneCode?: string | null | undefined;
  sceneName?: string | null | undefined;
  sceneStatus?: number | null | undefined;
};

export const getAccountsystemScene = (
  {
    pageNum,
    pageSize,
    sceneClassify,
    sceneCode,
    sceneName,
    sceneStatus,
  }: getAccountsystemSceneProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageScene> => {
  let backendApiUrl = `/accountsystem/scene`;

  return axios.request<通用接口返回对象PageScene>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
      sceneClassify: sceneClassify,
      sceneCode: sceneCode,
      sceneName: sceneName,
      sceneStatus: sceneStatus,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {string}   [beginDate]        开始日期
 * @param {integer}  [behaviorStatus]    状态:0已领取,1已撤销,2待领取
 * @param {string}   [endDate]          截止日期
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {integer}  [sceneId]          场景id
 * @param {string}   [userInfo]         用户信息
 * @param {string}   [userNumber]       用户id
 */

export type getAccountsystemUserBehaviorProps = {
  beginDate?: string | null | undefined;
  behaviorStatus?: number | null | undefined;
  endDate?: string | null | undefined;
  pageNum: number;
  pageSize: number;
  sceneId?: number | null | undefined;
  userInfo?: string | null | undefined;
  userNumber?: string | null | undefined;
};

export const getAccountsystemUserBehavior = (
  {
    beginDate,
    behaviorStatus,
    endDate,
    pageNum,
    pageSize,
    sceneId,
    userInfo,
    userNumber,
  }: getAccountsystemUserBehaviorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageUserBehavior> => {
  let backendApiUrl = `/accountsystem/userBehavior`;

  return axios.request<通用接口返回对象PageUserBehavior>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      beginDate: beginDate,
      behaviorStatus: behaviorStatus,
      endDate: endDate,
      pageNum: pageNum,
      pageSize: pageSize,
      sceneId: sceneId,
      userInfo: userInfo,
      userNumber: userNumber,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {integer}  [deptId]           分组id
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {string}   [userInfo]         用户信息
 * @param {string}   [userNumber]       用户id
 * @param {integer}  [userStatus]       状态:0正常1撤销
 */

export type getAccountsystemUserProps = {
  deptId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  userInfo?: string | null | undefined;
  userNumber?: string | null | undefined;
  userStatus?: number | null | undefined;
};

export const getAccountsystemUser = (
  {
    deptId,
    pageNum,
    pageSize,
    userInfo,
    userNumber,
    userStatus,
  }: getAccountsystemUserProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageUser> => {
  let backendApiUrl = `/accountsystem/user`;

  return axios.request<通用接口返回对象PageUser>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      deptId: deptId,
      pageNum: pageNum,
      pageSize: pageSize,
      userInfo: userInfo,
      userNumber: userNumber,
      userStatus: userStatus,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询
 * @param {string}   [beginDate]        开始日期
 * @param {string}   [endDate]          截止日期
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 * @param {integer}  [sceneId]          场景id
 * @param {integer}  [scoreType]        积分类型:0 活动累计、1 兑换消耗 2 审核扣除
 * @param {string}   [userInfo]         用户信息
 * @param {string}   [userNumber]       用户id
 */

export type getAccountsystemUserScoreProps = {
  beginDate?: string | null | undefined;
  endDate?: string | null | undefined;
  pageNum: number;
  pageSize: number;
  sceneId?: number | null | undefined;
  scoreType?: number | null | undefined;
  userInfo?: string | null | undefined;
  userNumber?: string | null | undefined;
};

export const getAccountsystemUserScore = (
  {
    beginDate,
    endDate,
    pageNum,
    pageSize,
    sceneId,
    scoreType,
    userInfo,
    userNumber,
  }: getAccountsystemUserScoreProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageUserScore> => {
  let backendApiUrl = `/accountsystem/userScore`;

  return axios.request<通用接口返回对象PageUserScore>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      beginDate: beginDate,
      endDate: endDate,
      pageNum: pageNum,
      pageSize: pageSize,
      sceneId: sceneId,
      scoreType: scoreType,
      userInfo: userInfo,
      userNumber: userNumber,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemCompanyIdProps = {
  id: number;
};

export const getAccountsystemCompanyId = (
  { id }: getAccountsystemCompanyIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Company> => {
  let backendApiUrl = `/accountsystem/company/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Company>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemGoodsIdProps = {
  id: number;
};

export const getAccountsystemGoodsId = (
  { id }: getAccountsystemGoodsIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Goods> => {
  let backendApiUrl = `/accountsystem/goods/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Goods>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemOrdersIdProps = {
  id: number;
};

export const getAccountsystemOrdersId = (
  { id }: getAccountsystemOrdersIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Orders> => {
  let backendApiUrl = `/accountsystem/orders/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Orders>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemQuestionIdProps = {
  id: number;
};

export const getAccountsystemQuestionId = (
  { id }: getAccountsystemQuestionIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Question> => {
  let backendApiUrl = `/accountsystem/question/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Question>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemSceneIdProps = {
  id: number;
};

export const getAccountsystemSceneId = (
  { id }: getAccountsystemSceneIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Scene> => {
  let backendApiUrl = `/accountsystem/scene/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Scene>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemUserBehaviorIdProps = {
  id: number;
};

export const getAccountsystemUserBehaviorId = (
  { id }: getAccountsystemUserBehaviorIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象UserBehavior> => {
  let backendApiUrl = `/accountsystem/userBehavior/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象UserBehavior>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单条查询
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemUserIdProps = {
  id: number;
};

export const getAccountsystemUserId = (
  { id }: getAccountsystemUserIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象User> => {
  let backendApiUrl = `/accountsystem/user/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象User>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导入历史
 * @param {integer}  [pageNum]       [required]  分页
 * @param {integer}  [pageSize]      [required]  分页
 * @param {integer}  [type]          [required]  文件类型:0,用户;1,题库
 */

export type getAccountsystemAccountFileProps = {
  pageNum: number;
  pageSize: number;
  type: number;
};

export const getAccountsystemAccountFile = (
  { pageNum, pageSize, type }: getAccountsystemAccountFileProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageFileUpload> => {
  let backendApiUrl = `/accountsystem/accountFile`;

  return axios.request<通用接口返回对象PageFileUpload>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
      type: type,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description rankDeptPage
 * @param {integer}  [dataType]      [required]  数据类型:0,积分;1,减碳量
 * @param {integer}  [dateType]      [required]  日期类型:0,日排行榜;1,总榜
 * @param {integer}  [deptId]           分组id
 * @param {integer}  [pageNum]       [required]  分页页码
 * @param {integer}  [pageSize]      [required]  分页页数
 */

export type getAccountsystemRankRankDeptPageProps = {
  dataType: number;
  dateType: number;
  deptId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getAccountsystemRankRankDeptPage = (
  {
    dataType,
    dateType,
    deptId,
    pageNum,
    pageSize,
  }: getAccountsystemRankRankDeptPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageDeptRankDto> => {
  let backendApiUrl = `/accountsystem/rank/rankDeptPage`;

  return axios.request<通用接口返回对象PageDeptRankDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dataType: dataType,
      dateType: dateType,
      deptId: deptId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description rankUserPage
 * @param {integer}  [dataType]      [required]  数据类型:0,积分;1,减碳量
 * @param {integer}  [dateType]      [required]  日期类型:0,日排行榜;1,总榜
 * @param {integer}  [deptId]           分组id
 * @param {integer}  [pageNum]       [required]  分页页码
 * @param {integer}  [pageSize]      [required]  分页页数
 * @param {string}   [userInfo]         用户信息
 * @param {string}   [userNumber]       用户id
 */

export type getAccountsystemRankRankUserPageProps = {
  dataType: number;
  dateType: number;
  deptId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  userInfo?: string | null | undefined;
  userNumber?: string | null | undefined;
};

export const getAccountsystemRankRankUserPage = (
  {
    dataType,
    dateType,
    deptId,
    pageNum,
    pageSize,
    userInfo,
    userNumber,
  }: getAccountsystemRankRankUserPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageUser> => {
  let backendApiUrl = `/accountsystem/rank/rankUserPage`;

  return axios.request<通用接口返回对象PageUser>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dataType: dataType,
      dateType: dateType,
      deptId: deptId,
      pageNum: pageNum,
      pageSize: pageSize,
      userInfo: userInfo,
      userNumber: userNumber,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 撤销活动记录
 * @param {any}      [qo]            [required]  qo
 */

export type postAccountsystemUserBehaviorRollBackBehaviorProps = {
  qo: RollBackDto;
};

export const postAccountsystemUserBehaviorRollBackBehavior = (
  { qo }: postAccountsystemUserBehaviorRollBackBehaviorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/userBehavior/rollBackBehavior`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: qo,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 发货
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemOrdersSendGoodsIdProps = {
  id: number;
};

export const getAccountsystemOrdersSendGoodsId = (
  { id }: getAccountsystemOrdersSendGoodsIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/orders/sendGoods/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 上下架
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemGoodsUpdateStatusIdProps = {
  id: number;
};

export const getAccountsystemGoodsUpdateStatusId = (
  { id }: getAccountsystemGoodsUpdateStatusIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/goods/updateStatus/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 启用禁用
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemSceneUpdateStatusIdProps = {
  id: number;
};

export const getAccountsystemSceneUpdateStatusId = (
  { id }: getAccountsystemSceneUpdateStatusIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/scene/updateStatus/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description updateStatus
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemUserUpdateStatusIdProps = {
  id: number;
};

export const getAccountsystemUserUpdateStatusId = (
  { id }: getAccountsystemUserUpdateStatusIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/user/updateStatus/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 修改
 * @param {any}      [ro]            [required]  ro
 */

export type putAccountsystemGoodsProps = {
  ro: Goods;
};

export const putAccountsystemGoods = (
  { ro }: putAccountsystemGoodsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/goods`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 修改
 * @param {any}      [ro]            [required]  ro
 */

export type putAccountsystemQuestionProps = {
  ro: Question;
};

export const putAccountsystemQuestion = (
  { ro }: putAccountsystemQuestionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/question`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 修改
 * @param {any}      [ro]            [required]  ro
 */

export type putAccountsystemSceneProps = {
  ro: Scene;
};

export const putAccountsystemScene = (
  { ro }: putAccountsystemSceneProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/scene`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 修改
 * @param {any}      [ro]            [required]  ro
 */

export type putAccountsystemUserProps = {
  ro: User;
};

export const putAccountsystemUser = (
  { ro }: putAccountsystemUserProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/user`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: ro,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导入用户或题库
 * @param {string}   [file]          [required]  文件外网地址
 * @param {string}   [fileName]      [required]  文件名
 * @param {integer}  [type]          [required]  0,用户;1,题库
 */

export type getAccountsystemAccountFileUploadFileProps = {
  file: string;
  fileName: string;
  type: number;
};

export const getAccountsystemAccountFileUploadFile = (
  { file, fileName, type }: getAccountsystemAccountFileUploadFileProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/accountFile/uploadFile`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      file: file,
      fileName: fileName,
      type: type,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description links
 */

export type getAccountsystemActuatorProps = {};

export const getAccountsystemActuator = (
  {}: getAccountsystemActuatorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: { [key: string]: Link } }> => {
  let backendApiUrl = `/accountsystem/actuator`;

  return axios.request<{ [key: string]: { [key: string]: Link } }>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description handle
 * @param {any}      [body]             body
 */

export type getAccountsystemActuatorHealthProps = {
  body?: { [key: string]: string } | null | undefined;
};

export const getAccountsystemActuatorHealth = (
  { body }: getAccountsystemActuatorHealthProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/accountsystem/actuator/health`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    data: body,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description handle
 * @param {any}      [body]             body
 */

export type getAccountsystemActuatorHealthDoubleStarProps = {
  body?: { [key: string]: string } | null | undefined;
};

export const getAccountsystemActuatorHealthDoubleStar = (
  { body }: getAccountsystemActuatorHealthDoubleStarProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/accountsystem/actuator/health/**`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    data: body,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description coreUrl
 */

export type getAccountsystemCoreProps = {};

export const getAccountsystemCore = (
  {}: getAccountsystemCoreProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/accountsystem/core`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description flush
 */

export type getAccountsystemFlushProps = {};

export const getAccountsystemFlush = (
  {}: getAccountsystemFlushProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/accountsystem/flush`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description health
 */

export type getAccountsystemHealthProps = {};

export const getAccountsystemHealth = (
  {}: getAccountsystemHealthProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<string> => {
  let backendApiUrl = `/accountsystem/health`;

  return axios.request<string>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 是否可删除,查当前分组下是否有用户
 * @param {integer}  [id]            [required]  id
 */

export type getAccountsystemDeptCanDeleteProps = {
  id: number;
};

export const getAccountsystemDeptCanDelete = (
  { id }: getAccountsystemDeptCanDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/dept/canDelete`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {integer}  [id]            [required]  id
 */

export type deleteAccountsystemDeptIdProps = {
  id: number;
};

export const deleteAccountsystemDeptId = (
  { id }: deleteAccountsystemDeptIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/dept/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [dept]          [required]  dept
 */

export type postAccountsystemDeptProps = {
  dept: Dept;
};

export const postAccountsystemDept = (
  { dept }: postAccountsystemDeptProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/dept`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'POST',
    data: dept,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {string}   [id]            [required]  id
 */

export type getAccountsystemDeptIdProps = {
  id: string;
};

export const getAccountsystemDeptId = (
  { id }: getAccountsystemDeptIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Dept> => {
  let backendApiUrl = `/accountsystem/dept/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Dept>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 分页查询当前组织下的部门,排行榜下拉使用
 * @param {integer}  [pageNum]       [required]  pageNum
 * @param {integer}  [pageSize]      [required]  pageSize
 */

export type getAccountsystemDeptProps = {
  pageNum: number;
  pageSize: number;
};

export const getAccountsystemDept = (
  { pageNum, pageSize }: getAccountsystemDeptProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PageDept> => {
  let backendApiUrl = `/accountsystem/dept`;

  return axios.request<通用接口返回对象PageDept>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 显示部门树形
 */

export type getAccountsystemDeptSelectTreeProps = {};

export const getAccountsystemDeptSelectTree = (
  {}: getAccountsystemDeptSelectTreeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListDept> => {
  let backendApiUrl = `/accountsystem/dept/selectTree`;

  return axios.request<通用接口返回对象ListDept>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [dept]          [required]  dept
 */

export type putAccountsystemDeptProps = {
  dept: Dept;
};

export const putAccountsystemDept = (
  { dept }: putAccountsystemDeptProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/accountsystem/dept`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: dept,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type DELETE974f0329f1533e07e352fe721c2ab2f4Props = {};

export const DELETE974f0329f1533e07e352fe721c2ab2f4 = (
  {}: DELETE974f0329f1533e07e352fe721c2ab2f4Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type getAccountsystemErrorProps = {};

export const getAccountsystemError = (
  {}: getAccountsystemErrorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type HEADdfd4ea8974c104f3569922b7e7ad6609Props = {};

export const HEADdfd4ea8974c104f3569922b7e7ad6609 = (
  {}: HEADdfd4ea8974c104f3569922b7e7ad6609Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'HEAD',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type OPTIONS34c8783dca6059b8df5a24985a1fbad7Props = {};

export const OPTIONS34c8783dca6059b8df5a24985a1fbad7 = (
  {}: OPTIONS34c8783dca6059b8df5a24985a1fbad7Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'OPTIONS',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type PATCH2ad5a9cdebbd603c01c1e581b2524f4eProps = {};

export const PATCH2ad5a9cdebbd603c01c1e581b2524f4e = (
  {}: PATCH2ad5a9cdebbd603c01c1e581b2524f4eProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'PATCH',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type postAccountsystemErrorProps = {};

export const postAccountsystemError = (
  {}: postAccountsystemErrorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'POST',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description error
 */

export type PUT870d0311a94578383d6bc64c1445a3ebProps = {};

export const PUT870d0311a94578383d6bc64c1445a3eb = (
  {}: PUT870d0311a94578383d6bc64c1445a3ebProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: unknown }> => {
  let backendApiUrl = `/accountsystem/error`;

  return axios.request<{ [key: string]: unknown }>({
    url: backendApiUrl,
    method: 'PUT',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface Company {
  adminMobile?: string;
  adminRealName?: string;
  adminUsername?: string;
  companyCode?: string;
  companyName?: string;
  companyStatus?: number;
  companyType?: number;
  createBy?: number;
  createTime?: Date;
  id?: number;
  roleId?: number;
  updateBy?: number;
  updateTime?: Date;
  uscc?: string;
}

export interface Dept {
  deptName: string;

  orderNum: number;

  parentId: number;

  children?: Dept[];

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dayReduction?: number;

  dayScore?: number;

  delFlag?: number;

  id?: number;

  level?: number;

  parentName?: string;

  rankNum?: number;

  totalReduction?: number;

  totalScore?: number;

  updateBy?: number;
  updateByName?: string;

  updateTime?: Date;
}

export interface DeptRankDto {
  deptName: string;

  orderNum: number;

  parentId: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dayReduction?: number;

  dayScore?: number;

  delFlag?: number;

  id?: number;

  rankNum?: number;

  totalReduction?: number;

  totalScore?: number;

  updateBy?: number;

  updateTime?: Date;
}

// 导入产品历史文件表
export interface FileUpload {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  failNum?: number;

  failPath?: string;

  fileName?: string;

  filePath?: string;
  id?: number;

  orgId?: number;

  status?: number;

  successNum?: number;

  totalNum?: number;

  type?: number;

  updateBy?: number;
  updateByName?: string;

  updateTime?: Date;
}

// 商品表
export interface Goods {
  countLimit: number;

  goodsName: string;

  goodsStatus: 'OFFGOODS' | 'PULLGOODS';

  id: number;

  imgPath: string;

  limitNo: 'ESTIMATE' | 'PULLGOODS';

  orderNum: number;

  score: number;

  sendType: number;

  amount?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: number;

  deptId?: string;
  deptName?: string;

  remark?: string;

  updateBy?: number;
  updateByName?: string;

  updateTime?: Date;
}

// 商品库存表
export interface GoodsStock {
  amount?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  goodsId?: number;
  goodsName?: string;

  id?: number;
  imgPath?: string;

  saleAmount?: number;

  updateBy?: number;
  updateByName?: string;

  updateTime?: Date;

  version?: number;
}

// 库存记录表
export interface InventoryRecord {
  changeCount: number;

  changeType: 'EXCHANGE' | 'INSTOCK' | 'OUTSTOCK';

  goodsId: number;

  amount?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  goodsName?: string;

  id?: number;

  orderNo?: string;

  remark?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface InventoryRecordDto {
  changeCount: string;

  changeType: number;

  goodsId: number;

  amount?: number;
  changeType_name?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  goodsName?: string;

  id?: number;

  orderNo?: string;

  remark?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface Link {
  href?: string;
  templated?: boolean;
}

export interface ModelAndView {
  empty?: boolean;
  model?: unknown;
  modelMap?: { [key: string]: unknown };
  reference?: boolean;
  status?:
    | 'ACCEPTED'
    | 'ALREADY_REPORTED'
    | 'BAD_GATEWAY'
    | 'BAD_REQUEST'
    | 'BANDWIDTH_LIMIT_EXCEEDED'
    | 'CHECKPOINT'
    | 'CONFLICT'
    | 'CONTINUE'
    | 'CREATED'
    | 'DESTINATION_LOCKED'
    | 'EXPECTATION_FAILED'
    | 'FAILED_DEPENDENCY'
    | 'FORBIDDEN'
    | 'FOUND'
    | 'GATEWAY_TIMEOUT'
    | 'GONE'
    | 'HTTP_VERSION_NOT_SUPPORTED'
    | 'IM_USED'
    | 'INSUFFICIENT_SPACE_ON_RESOURCE'
    | 'INSUFFICIENT_STORAGE'
    | 'INTERNAL_SERVER_ERROR'
    | 'I_AM_A_TEAPOT'
    | 'LENGTH_REQUIRED'
    | 'LOCKED'
    | 'LOOP_DETECTED'
    | 'METHOD_FAILURE'
    | 'METHOD_NOT_ALLOWED'
    | 'MOVED_PERMANENTLY'
    | 'MOVED_TEMPORARILY'
    | 'MULTIPLE_CHOICES'
    | 'MULTI_STATUS'
    | 'NETWORK_AUTHENTICATION_REQUIRED'
    | 'NON_AUTHORITATIVE_INFORMATION'
    | 'NOT_ACCEPTABLE'
    | 'NOT_EXTENDED'
    | 'NOT_FOUND'
    | 'NOT_IMPLEMENTED'
    | 'NOT_MODIFIED'
    | 'NO_CONTENT'
    | 'OK'
    | 'PARTIAL_CONTENT'
    | 'PAYLOAD_TOO_LARGE'
    | 'PAYMENT_REQUIRED'
    | 'PERMANENT_REDIRECT'
    | 'PRECONDITION_FAILED'
    | 'PRECONDITION_REQUIRED'
    | 'PROCESSING'
    | 'PROXY_AUTHENTICATION_REQUIRED'
    | 'REQUESTED_RANGE_NOT_SATISFIABLE'
    | 'REQUEST_ENTITY_TOO_LARGE'
    | 'REQUEST_HEADER_FIELDS_TOO_LARGE'
    | 'REQUEST_TIMEOUT'
    | 'REQUEST_URI_TOO_LONG'
    | 'RESET_CONTENT'
    | 'SEE_OTHER'
    | 'SERVICE_UNAVAILABLE'
    | 'SWITCHING_PROTOCOLS'
    | 'TEMPORARY_REDIRECT'
    | 'TOO_EARLY'
    | 'TOO_MANY_REQUESTS'
    | 'UNAUTHORIZED'
    | 'UNAVAILABLE_FOR_LEGAL_REASONS'
    | 'UNPROCESSABLE_ENTITY'
    | 'UNSUPPORTED_MEDIA_TYPE'
    | 'UPGRADE_REQUIRED'
    | 'URI_TOO_LONG'
    | 'USE_PROXY'
    | 'VARIANT_ALSO_NEGOTIATES';
  view?: View;
  viewName?: string;
}

export interface OrderItem {
  asc?: boolean;
  column?: string;
}

// 订单表
export interface Orders {
  companyId?: number;

  consignee?: string;

  createBy?: number;

  createTime?: Date;

  goodsCount?: number;
  goodsName?: string;

  id?: number;
  mobile?: string;
  mobileMask?: string;

  orderAddress?: string;

  orderMobile?: string;

  orderNo?: string;

  orderStatus?: 'RECEIVED' | 'WAITING';

  payScore?: number;
  realName?: string;

  remark?: string;

  updateBy?: number;

  updateTime?: Date;

  userId?: number;
  userNumber?: string;
}

export interface PageCompany {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Company[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageDeptRankDto {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: DeptRankDto[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageDept {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Dept[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageFileUpload {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: FileUpload[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageGoodsStock {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: GoodsStock[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageGoods {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Goods[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageInventoryRecordDto {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: InventoryRecordDto[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageOrders {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Orders[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageQuestion {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Question[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageScene {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Scene[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageUserBehavior {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: UserBehavior[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageUserScore {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: UserScore[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageUser {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: User[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

// 题目答案表
export interface Question {
  answerA: string;

  answerB: string;

  correctAnswer: string;

  id: number;

  questionTitle: string;

  questionType: 'ESTIMATE' | 'OFFGOODS' | 'PULLGOODS';

  answerC?: string;

  answerD?: string;

  answerE?: string;

  answerF?: string;

  answerG?: string;

  answerH?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  delFlag?: boolean;

  questionLabels?: string;

  updateBy?: number;
  updateByName?: string;

  updateTime?: Date;
  userAnswer?: string;
}

export interface RollBackDto {
  cancelMsg: string;

  id: number;
}

// 场景表
export interface Scene {
  id: number;

  limitType: number;

  orderNum: number;

  periodType: number;

  rate: number;

  sceneCode: string;

  sceneImage: string;

  sceneName: string;

  sceneScript: string;

  sceneType: string;

  sceneUnit: string;

  sceneUnitName: string;

  unitScore: number;

  builtIn?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;
  delFlag?: number;

  errPath?: string;

  rangeType?: number;

  remark?: string;

  sceneClassify?: string;
  sceneClassify_name?: string;

  sceneGraph?: string;

  sceneStatus?: 'OFFGOODS' | 'PULLGOODS';

  sceneTplId?: number;
  sceneType_name?: string;

  scoreMaxValue?: number;

  scoreType?: number;

  timesMaxValue?: number;

  updateBy?: number;
  updateByName?: string;

  updateTime?: Date;
}

// 用户表
export interface User {
  deptId: number;

  id: number;

  mobile: string;

  mobileMask: string;

  rankNum: number;

  realName: string;

  userNumber: string;

  avatarUrl?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  currReduction?: number;

  currScore?: number;

  dayReduction?: number;

  dayScore?: number;

  delFlag?: boolean;

  deptName?: string;

  level?: number;

  orgTree?: string;

  sex?: number;

  totalReduction?: number;

  totalScore?: number;

  updateBy?: number;

  updateTime?: Date;

  userStatus?: 'OFFGOODS' | 'PULLGOODS';
}

// 用户活动表
export interface UserBehavior {
  behaviorStatus?: 'EXCHANGE' | 'OFFGOODS' | 'PULLGOODS';

  behaviorTime?: Date;

  cancelMsg?: string;

  changeValue?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataStatus?: number;

  id?: number;

  imgPath?: string;

  mobile?: string;

  mobileMask?: string;

  realName?: string;

  sceneId?: number;

  sceneName?: string;

  sceneUnitName?: string;

  sourceId?: number;

  updateBy?: number;

  updateTime?: Date;

  userId?: number;
  userNumber?: string;
}

// 用户积分表
export interface UserScore {
  behaviorId?: number;

  changeCers?: number;

  changeScore?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  currCers?: number;

  currScore?: number;

  id?: number;
  mobile?: string;
  mobileMask?: string;

  orderNo?: string;

  realName?: string;

  remark?: string;

  sceneId?: number;

  sceneName?: string;
  sceneUnitName?: string;

  scoreType?: 'CUSTOM' | 'OFFGOODS' | 'PULLGOODS';

  sourceId?: number;

  totalCers?: number;

  totalScore?: number;

  updateBy?: number;

  updateTime?: Date;

  userId?: number;

  userNumber?: string;
}

export interface View {
  contentType?: string;
}

export interface 通用接口返回对象 {
  code: number;

  data: unknown;

  msg: string;
}

export interface 通用接口返回对象Company {
  code: number;

  data: Company;

  msg: string;
}

export interface 通用接口返回对象Dept {
  code: number;

  data: Dept;

  msg: string;
}

export interface 通用接口返回对象Goods {
  code: number;

  data: Goods;

  msg: string;
}

export interface 通用接口返回对象ListDept {
  code: number;

  data: Dept[];

  msg: string;
}

export interface 通用接口返回对象Orders {
  code: number;

  data: Orders;

  msg: string;
}

export interface 通用接口返回对象PageCompany {
  code: number;

  data: PageCompany;

  msg: string;
}

export interface 通用接口返回对象PageDeptRankDto {
  code: number;

  data: PageDeptRankDto;

  msg: string;
}

export interface 通用接口返回对象PageDept {
  code: number;

  data: PageDept;

  msg: string;
}

export interface 通用接口返回对象PageFileUpload {
  code: number;

  data: PageFileUpload;

  msg: string;
}

export interface 通用接口返回对象PageGoodsStock {
  code: number;

  data: PageGoodsStock;

  msg: string;
}

export interface 通用接口返回对象PageGoods {
  code: number;

  data: PageGoods;

  msg: string;
}

export interface 通用接口返回对象PageInventoryRecordDto {
  code: number;

  data: PageInventoryRecordDto;

  msg: string;
}

export interface 通用接口返回对象PageOrders {
  code: number;

  data: PageOrders;

  msg: string;
}

export interface 通用接口返回对象PageQuestion {
  code: number;

  data: PageQuestion;

  msg: string;
}

export interface 通用接口返回对象PageScene {
  code: number;

  data: PageScene;

  msg: string;
}

export interface 通用接口返回对象PageUserBehavior {
  code: number;

  data: PageUserBehavior;

  msg: string;
}

export interface 通用接口返回对象PageUserScore {
  code: number;

  data: PageUserScore;

  msg: string;
}

export interface 通用接口返回对象PageUser {
  code: number;

  data: PageUser;

  msg: string;
}

export interface 通用接口返回对象Question {
  code: number;

  data: Question;

  msg: string;
}

export interface 通用接口返回对象Scene {
  code: number;

  data: Scene;

  msg: string;
}

export interface 通用接口返回对象UserBehavior {
  code: number;

  data: UserBehavior;

  msg: string;
}

export interface 通用接口返回对象User {
  code: number;

  data: User;

  msg: string;
}

export interface 通用接口返回对象boolean {
  code: number;

  data: boolean;

  msg: string;
}

export interface 通用接口返回对象object {
  code: number;

  data: unknown;

  msg: string;
}
