/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 新增采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductAddProps = {
  req: ProductReq;
};

export const postSupplychainProductAdd = (
  { req }: postSupplychainProductAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增问卷
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionnaireAddProps = {
  req: QuestionnaireReq;
};

export const postSupplychainQuestionnaireAdd = (
  { req }: postSupplychainQuestionnaireAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/questionnaire/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增题目
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionAddProps = {
  req: QuestionnaireQuestionReq;
};

export const postSupplychainQuestionAdd = (
  { req }: postSupplychainQuestionAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/question/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierAddProps = {
  req: SupplierReq;
};

export const postSupplychainSupplierAdd = (
  { req }: postSupplychainSupplierAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 待审核人列表-分页
 * @param {integer}  [auditDataId]   [required]  审核数据id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainAuditUserPageProps = {
  auditDataId: number;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainAuditUserPage = (
  { auditDataId, pageNum, pageSize }: getSupplychainAuditUserPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditUserDto> => {
  let backendApiUrl = `/supplychain/audit/user/page`;

  return axios.request<通用接口返回对象IPageAuditUserDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审核
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainAuditAuditProps = {
  req: AuditDto;
};

export const postSupplychainAuditAudit = (
  { req }: postSupplychainAuditAuditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/audit/audit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataProcessFootprintApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataProcessFootprintApplyInfoId = (
  { applyInfoId }: getSupplychainDataProcessFootprintApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintBase> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/${applyInfoId}`;

  return axios.request<通用接口返回对象FootprintBase>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择-核算基本信息
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [productionBusinessId] [required]  产品核算id
 */

export type getSupplychainDataProcessFootprintChooseDetailProps = {
  applyInfoId: number;
  productionBusinessId: number;
};

export const getSupplychainDataProcessFootprintChooseDetail = (
  {
    applyInfoId,
    productionBusinessId,
  }: getSupplychainDataProcessFootprintChooseDetailProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ProductionBusinessDto> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/choose/detail`;

  return axios.request<通用接口返回对象ProductionBusinessDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      productionBusinessId: productionBusinessId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择-核算列表-分页
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {string}   [likeProductionCode]    产品编码
 * @param {string}   [likeProductionName]    产品名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainDataProcessFootprintChoosePageProps = {
  applyInfoId: number;
  likeProductionCode?: string | null | undefined;
  likeProductionName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainDataProcessFootprintChoosePage = (
  {
    applyInfoId,
    likeProductionCode,
    likeProductionName,
    pageNum,
    pageSize,
  }: getSupplychainDataProcessFootprintChoosePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageProductionBusinessDto> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/choose/page`;

  return axios.request<通用接口返回对象IPageProductionBusinessDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      likeProductionCode: likeProductionCode,
      likeProductionName: likeProductionName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择-排放源详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [id]            [required]  排放源id
 */

export type getSupplychainDataProcessFootprintChooseSourceApplyInfoIdIdProps = {
  applyInfoId: number;
  id: number;
};

export const getSupplychainDataProcessFootprintChooseSourceApplyInfoIdId = (
  {
    applyInfoId,
    id,
  }: getSupplychainDataProcessFootprintChooseSourceApplyInfoIdIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ProductionMaterialsDto> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/choose/source/${applyInfoId}/${id}`;

  return axios.request<通用接口返回对象ProductionMaterialsDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择-排放源列表-分页
 * @param {any}      [applyInfoId]   [required]  申请id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [processModelId] [required]  模型id
 * @param {integer}  [productionBusinessId] [required]  核算id
 */

export type getSupplychainDataProcessFootprintChooseSourceListProps = {
  applyInfoId: unknown;
  pageNum: number;
  pageSize: number;
  processModelId: number;
  productionBusinessId: number;
};

export const getSupplychainDataProcessFootprintChooseSourceList = (
  {
    applyInfoId,
    pageNum,
    pageSize,
    processModelId,
    productionBusinessId,
  }: getSupplychainDataProcessFootprintChooseSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageProductionMaterialsDto> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/choose/sourceList`;

  return axios.request<通用接口返回对象IPageProductionMaterialsDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      pageNum: pageNum,
      pageSize: pageSize,
      processModelId: processModelId,
      productionBusinessId: productionBusinessId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择核算
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataProcessFootprintChooseProps = {
  req: FootprintBindReq;
};

export const postSupplychainDataProcessFootprintChoose = (
  { req }: postSupplychainDataProcessFootprintChooseProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/choose`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算申请列表
 * @param {integer}  [supplierId]    [required]  供应商id
 */

export type getSupplychainApplyComputationListSupplierIdProps = {
  supplierId: number;
};

export const getSupplychainApplyComputationListSupplierId = (
  { supplierId }: getSupplychainApplyComputationListSupplierIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListApplyComputationResp> => {
  let backendApiUrl = `/supplychain/apply/computationList/${supplierId}`;

  return axios.request<通用接口返回对象ListApplyComputationResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      supplierId: supplierId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 申请企业碳核算
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainApplyComputationApplyProps = {
  req: ApplyComputationReq;
};

export const postSupplychainApplyComputationApply = (
  { req }: postSupplychainApplyComputationApplyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/apply/computation/apply`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择-核算列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataProcessComputationChooseApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataProcessComputationChooseApplyInfoId = (
  { applyInfoId }: getSupplychainDataProcessComputationChooseApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationDto> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/choose/${applyInfoId}`;

  return axios.request<通用接口返回对象ComputationDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择-排放源详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [dataSourceId]  [required]  排放数据源id
 */

export type getSupplychainDataProcessComputationChooseSourceApplyInfoIdDataSourceIdProps =
  {
    applyInfoId: number;
    dataSourceId: number;
  };

export const getSupplychainDataProcessComputationChooseSourceApplyInfoIdDataSourceId =
  (
    {
      applyInfoId,
      dataSourceId,
    }: getSupplychainDataProcessComputationChooseSourceApplyInfoIdDataSourceIdProps,
    $config?: AxiosRequestConfig,
  ): AxiosPromise<通用接口返回对象EmissionSourceDto> => {
    let backendApiUrl = `/supplychain/dataProcess/computation/choose/source/${applyInfoId}/${dataSourceId}`;

    return axios.request<通用接口返回对象EmissionSourceDto>({
      url: backendApiUrl,
      method: 'GET',
      params: serializeQueryParam({
        applyInfoId: applyInfoId,
        dataSourceId: dataSourceId,
      }),
      // baseURL: `${process.env.REACT_APP_API_URL}`,
      ...$config,
    });
  };

/**
 * @description 选择-排放源列表-分页
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainDataProcessComputationChooseSourceListProps = {
  applyInfoId: number;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainDataProcessComputationChooseSourceList = (
  {
    applyInfoId,
    pageNum,
    pageSize,
  }: getSupplychainDataProcessComputationChooseSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageEmissionSourceDto> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/choose/sourceList`;

  return axios.request<通用接口返回对象IPageEmissionSourceDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择核算
 * @param {integer}  [applyInfoId]   [required]  applyInfoId
 */

export type postSupplychainDataProcessComputationChooseApplyInfoIdProps = {
  applyInfoId: number;
};

export const postSupplychainDataProcessComputationChooseApplyInfoId = (
  { applyInfoId }: postSupplychainDataProcessComputationChooseApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/choose/${applyInfoId}`;
  backendApiUrl = backendApiUrl.replace(
    '{applyInfoId}',
    encodeURIComponent('' + applyInfoId),
  );

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算结果-详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataFillComputationApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataFillComputationApplyInfoId = (
  { applyInfoId }: getSupplychainDataFillComputationApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationResult> => {
  let backendApiUrl = `/supplychain/dataFill/computation/${applyInfoId}`;

  return axios.request<通用接口返回对象ComputationResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataProcessComputationApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataProcessComputationApplyInfoId = (
  { applyInfoId }: getSupplychainDataProcessComputationApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationResult> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/${applyInfoId}`;

  return axios.request<通用接口返回对象ComputationResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算结果详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainResultComputationApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainResultComputationApplyInfoId = (
  { applyInfoId }: getSupplychainResultComputationApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationResult> => {
  let backendApiUrl = `/supplychain/result/computation/${applyInfoId}`;

  return axios.request<通用接口返回对象ComputationResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算-排放源列表-分页
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainProcessComputationPageProps = {
  applyInfoId: number;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainProcessComputationPage = (
  { applyInfoId, pageNum, pageSize }: getSupplychainProcessComputationPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageComputationProcess> => {
  let backendApiUrl = `/supplychain/process/computation/page`;

  return axios.request<通用接口返回对象IPageComputationProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算结果-保存并提交
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataFillComputationSaveAndSubmitProps = {
  req: ComputationResultReq;
};

export const postSupplychainDataFillComputationSaveAndSubmit = (
  { req }: postSupplychainDataFillComputationSaveAndSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataFill/computation/saveAndSubmit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存并提交
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataProcessComputationSaveAndSubmitProps = {
  req: ApplyInfoIdReq;
};

export const postSupplychainDataProcessComputationSaveAndSubmit = (
  { req }: postSupplychainDataProcessComputationSaveAndSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/saveAndSubmit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算结果-保存
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataFillComputationSaveProps = {
  req: ComputationResultReq;
};

export const postSupplychainDataFillComputationSave = (
  { req }: postSupplychainDataFillComputationSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataFill/computation/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataProcessComputationSaveProps = {
  req: ApplyInfoIdReq;
};

export const postSupplychainDataProcessComputationSave = (
  { req }: postSupplychainDataProcessComputationSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [id]            [required]  排放源id
 */

export type getSupplychainDataProcessComputationSourceApplyInfoIdIdProps = {
  applyInfoId: number;
  id: number;
};

export const getSupplychainDataProcessComputationSourceApplyInfoIdId = (
  {
    applyInfoId,
    id,
  }: getSupplychainDataProcessComputationSourceApplyInfoIdIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationProcess> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/source/${applyInfoId}/${id}`;

  return axios.request<通用接口返回对象ComputationProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 企业碳核算-排放源详情
 * @param {integer}  [id]            [required]  id
 */

export type getSupplychainProcessComputationSourceIdProps = {
  id: number;
};

export const getSupplychainProcessComputationSourceId = (
  { id }: getSupplychainProcessComputationSourceIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationProcess> => {
  let backendApiUrl = `/supplychain/process/computation/source/${id}`;

  return axios.request<通用接口返回对象ComputationProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainDataProcessComputationSourceListProps = {
  applyInfoId: number;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainDataProcessComputationSourceList = (
  {
    applyInfoId,
    pageNum,
    pageSize,
  }: getSupplychainDataProcessComputationSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageComputationProcess> => {
  let backendApiUrl = `/supplychain/dataProcess/computation/sourceList`;

  return axios.request<通用接口返回对象IPageComputationProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制问卷
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionnaireCopyProps = {
  req: QuestionnaireReq;
};

export const postSupplychainQuestionnaireCopy = (
  { req }: postSupplychainQuestionnaireCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/questionnaire/copy`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商碳数据-当前审批流程列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainAuditNodeListCurrProps = {
  applyInfoId: number;
};

export const getSupplychainAuditNodeListCurr = (
  { applyInfoId }: getSupplychainAuditNodeListCurrProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditNode> => {
  let backendApiUrl = `/supplychain/audit/node/list/curr`;

  return axios.request<通用接口返回对象ListAuditNode>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批记录列表-指定审批
 * @param {integer}  [auditDataId]   [required]  审核数据id
 */

export type getSupplychainAuditDataLogListProps = {
  auditDataId: number;
};

export const getSupplychainAuditDataLogList = (
  { auditDataId }: getSupplychainAuditDataLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/supplychain/audit/data/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 问卷填报数据
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainQuestionnaireDataApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainQuestionnaireDataApplyInfoId = (
  { applyInfoId }: getSupplychainQuestionnaireDataApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象QuestionnaireResp> => {
  let backendApiUrl = `/supplychain/questionnaire/data/${applyInfoId}`;

  return axios.request<通用接口返回对象QuestionnaireResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择默认题目
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionDefaultChooseProps = {
  req: QuestionnaireQuestionChooserReq;
};

export const postSupplychainQuestionDefaultChoose = (
  { req }: postSupplychainQuestionDefaultChooseProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/question/default/choose`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 默认题目列表
 */

export type getSupplychainQuestionDefaultListProps = {};

export const getSupplychainQuestionDefaultList = (
  {}: getSupplychainQuestionDefaultListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListQuestionnaireQuestion> => {
  let backendApiUrl = `/supplychain/question/default/list`;

  return axios.request<通用接口返回对象ListQuestionnaireQuestion>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductDeleteProps = {
  req: IdReq;
};

export const postSupplychainProductDelete = (
  { req }: postSupplychainProductDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除问卷
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionnaireDeleteProps = {
  req: IdReq;
};

export const postSupplychainQuestionnaireDelete = (
  { req }: postSupplychainQuestionnaireDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/questionnaire/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除题目
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionDeleteProps = {
  req: IdReq;
};

export const postSupplychainQuestionDelete = (
  { req }: postSupplychainQuestionDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/question/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 申请数据概览&amp;数据要求
 * @param {integer}  [id]            [required]  申请id
 */

export type getSupplychainApplyIdProps = {
  id: number;
};

export const getSupplychainApplyId = (
  { id }: getSupplychainApplyIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ApplyInfoResp> => {
  let backendApiUrl = `/supplychain/apply/${id}`;

  return axios.request<通用接口返回对象ApplyInfoResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据请求详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataFillApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataFillApplyInfoId = (
  { applyInfoId }: getSupplychainDataFillApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ApplyInfoResp> => {
  let backendApiUrl = `/supplychain/dataFill/${applyInfoId}`;

  return axios.request<通用接口返回对象ApplyInfoResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 采购产品详情
 * @param {integer}  [id]            [required]  id
 */

export type getSupplychainProductIdProps = {
  id: number;
};

export const getSupplychainProductId = (
  { id }: getSupplychainProductIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Product> => {
  let backendApiUrl = `/supplychain/product/${id}`;

  return axios.request<通用接口返回对象Product>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 问卷详情
 * @param {integer}  [id]            [required]  id
 */

export type getSupplychainQuestionnaireIdProps = {
  id: number;
};

export const getSupplychainQuestionnaireId = (
  { id }: getSupplychainQuestionnaireIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Questionnaire> => {
  let backendApiUrl = `/supplychain/questionnaire/${id}`;

  return axios.request<通用接口返回对象Questionnaire>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 题目详情
 * @param {integer}  [id]            [required]  id
 */

export type getSupplychainQuestionIdProps = {
  id: number;
};

export const getSupplychainQuestionId = (
  { id }: getSupplychainQuestionIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象QuestionnaireQuestion> => {
  let backendApiUrl = `/supplychain/question/${id}`;

  return axios.request<通用接口返回对象QuestionnaireQuestion>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商详情
 * @param {integer}  [id]            [required]  id
 */

export type getSupplychainSupplierIdProps = {
  id: number;
};

export const getSupplychainSupplierId = (
  { id }: getSupplychainSupplierIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Supplier> => {
  let backendApiUrl = `/supplychain/supplier/${id}`;

  return axios.request<通用接口返回对象Supplier>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductEditProps = {
  req: Product;
};

export const postSupplychainProductEdit = (
  { req }: postSupplychainProductEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑问卷
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionnaireEditProps = {
  req: QuestionnaireReq;
};

export const postSupplychainQuestionnaireEdit = (
  { req }: postSupplychainQuestionnaireEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/questionnaire/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑题目
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionEditProps = {
  req: QuestionnaireQuestionReq;
};

export const postSupplychainQuestionEdit = (
  { req }: postSupplychainQuestionEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/question/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierEditProps = {
  req: SupplierReq;
};

export const postSupplychainSupplierEdit = (
  { req }: postSupplychainSupplierEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询枚举值（忽略大小写）
 * @param {string}   [enumName]      [required]  枚举名
 */

export type getSupplychainEnumsEnumNameProps = {
  enumName: string;
};

export const getSupplychainEnumsEnumName = (
  { enumName }: getSupplychainEnumsEnumNameProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEnumResp> => {
  let backendApiUrl = `/supplychain/enums/${enumName}`;

  return axios.request<通用接口返回对象ListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      enumName: enumName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹申请列表
 * @param {integer}  [productId]     [required]  产品id
 */

export type getSupplychainApplyFootprintListProductIdProps = {
  productId: number;
};

export const getSupplychainApplyFootprintListProductId = (
  { productId }: getSupplychainApplyFootprintListProductIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListApplyFootprintResp> => {
  let backendApiUrl = `/supplychain/apply/footprintList/${productId}`;

  return axios.request<通用接口返回对象ListApplyFootprintResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      productId: productId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹-基本信息
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainProcessFootprintBaseApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainProcessFootprintBaseApplyInfoId = (
  { applyInfoId }: getSupplychainProcessFootprintBaseApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintBase> => {
  let backendApiUrl = `/supplychain/process/footprint/base/${applyInfoId}`;

  return axios.request<通用接口返回对象FootprintBase>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹结果-详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataFillFootprintApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataFillFootprintApplyInfoId = (
  { applyInfoId }: getSupplychainDataFillFootprintApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintResult> => {
  let backendApiUrl = `/supplychain/dataFill/footprint/${applyInfoId}`;

  return axios.request<通用接口返回对象FootprintResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹结果详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainResultFootprintApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainResultFootprintApplyInfoId = (
  { applyInfoId }: getSupplychainResultFootprintApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintResult> => {
  let backendApiUrl = `/supplychain/result/footprint/${applyInfoId}`;

  return axios.request<通用接口返回对象FootprintResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹-排放源列表-分页
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [processModelId] [required]  模型id
 */

export type getSupplychainProcessFootprintPageProps = {
  applyInfoId: number;
  pageNum: number;
  pageSize: number;
  processModelId: number;
};

export const getSupplychainProcessFootprintPage = (
  {
    applyInfoId,
    pageNum,
    pageSize,
    processModelId,
  }: getSupplychainProcessFootprintPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageFootprintProcess> => {
  let backendApiUrl = `/supplychain/process/footprint/page`;

  return axios.request<通用接口返回对象IPageFootprintProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      pageNum: pageNum,
      pageSize: pageSize,
      processModelId: processModelId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹结果-保存并提交
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataFillFootprintSaveAndSubmitProps = {
  req: FootprintResultReq;
};

export const postSupplychainDataFillFootprintSaveAndSubmit = (
  { req }: postSupplychainDataFillFootprintSaveAndSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataFill/footprint/saveAndSubmit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹结果-保存
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataFillFootprintSaveProps = {
  req: FootprintResultReq;
};

export const postSupplychainDataFillFootprintSave = (
  { req }: postSupplychainDataFillFootprintSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataFill/footprint/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹-排放源详情
 * @param {integer}  [id]            [required]  id
 */

export type getSupplychainProcessFootprintSourceIdProps = {
  id: number;
};

export const getSupplychainProcessFootprintSourceId = (
  { id }: getSupplychainProcessFootprintSourceIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintProcess> => {
  let backendApiUrl = `/supplychain/process/footprint/source/${id}`;

  return axios.request<通用接口返回对象FootprintProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹-碳排放明细
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [productionBusinessId] [required]  核算id
 */

export type getSupplychainDataFillFootprintStatisticApplyInfoIdProductionBusinessIdProps =
  {
    applyInfoId: number;
    productionBusinessId: number;
  };

export const getSupplychainDataFillFootprintStatisticApplyInfoIdProductionBusinessId =
  (
    {
      applyInfoId,
      productionBusinessId,
    }: getSupplychainDataFillFootprintStatisticApplyInfoIdProductionBusinessIdProps,
    $config?: AxiosRequestConfig,
  ): AxiosPromise<通用接口返回对象ProductionMaterialsStatisticDto> => {
    let backendApiUrl = `/supplychain/dataFill/footprint/statistic/${applyInfoId}/${productionBusinessId}`;

    return axios.request<通用接口返回对象ProductionMaterialsStatisticDto>({
      url: backendApiUrl,
      method: 'GET',
      params: serializeQueryParam({
        applyInfoId: applyInfoId,
        productionBusinessId: productionBusinessId,
      }),
      // baseURL: `${process.env.REACT_APP_API_URL}`,
      ...$config,
    });
  };

/**
 * @description 导入采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductImportProps = {
  req: ImportReq;
};

export const postSupplychainProductImport = (
  { req }: postSupplychainProductImportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/import`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导入供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierImportProps = {
  req: ImportReq;
};

export const postSupplychainSupplierImport = (
  { req }: postSupplychainSupplierImportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/import`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 题目列表
 * @param {integer}  [questionnaireId] [required]  问卷id
 */

export type getSupplychainQuestionListQuestionnaireIdProps = {
  questionnaireId: number;
};

export const getSupplychainQuestionListQuestionnaireId = (
  { questionnaireId }: getSupplychainQuestionListQuestionnaireIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListQuestionnaireQuestion> => {
  let backendApiUrl = `/supplychain/question/list/${questionnaireId}`;

  return axios.request<通用接口返回对象ListQuestionnaireQuestion>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      questionnaireId: questionnaireId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审核记录列表
 * @param {integer}  [supplierId]    [required]  供应商id
 */

export type getSupplychainSupplierAuditListSupplierIdProps = {
  supplierId: number;
};

export const getSupplychainSupplierAuditListSupplierId = (
  { supplierId }: getSupplychainSupplierAuditListSupplierIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListSupplierAuditLogDto> => {
  let backendApiUrl = `/supplychain/supplierAudit/list/${supplierId}`;

  return axios.request<通用接口返回对象ListSupplierAuditLogDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      supplierId: supplierId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批记录列表-关联数据的全量记录
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainAuditLogListProps = {
  applyInfoId: number;
};

export const getSupplychainAuditLogList = (
  { applyInfoId }: getSupplychainAuditLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/supplychain/audit/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 过程模型列表
 * @param {string}   [periodType]    [required]  系统边界要求。1 半生命周期；2 全生命周期
 */

export type getSupplychainProcessModelListProps = {
  periodType: '1' | '2';
};

export const getSupplychainProcessModelList = (
  { periodType }: getSupplychainProcessModelListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListProcessModel> => {
  let backendApiUrl = `/supplychain/processModel/list`;

  return axios.request<通用接口返回对象ListProcessModel>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      periodType: periodType,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批流程列表
 * @param {integer}  [auditDataId]   [required]  审核数据id
 */

export type getSupplychainAuditNodeListProps = {
  auditDataId: number;
};

export const getSupplychainAuditNodeList = (
  { auditDataId }: getSupplychainAuditNodeListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditNode> => {
  let backendApiUrl = `/supplychain/audit/node/list`;

  return axios.request<通用接口返回对象ListAuditNode>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排序
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionOrderProps = {
  req: QuestionnaireQuestionOrderReq;
};

export const postSupplychainQuestionOrder = (
  { req }: postSupplychainQuestionOrderProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/question/order`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商-查询是否有审批配置
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainAuditCheckProps = {
  applyInfoId: number;
};

export const getSupplychainAuditCheck = (
  { applyInfoId }: getSupplychainAuditCheckProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象BooleanResp> => {
  let backendApiUrl = `/supplychain/audit/check`;

  return axios.request<通用接口返回对象BooleanResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商碳数据列表-分页
 * @param {string}   [applyStatus]      申请状态。0 未填报 1 填报中 2 待审核 3 审核通过 4 审核不通过
 * @param {string}   [dataType]         数据类型。1 企业碳核算 2 产品碳足迹 3 低碳问卷
 * @param {string}   [likeSupplierName]    供应商名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainApplyPageProps = {
  applyStatus?: '0' | '1' | '2' | '3' | '4' | null | undefined;
  dataType?: '1' | '2' | '3' | null | undefined;
  likeSupplierName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainApplyPage = (
  {
    applyStatus,
    dataType,
    likeSupplierName,
    orgId,
    pageNum,
    pageSize,
  }: getSupplychainApplyPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageApplyInfo> => {
  let backendApiUrl = `/supplychain/apply/page`;

  return axios.request<通用接口返回对象IPageApplyInfo>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyStatus: applyStatus,
      dataType: dataType,
      likeSupplierName: likeSupplierName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据审核列表-分页
 * @param {string}   [auditStatus]      审核状态。0 待审核；1 审核通过；2 审核不通过；3 已撤回；4 已作废
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainAuditPageProps = {
  auditStatus?: '0' | '1' | '2' | '3' | '4' | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainAuditPage = (
  { auditStatus, pageNum, pageSize }: getSupplychainAuditPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditDataResp> => {
  let backendApiUrl = `/supplychain/audit/page`;

  return axios.request<通用接口返回对象IPageAuditDataResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditStatus: auditStatus,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 碳数据填报列表-分页
 * @param {string}   [applyStatus]      申请状态。0 未填报 1 填报中 2 待审核 3 审核通过 4 审核不通过
 * @param {string}   [dataType]         数据类型。1 企业碳核算 2 产品碳足迹 3 低碳问卷
 * @param {string}   [likeCompanyName]    客户名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainDataFillPageProps = {
  applyStatus?: '0' | '1' | '2' | '3' | '4' | null | undefined;
  dataType?: '1' | '2' | '3' | null | undefined;
  likeCompanyName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainDataFillPage = (
  {
    applyStatus,
    dataType,
    likeCompanyName,
    pageNum,
    pageSize,
  }: getSupplychainDataFillPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageApplyInfo> => {
  let backendApiUrl = `/supplychain/dataFill/page`;

  return axios.request<通用接口返回对象IPageApplyInfo>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyStatus: applyStatus,
      dataType: dataType,
      likeCompanyName: likeCompanyName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 采购产品列表-分页
 * @param {string}   [likeProductName]    产品名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSupplychainProductPageProps = {
  likeProductName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSupplychainProductPage = (
  { likeProductName, orgId, pageNum, pageSize }: getSupplychainProductPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageProduct> => {
  let backendApiUrl = `/supplychain/product/page`;

  return axios.request<通用接口返回对象IPageProduct>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeProductName: likeProductName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 问卷列表-分页
 * @param {string}   [likeQuestionnaireName]    问卷名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [questionnaireStatus]    问卷状态。0 未发布；1 已发布；2 已结束
 */

export type getSupplychainQuestionnairePageProps = {
  likeQuestionnaireName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  questionnaireStatus?: '0' | '1' | '2' | null | undefined;
};

export const getSupplychainQuestionnairePage = (
  {
    likeQuestionnaireName,
    orgId,
    pageNum,
    pageSize,
    questionnaireStatus,
  }: getSupplychainQuestionnairePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageQuestionnaire> => {
  let backendApiUrl = `/supplychain/questionnaire/page`;

  return axios.request<通用接口返回对象IPageQuestionnaire>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeQuestionnaireName: likeQuestionnaireName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      questionnaireStatus: questionnaireStatus,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商列表-分页
 * @param {string}   [likeSupplierCode]    供应商编码
 * @param {string}   [likeSupplierName]    供应商名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [supplierStatus]    供应商状态。0 审核中；1 启用；2 禁用；3 审核不通过
 */

export type getSupplychainSupplierPageProps = {
  likeSupplierCode?: string | null | undefined;
  likeSupplierName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  supplierStatus?: '0' | '1' | '2' | '3' | null | undefined;
};

export const getSupplychainSupplierPage = (
  {
    likeSupplierCode,
    likeSupplierName,
    orgId,
    pageNum,
    pageSize,
    supplierStatus,
  }: getSupplychainSupplierPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageSupplier> => {
  let backendApiUrl = `/supplychain/supplier/page`;

  return axios.request<通用接口返回对象IPageSupplier>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeSupplierCode: likeSupplierCode,
      likeSupplierName: likeSupplierName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      supplierStatus: supplierStatus,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 问卷预览
 * @param {integer}  [questionnaireId] [required]  问卷id
 */

export type getSupplychainQuestionnairePreviewQuestionnaireIdProps = {
  questionnaireId: number;
};

export const getSupplychainQuestionnairePreviewQuestionnaireId = (
  { questionnaireId }: getSupplychainQuestionnairePreviewQuestionnaireIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListQuestionnaireQuestionResp> => {
  let backendApiUrl = `/supplychain/questionnaire/preview/${questionnaireId}`;

  return axios.request<通用接口返回对象ListQuestionnaireQuestionResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      questionnaireId: questionnaireId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierProductAddProps = {
  req: SupplierProductReq;
};

export const postSupplychainSupplierProductAdd = (
  { req }: postSupplychainSupplierProductAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/product/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 申请产品碳足迹
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainApplyProductApplyProps = {
  req: ApplyFootprintReq;
};

export const postSupplychainApplyProductApply = (
  { req }: postSupplychainApplyProductApplyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/apply/product/apply`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierProductBindProps = {
  req: SupplierProductBindReq;
};

export const postSupplychainSupplierProductBind = (
  { req }: postSupplychainSupplierProductBindProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/product/bind`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierProductDeleteProps = {
  req: SupplierProductIdReq;
};

export const postSupplychainSupplierProductDelete = (
  { req }: postSupplychainSupplierProductDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/product/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商详情
 * @param {integer}  [productId]     [required]  采购产品id
 * @param {integer}  [supplierId]    [required]  供应商id
 */

export type getSupplychainProductSupplierSupplierIdProductIdProps = {
  productId: number;
  supplierId: number;
};

export const getSupplychainProductSupplierSupplierIdProductId = (
  {
    productId,
    supplierId,
  }: getSupplychainProductSupplierSupplierIdProductIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Supplier> => {
  let backendApiUrl = `/supplychain/product/supplier/${supplierId}/${productId}`;

  return axios.request<通用接口返回对象Supplier>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      productId: productId,
      supplierId: supplierId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 采购产品详情
 * @param {integer}  [productId]     [required]  采购产品id
 * @param {integer}  [supplierId]    [required]  供应商id
 */

export type getSupplychainSupplierProductSupplierIdProductIdProps = {
  productId: number;
  supplierId: number;
};

export const getSupplychainSupplierProductSupplierIdProductId = (
  {
    productId,
    supplierId,
  }: getSupplychainSupplierProductSupplierIdProductIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Product> => {
  let backendApiUrl = `/supplychain/supplier/product/${supplierId}/${productId}`;

  return axios.request<通用接口返回对象Product>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      productId: productId,
      supplierId: supplierId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑采购产品
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierProductEditProps = {
  req: SupplierProductReq;
};

export const postSupplychainSupplierProductEdit = (
  { req }: postSupplychainSupplierProductEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/product/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 采购产品列表-分页
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [supplierId]    [required]  供应商id
 */

export type getSupplychainSupplierProductPageProps = {
  pageNum: number;
  pageSize: number;
  supplierId: number;
};

export const getSupplychainSupplierProductPage = (
  { pageNum, pageSize, supplierId }: getSupplychainSupplierProductPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageProduct> => {
  let backendApiUrl = `/supplychain/supplier/product/page`;

  return axios.request<通用接口返回对象IPageProduct>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
      supplierId: supplierId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 发布问卷-全量
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainQuestionnairePublishProps = {
  req: QuestionnairePublishReq;
};

export const postSupplychainQuestionnairePublish = (
  { req }: postSupplychainQuestionnairePublishProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/questionnaire/publish`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 题目及答案列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainDataQuestionnaireQuestionListApplyInfoIdProps = {
  applyInfoId: number;
};

export const getSupplychainDataQuestionnaireQuestionListApplyInfoId = (
  { applyInfoId }: getSupplychainDataQuestionnaireQuestionListApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象QuestionnaireResp> => {
  let backendApiUrl = `/supplychain/data/questionnaire/question/list/${applyInfoId}`;

  return axios.request<通用接口返回对象QuestionnaireResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存报告
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataFillReportSaveProps = {
  req: ReportReq;
};

export const postSupplychainDataFillReportSave = (
  { req }: postSupplychainDataFillReportSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataFill/report/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存并提交
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataProcessFootprintSaveAndSubmitProps = {
  req: ApplyInfoIdReq;
};

export const postSupplychainDataProcessFootprintSaveAndSubmit = (
  { req }: postSupplychainDataProcessFootprintSaveAndSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/saveAndSubmit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存并提交
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataQuestionnaireSaveAndSubmitProps = {
  req: QuestionnaireAnswerReq;
};

export const postSupplychainDataQuestionnaireSaveAndSubmit = (
  { req }: postSupplychainDataQuestionnaireSaveAndSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/data/questionnaire/saveAndSubmit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataProcessFootprintSaveProps = {
  req: ApplyInfoIdReq;
};

export const postSupplychainDataProcessFootprintSave = (
  { req }: postSupplychainDataProcessFootprintSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 保存
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataQuestionnaireSaveProps = {
  req: QuestionnaireAnswerReq;
};

export const postSupplychainDataQuestionnaireSave = (
  { req }: postSupplychainDataQuestionnaireSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/data/questionnaire/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源详情
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [id]            [required]  排放源id
 */

export type getSupplychainDataProcessFootprintSourceApplyInfoIdIdProps = {
  applyInfoId: number;
  id: number;
};

export const getSupplychainDataProcessFootprintSourceApplyInfoIdId = (
  {
    applyInfoId,
    id,
  }: getSupplychainDataProcessFootprintSourceApplyInfoIdIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintProcess> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/source/${applyInfoId}/${id}`;

  return axios.request<通用接口返回对象FootprintProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [processModelId] [required]  模型id
 */

export type getSupplychainDataProcessFootprintSourceListProps = {
  applyInfoId: number;
  pageNum: number;
  pageSize: number;
  processModelId: number;
};

export const getSupplychainDataProcessFootprintSourceList = (
  {
    applyInfoId,
    pageNum,
    pageSize,
    processModelId,
  }: getSupplychainDataProcessFootprintSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageFootprintProcess> => {
  let backendApiUrl = `/supplychain/dataProcess/footprint/sourceList`;

  return axios.request<通用接口返回对象IPageFootprintProcess>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
      pageNum: pageNum,
      pageSize: pageSize,
      processModelId: processModelId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 启用禁用供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierStatusProps = {
  req: SupplierStatusReq;
};

export const postSupplychainSupplierStatus = (
  { req }: postSupplychainSupplierStatusProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/status`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 提交审核
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainDataFillSubmitProps = {
  req: IdReq;
};

export const postSupplychainDataFillSubmit = (
  { req }: postSupplychainDataFillSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/dataFill/submit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 提交审核
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainSupplierSubmitProps = {
  req: IdReq;
};

export const postSupplychainSupplierSubmit = (
  { req }: postSupplychainSupplierSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/supplier/submit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductSupplierBindProps = {
  req: ProductSupplierBindReq;
};

export const postSupplychainProductSupplierBind = (
  { req }: postSupplychainProductSupplierBindProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/supplier/bind`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductSupplierDeleteProps = {
  req: SupplierProductIdReq;
};

export const postSupplychainProductSupplierDelete = (
  { req }: postSupplychainProductSupplierDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/supplier/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑供应商
 * @param {any}      [req]           [required]  req
 */

export type postSupplychainProductSupplierEditProps = {
  req: ProductSupplierReq;
};

export const postSupplychainProductSupplierEdit = (
  { req }: postSupplychainProductSupplierEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/supplychain/product/supplier/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 问卷供应商列表
 * @param {integer}  [questionnaireId] [required]  问卷id
 */

export type getSupplychainQuestionnaireSupplierListQuestionnaireIdProps = {
  questionnaireId: number;
};

export const getSupplychainQuestionnaireSupplierListQuestionnaireId = (
  {
    questionnaireId,
  }: getSupplychainQuestionnaireSupplierListQuestionnaireIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListQuestionnaireSupplierResp> => {
  let backendApiUrl = `/supplychain/questionnaire/supplierList/${questionnaireId}`;

  return axios.request<通用接口返回对象ListQuestionnaireSupplierResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      questionnaireId: questionnaireId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商-审批记录列表
 * @param {integer}  [applyInfoId]   [required]  申请id
 */

export type getSupplychainAuditSupplierLogListProps = {
  applyInfoId: number;
};

export const getSupplychainAuditSupplierLogList = (
  { applyInfoId }: getSupplychainAuditSupplierLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/supplychain/audit/supplier/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商列表-分页
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [productId]     [required]  采购产品id
 */

export type getSupplychainProductSupplierPageProps = {
  pageNum: number;
  pageSize: number;
  productId: number;
};

export const getSupplychainProductSupplierPage = (
  { pageNum, pageSize, productId }: getSupplychainProductSupplierPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageSupplier> => {
  let backendApiUrl = `/supplychain/product/supplier/page`;

  return axios.request<通用接口返回对象IPageSupplier>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
      productId: productId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface ApplyComputationReq {
  applyType?: '1' | '2';

  deadline?: Date;

  ghgCategories?: string;

  id?: number;

  isoCategories?: string;

  requireDesc?: string;

  standardTypes?: string;

  supplierId?: number;

  year?: number;
}

export interface ApplyComputationResp {
  applyMobile?: string;

  applyRealName?: string;

  applyStatus?: '0' | '1' | '2' | '3' | '4';

  applyTime?: Date;

  applyType?: '1' | '2';

  auditTime?: Date;

  companyId?: number;
  createBy?: number;
  createTime?: Date;

  dataType?: '1' | '2' | '3';

  deadline?: Date;

  ghgCategories?: string;

  id?: number;

  isoCategories?: string;

  orgId?: number;

  requireDesc?: string;

  standardTypeNames?: string;

  standardTypes?: string;

  submitTime?: Date;

  supplierId?: number;

  supplierName?: string;

  total?: number;
  updateBy?: number;
  updateTime?: Date;

  year?: number;
}

export interface ApplyFootprintReq {
  applyType?: '1' | '2';

  deadline?: Date;

  id?: number;

  periodType?: '1' | '2';

  productId?: number;

  requireDesc?: string;

  supplierId?: number;
}

export interface ApplyFootprintResp {
  applyMobile?: string;

  applyRealName?: string;

  applyStatus?: '0' | '1' | '2' | '3' | '4';

  applyTime?: Date;

  applyType?: '1' | '2';

  auditTime?: Date;

  beginDate?: Date;

  companyId?: number;
  createBy?: number;
  createTime?: Date;

  dataType?: '1' | '2' | '3';

  deadline?: Date;

  dischargeRate?: string;

  endTime?: Date;

  id?: number;

  orgId?: number;

  period?: string;

  periodType?: '1' | '2';

  productId?: number;

  productName?: string;

  productUnit?: string;

  requireDesc?: string;

  submitTime?: Date;

  supplierId?: number;

  supplierName?: string;
  updateBy?: number;
  updateTime?: Date;
}

export interface ApplyInfo {
  applyMobile?: string;

  applyRealName?: string;

  applyStatus?: '0' | '1' | '2' | '3' | '4';

  applyTime?: Date;

  applyType?: '1' | '2';

  auditTime?: Date;

  companyId?: number;

  companyName?: string;

  createBy?: number;

  createTime?: Date;

  dataRequire?: string;

  dataType?: '1' | '2' | '3';

  deadline?: Date;

  deleted?: boolean;

  gasData?: string;

  ghgCategories?: string;

  id?: number;

  isoCategories?: string;

  orgId?: number;

  orgName?: string;

  periodType?: '1' | '2';

  productId?: number;

  productName?: string;

  questionnaireId?: number;

  questionnaireName?: string;

  requireDesc?: string;

  standardTypes?: string;

  submitTime?: Date;

  supplierId?: number;

  supplierName?: string;

  updateBy?: number;

  updateTime?: Date;

  uscc?: string;

  year?: number;
}

export interface ApplyInfoIdReq {
  applyInfoId?: number;
}

export interface ApplyInfoResp {
  applyMobile?: string;

  applyRealName?: string;

  applyStatus?: '0' | '1' | '2' | '3' | '4';

  applyTime?: Date;

  applyType?: '1' | '2';

  auditTime?: Date;

  companyId?: number;

  companyName?: string;

  dataType?: '1' | '2' | '3';

  deadline?: Date;

  deleted?: boolean;

  gasData?: string;

  ghgCategories?: string;

  id?: number;

  isoCategories?: string;

  orgId?: number;

  orgName?: string;

  periodType?: '1' | '2';

  productId?: number;

  productModel?: string;

  productName?: string;

  productUnit?: string;

  requireDesc?: string;

  standardTypes?: string;

  submitTime?: Date;

  supplierId?: number;

  supplierName?: string;

  year?: number;
}

export interface AuditDataResp {
  applyInfoId?: number;

  auditStatus?: '0' | '1' | '2' | '3' | '4';

  auditType?: '1' | '3';

  companyId?: number;

  createBy?: number;

  createByName?: string;

  createTime?: Date;

  dataId?: string;

  dataType?: '1' | '2' | '3';

  deleted?: boolean;

  gasData?: string;

  id?: number;

  orgId?: number;

  orgName?: string;

  supplierName?: string;

  targetNames?: string;

  updateBy?: number;

  updateTime?: Date;

  userBtnFlag?: boolean;
}

export interface AuditDto {
  auditComment?: string;

  auditDataId?: number;

  auditStatus?: '0' | '1' | '2' | '3' | '4';
}

export interface AuditLog {
  auditBy?: number;

  auditByMobile?: string;

  auditByName?: string;

  auditComment?: string;

  auditDataId?: number;

  auditStatus?: '0' | '1' | '2' | '3' | '4';

  auditTime?: Date;

  auditType?: '1' | '3';

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataId?: string;

  id?: number;

  orgId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface AuditNode {
  auditDataId?: number;

  auditOrgId?: number;

  auditStatus?: '0' | '1' | '2' | '3' | '4';

  auditType?: '1' | '3';

  companyId?: number;

  configType?: '1' | '2';

  createBy?: number;

  createTime?: Date;

  dataId?: string;

  deleted?: boolean;

  id?: number;

  nodeLevel?: number;

  nodeName?: string;

  orgId?: number;

  passed?: boolean;

  sysAuditId?: number;

  targetIds?: number[];

  targetNames?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface AuditUserDto {
  orgId?: number;

  orgName?: string;

  realName?: string;

  userId?: number;

  username?: string;
}

export interface BooleanResp {
  result?: boolean;
}

export interface ComputationDataSourceDto {
  activityCategory?: '1' | '2' | '3';

  activityDept?: string;

  activityRecordWay?: string;

  carbonEmission?: number;

  computationDataId?: number;

  computationId?: number;

  createBy?: number;

  createTime?: Date;

  dataValue?: number;

  deleted?: boolean;

  emissionSourceId?: number;

  id?: number;

  modelId?: number;

  supportFile?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface ComputationDto {
  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataPeriod?: '1' | '2' | '3';

  dataSourceList?: ComputationDataSourceDto[];

  deleted?: boolean;

  emissionSourceList?: EmissionSourceDto[];

  gasList?: EmissionSourceGasDto[];

  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface ComputationProcess {
  activityCategory?: '1' | '2' | '3';

  activityDept?: string;

  activityRecordWay?: string;

  activityScore?: number;

  activityUnit?: string;

  activityUnitName?: string;

  applyInfoId?: number;

  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataSourceId?: number;

  dataValue?: number;

  deleted?: boolean;

  emissionSourceId?: number;

  facility?: string;

  factorDesc?: string;

  factorId?: number;

  factorScore?: number;

  factorSource?: string;

  factorType?: '1' | '2' | '3' | '4' | '5' | '6';

  gasList?: ComputationProcessGas[];

  ghgCategory?: '1' | '2' | '3';

  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  id?: number;

  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6';

  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  orgId?: number;

  sourceCode?: string;

  sourceName?: string;

  supplierId?: number;

  supportFile?: string;

  unitConver?: string;

  updateBy?: number;

  updateTime?: Date;

  year?: number;
}

export interface ComputationProcessGas {
  applyInfoId?: number;

  computationProcessId?: number;

  createBy?: number;

  createTime?: Date;

  emissionSourceId?: number;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface ComputationResult {
  applyInfoId?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  direct?: number;

  energy?: number;

  id?: number;

  orgId?: number;

  orgName?: string;

  outsourcing?: number;

  report?: string;

  rests?: number;

  scopeOne?: number;

  scopeThree?: number;

  scopeTwo?: number;

  supplierId?: number;

  supplierName?: string;

  supplyChain?: number;

  total?: number;

  transport?: number;

  updateBy?: number;

  updateTime?: Date;

  year?: number;
}

export interface ComputationResultReq {
  applyInfoId?: number;

  direct?: number;

  energy?: number;

  outsourcing?: number;

  rests?: number;

  scopeOne?: number;

  scopeThree?: number;

  scopeTwo?: number;

  supplyChain?: number;

  total?: number;

  transport?: number;
}

export interface EmissionSourceDto {
  activityCategory?: '1' | '2' | '3';

  activityDept?: string;

  activityRecordWay?: string;

  activityScore?: number;

  activityUnit?: string;

  activityUnitName?: string;

  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataSourceId?: number;

  dataValue?: number;

  deleted?: boolean;

  emissionSourceId?: number;

  facility?: string;

  factorDesc?: string;

  factorId?: number;

  factorScore?: number;

  factorSource?: string;

  factorType?: '1' | '2' | '3' | '4' | '5' | '6';

  gasList?: EmissionSourceGasDto[];

  ghgCategory?: '1' | '2' | '3';

  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6';

  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  sourceCode?: string;

  sourceName?: string;

  supportFile?: string;

  unitConver?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface EmissionSourceGasDto {
  createBy?: number;

  createTime?: Date;

  emissionSourceId?: number;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  productName?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface EnumResp {
  code?: number;
  name?: string;
  score?: string;
  subList?: EnumResp[];
}

export interface FootprintBase {
  applyInfoId?: number;

  beginDate?: Date;

  checkCount?: number;

  checkUnit?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  discharge?: string;

  dischargeRate?: string;

  endTime?: Date;

  functionalUnit?: string;

  id?: number;

  operateMsg?: string;

  orgId?: number;

  productId?: number;

  productionBusinessId?: number;

  productionCode?: string;

  productionId?: number;

  productionName?: string;

  status?: number;

  technological?: string;

  type?: number;

  unitCode?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface FootprintBindReq {
  applyInfoId?: number;

  productionBusinessId?: number;
}

export interface FootprintProcess {
  applyInfoId?: number;

  backingMaterial?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  discharge?: string;

  distance?: number;

  factorId?: number;

  factorName?: string;

  factorSource?: string;

  factorType?: number;

  factorUnit?: string;

  factorValue?: string;

  factorYear?: string;

  formula?: string;

  id?: number;

  maMeasure?: string;

  materialName?: string;

  materialsType?: string;

  measureCode?: string;

  modelName?: string;

  orgId?: number;

  percentMeasure?: string;

  processModelId?: number;

  processModelParentId?: number;

  productId?: number;

  productionBusinessId?: number;

  status?: number;

  type?: number;

  unitCode?: string;

  updateBy?: number;

  updateTime?: Date;

  weight?: number;
}

export interface FootprintResult {
  applyInfoId?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  discardStage?: number;

  id?: number;

  materialStage?: number;

  orgId?: number;

  periodType?: '1' | '2';

  produceStage?: number;

  productId?: number;

  productModel?: string;

  productName?: string;

  productUnit?: string;

  productionBusinessId?: number;

  report?: string;

  storageStage?: number;

  total?: number;

  updateBy?: number;

  updateTime?: Date;

  useStage?: number;

  year?: number;
}

export interface FootprintResultReq {
  applyInfoId?: number;

  discardStage?: number;

  materialStage?: number;

  produceStage?: number;

  storageStage?: number;

  total?: number;

  useStage?: number;

  year?: number;
}

export interface IPageApplyInfo {
  list?: ApplyInfo[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageAuditDataResp {
  list?: AuditDataResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageAuditUserDto {
  list?: AuditUserDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageComputationProcess {
  list?: ComputationProcess[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageEmissionSourceDto {
  list?: EmissionSourceDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageFootprintProcess {
  list?: FootprintProcess[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageProductionBusinessDto {
  list?: ProductionBusinessDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageProductionMaterialsDto {
  list?: ProductionMaterialsDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageProduct {
  list?: Product[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageQuestionnaire {
  list?: Questionnaire[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageSupplier {
  list?: Supplier[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IdReq {
  id: number;
}

export interface ImportReq {
  fileName?: string;

  fileUrl?: string;
}

export interface ProcessModel {
  createBy?: number;
  createTime?: Date;

  deleted?: boolean;

  id?: number;

  modelName?: string;

  parentId?: number;

  reportName?: string;

  type?: number;
  updateBy?: number;
  updateTime?: Date;
}

export interface Product {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  lastApplyTime?: Date;

  orgId?: number;

  orgName?: string;

  productDesc?: string;

  productModel?: string;

  productName?: string;

  productUnit?: string;

  unitDischarge?: string;

  unitPrice?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface ProductReq {
  id?: number;

  orgId?: number;

  productDesc?: string;

  productModel?: string;

  productName?: string;

  productUnit?: string;
}

export interface ProductSupplierBindReq {
  productId?: number;

  supplierIdList?: number[];
}

export interface ProductSupplierReq {
  contactEmail?: string;

  contactMobile?: string;

  contactName?: string;

  id?: number;

  productId?: number;

  remark?: string;

  supplierCode?: string;

  supplierName?: string;

  unitDischarge?: string;

  unitPrice?: string;
}

export interface ProductionBusinessDto {
  beginDate?: Date;
  checkCount?: number;
  checkUnit?: string;
  companyId?: number;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  discharge?: string;
  dischargeRate?: string;
  endTime?: Date;
  functionalUnit?: string;
  operateMsg?: string;
  orgId?: number;
  orgName?: string;
  productionBusinessId?: number;
  productionCode?: string;
  productionId?: number;
  productionName?: string;
  status?: number;
  technological?: string;
  type?: number;
  unitCode?: string;
  updateBy?: string;
  updateByName?: string;
  updateTime?: Date;
}

export interface ProductionMaterialsDto {
  backingMaterial?: string;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  discharge?: string;
  distance?: number;
  factorId?: number;
  factorName?: string;
  factorSource?: string;
  factorType?: number;
  factorUnit?: string;
  factorValue?: string;
  factorYear?: string;
  formula?: string;
  id?: number;
  maMeasure?: string;
  materialName?: string;
  materialsType?: string;
  measureCode?: string;
  orgId?: number;
  percentMeasure?: string;
  processModelId?: number;
  processModelParentId?: number;
  productionBusinessId?: number;
  status?: number;
  type?: number;
  unitCode?: string;
  updateBy?: string;
  updateTime?: Date;
  weight?: number;
}

export interface ProductionMaterialsStatisticDto {
  discardStage?: number;

  materialStage?: number;

  produceStage?: number;

  storageStage?: number;

  total?: number;

  useStage?: number;

  year?: number;
}

export interface Questionnaire {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deadline?: Date;

  deleted?: boolean;

  feedbackNum?: number;

  id?: number;

  orgId?: number;

  orgName?: string;

  questionNum?: number;

  questionnaireDesc?: string;

  questionnaireName?: string;

  questionnaireStatus?: '0' | '1' | '2';

  supplierNum?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface QuestionnaireAnswerDto {
  answer?: string;

  answerExt?: string;

  questionId?: number;
}

export interface QuestionnaireAnswerReq {
  answerList?: QuestionnaireAnswerDto[];

  applyInfoId?: number;
}

export interface QuestionnairePublishReq {
  questionnaireId?: number;

  supplierIdList?: number[];
}

export interface QuestionnaireQuestion {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  optionList?: QuestionnaireQuestionOption[];

  orderNum?: number;

  orgId?: number;

  questionType?: '1' | '2' | '3' | '4';

  questionnaireId?: number;

  required?: boolean;

  tips?: string;

  title?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface QuestionnaireQuestionChooserReq {
  questionIdList?: number[];

  questionnaireId?: number;
}

export interface QuestionnaireQuestionOption {
  allowFillBlanks?: boolean;

  blankRequired?: boolean;

  companyId?: number;

  content?: string;

  createBy?: number;

  createTime?: Date;

  description?: string;

  id?: number;

  orgId?: number;

  questionId?: number;

  questionnaireId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface QuestionnaireQuestionOptionDto {
  allowFillBlanks?: boolean;

  blankRequired?: boolean;

  content?: string;

  description?: string;

  optionId?: number;
}

export interface QuestionnaireQuestionOrderReq {
  questionIdList?: number[];

  questionnaireId?: number;
}

export interface QuestionnaireQuestionReq {
  id?: number;

  optionList?: QuestionnaireQuestionOptionDto[];

  questionType?: '1' | '2' | '3' | '4';

  questionnaireId?: number;

  required?: boolean;

  tips?: string;

  title?: string;
}

export interface QuestionnaireQuestionResp {
  answer?: string;

  answerExt?: string;

  companyId?: number;
  createBy?: number;
  createTime?: Date;

  id?: number;

  optionList?: QuestionnaireQuestionOptionDto[];

  orderNum?: number;

  orgId?: number;

  questionType?: '1' | '2' | '3' | '4';

  questionnaireId?: number;

  required?: boolean;

  supplierId?: number;

  tips?: string;

  title?: string;
  updateBy?: number;
  updateTime?: Date;
}

export interface QuestionnaireReq {
  deadline?: Date;

  id?: number;

  orgId?: number;

  questionnaireDesc?: string;

  questionnaireName?: string;
}

export interface QuestionnaireResp {
  companyId?: number;

  deadline?: Date;

  id?: number;

  orgId?: number;

  questionList?: QuestionnaireQuestionResp[];

  questionnaireDesc?: string;

  questionnaireName?: string;

  questionnaireStatus?: '0' | '1' | '2';
}

export interface QuestionnaireSupplierResp {
  companyId?: number;

  feedbackFlag?: boolean;

  id?: number;

  orgId?: number;

  questionnaireId?: number;

  supplierCode?: string;

  supplierId?: number;

  supplierName?: string;

  uscc?: string;
}

export interface ReportReq {
  applyInfoId?: number;

  report?: string;
}

export interface Supplier {
  adminUsername?: string;

  companyCode?: string;

  companyId?: number;

  contactEmail?: string;

  contactMobile?: string;

  contactName?: string;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  lastApplyTime?: Date;

  orgId?: number;

  orgName?: string;

  remark?: string;

  supplierCode?: string;

  supplierName?: string;

  supplierStatus?: '0' | '1' | '2' | '3';

  unitDischarge?: string;

  unitPrice?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  uscc?: string;
}

export interface SupplierAuditLogDto {
  approvalStatus?: '0' | '1' | '2';

  auditBy?: number;

  auditByMobile?: string;

  auditByName?: string;

  auditComment?: string;

  auditTime?: Date;
  createBy?: number;
  createTime?: Date;

  id?: number;
  updateBy?: number;
  updateTime?: Date;
}

export interface SupplierProductBindReq {
  productIdList?: number[];

  supplierId?: number;
}

export interface SupplierProductIdReq {
  productId?: number;

  supplierId?: number;
}

export interface SupplierProductReq {
  id?: number;

  productDesc?: string;

  productModel?: string;

  productName?: string;

  productUnit?: string;

  supplierId?: number;

  unitDischarge?: string;

  unitPrice?: string;
}

export interface SupplierReq {
  contactEmail?: string;

  contactMobile?: string;

  contactName?: string;

  id?: number;

  orgId?: number;

  remark?: string;

  supplierCode?: string;

  supplierName?: string;

  uscc?: string;
}

export interface SupplierStatusReq {
  id?: number;

  supplierStatus?: '0' | '1' | '2' | '3';
}

export interface 通用接口返回对象 {
  code: number;

  data: unknown;

  msg: string;
}

export interface 通用接口返回对象ApplyInfoResp {
  code: number;

  data: ApplyInfoResp;

  msg: string;
}

export interface 通用接口返回对象BooleanResp {
  code: number;

  data: BooleanResp;

  msg: string;
}

export interface 通用接口返回对象ComputationDto {
  code: number;

  data: ComputationDto;

  msg: string;
}

export interface 通用接口返回对象ComputationProcess {
  code: number;

  data: ComputationProcess;

  msg: string;
}

export interface 通用接口返回对象ComputationResult {
  code: number;

  data: ComputationResult;

  msg: string;
}

export interface 通用接口返回对象EmissionSourceDto {
  code: number;

  data: EmissionSourceDto;

  msg: string;
}

export interface 通用接口返回对象FootprintBase {
  code: number;

  data: FootprintBase;

  msg: string;
}

export interface 通用接口返回对象FootprintProcess {
  code: number;

  data: FootprintProcess;

  msg: string;
}

export interface 通用接口返回对象FootprintResult {
  code: number;

  data: FootprintResult;

  msg: string;
}

export interface 通用接口返回对象IPageApplyInfo {
  code: number;

  data: IPageApplyInfo;

  msg: string;
}

export interface 通用接口返回对象IPageAuditDataResp {
  code: number;

  data: IPageAuditDataResp;

  msg: string;
}

export interface 通用接口返回对象IPageAuditUserDto {
  code: number;

  data: IPageAuditUserDto;

  msg: string;
}

export interface 通用接口返回对象IPageComputationProcess {
  code: number;

  data: IPageComputationProcess;

  msg: string;
}

export interface 通用接口返回对象IPageEmissionSourceDto {
  code: number;

  data: IPageEmissionSourceDto;

  msg: string;
}

export interface 通用接口返回对象IPageFootprintProcess {
  code: number;

  data: IPageFootprintProcess;

  msg: string;
}

export interface 通用接口返回对象IPageProductionBusinessDto {
  code: number;

  data: IPageProductionBusinessDto;

  msg: string;
}

export interface 通用接口返回对象IPageProductionMaterialsDto {
  code: number;

  data: IPageProductionMaterialsDto;

  msg: string;
}

export interface 通用接口返回对象IPageProduct {
  code: number;

  data: IPageProduct;

  msg: string;
}

export interface 通用接口返回对象IPageQuestionnaire {
  code: number;

  data: IPageQuestionnaire;

  msg: string;
}

export interface 通用接口返回对象IPageSupplier {
  code: number;

  data: IPageSupplier;

  msg: string;
}

export interface 通用接口返回对象ListApplyComputationResp {
  code: number;

  data: ApplyComputationResp[];

  msg: string;
}

export interface 通用接口返回对象ListApplyFootprintResp {
  code: number;

  data: ApplyFootprintResp[];

  msg: string;
}

export interface 通用接口返回对象ListAuditLog {
  code: number;

  data: AuditLog[];

  msg: string;
}

export interface 通用接口返回对象ListAuditNode {
  code: number;

  data: AuditNode[];

  msg: string;
}

export interface 通用接口返回对象ListEnumResp {
  code: number;

  data: EnumResp[];

  msg: string;
}

export interface 通用接口返回对象ListProcessModel {
  code: number;

  data: ProcessModel[];

  msg: string;
}

export interface 通用接口返回对象ListQuestionnaireQuestionResp {
  code: number;

  data: QuestionnaireQuestionResp[];

  msg: string;
}

export interface 通用接口返回对象ListQuestionnaireQuestion {
  code: number;

  data: QuestionnaireQuestion[];

  msg: string;
}

export interface 通用接口返回对象ListQuestionnaireSupplierResp {
  code: number;

  data: QuestionnaireSupplierResp[];

  msg: string;
}

export interface 通用接口返回对象ListSupplierAuditLogDto {
  code: number;

  data: SupplierAuditLogDto[];

  msg: string;
}

export interface 通用接口返回对象ProductionBusinessDto {
  code: number;

  data: ProductionBusinessDto;

  msg: string;
}

export interface 通用接口返回对象ProductionMaterialsDto {
  code: number;

  data: ProductionMaterialsDto;

  msg: string;
}

export interface 通用接口返回对象ProductionMaterialsStatisticDto {
  code: number;

  data: ProductionMaterialsStatisticDto;

  msg: string;
}

export interface 通用接口返回对象Product {
  code: number;

  data: Product;

  msg: string;
}

export interface 通用接口返回对象QuestionnaireQuestion {
  code: number;

  data: QuestionnaireQuestion;

  msg: string;
}

export interface 通用接口返回对象QuestionnaireResp {
  code: number;

  data: QuestionnaireResp;

  msg: string;
}

export interface 通用接口返回对象Questionnaire {
  code: number;

  data: Questionnaire;

  msg: string;
}

export interface 通用接口返回对象Supplier {
  code: number;

  data: Supplier;

  msg: string;
}
