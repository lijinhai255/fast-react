/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 新增核算
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationAddProps = {
  req: ComputationReq;
};

export const postComputationComputationAdd = (
  { req }: postComputationComputationAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/computation/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增控制计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanAddProps = {
  req: ControlPlanReq;
};

export const postComputationControlPlanAdd = (
  { req }: postComputationControlPlanAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceAddProps = {
  req: EmissionSourceReq;
};

export const postComputationEmissionSourceAdd = (
  { req }: postComputationEmissionSourceAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionSource/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增基准年
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionStandardAddProps = {
  req: EmissionStandardReq;
};

export const postComputationEmissionStandardAdd = (
  { req }: postComputationEmissionStandardAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionStandard/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelAddProps = {
  req: ModelReq;
};

export const postComputationModelAdd = (
  { req }: postComputationModelAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/model/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationDataAddProps = {
  req: OperationDataReq;
};

export const postComputationOperationDataAdd = (
  { req }: postComputationOperationDataAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/data/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增指标
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationMetricsAddProps = {
  req: OperationMetricsReq;
};

export const postComputationOperationMetricsAdd = (
  { req }: postComputationOperationMetricsAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/metrics/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增减排场景
 * @param {any}      [req]           [required]  req
 */

export type postComputationReductionSceneAddProps = {
  req: ReductionSceneReq;
};

export const postComputationReductionSceneAdd = (
  { req }: postComputationReductionSceneAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/reductionScene/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增报告
 * @param {any}      [req]           [required]  req
 */

export type postComputationReportAddProps = {
  req: ReportReq;
};

export const postComputationReportAdd = (
  { req }: postComputationReportAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/report/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 待审核人列表-分页
 * @param {integer}  [id]            [required]  审核数据id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationAuditUserPageProps = {
  id: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationAuditUserPage = (
  { id, pageNum, pageSize }: getComputationAuditUserPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditUserDto> => {
  let backendApiUrl = `/computation/audit/user/page`;

  return axios.request<通用接口返回对象IPageAuditUserDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审核
 * @param {any}      [req]           [required]  req
 */

export type postComputationAuditAuditProps = {
  req: AuditDto;
};

export const postComputationAuditAudit = (
  { req }: postComputationAuditAuditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/audit/audit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 计算并保存排放量
 * @param {any}      [req]           [required]  req
 */

export type postComputationDataCalcAndSaveProps = {
  req: ComputationDataCalcReq;
};

export const postComputationDataCalcAndSave = (
  { req }: postComputationDataCalcAndSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/data/calcAndSave`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 选择产品碳足迹
 * @param {integer}  [applyInfoId]   [required]  applyInfoId
 */

export type getComputationSupplierDataChooseApplyInfoIdProps = {
  applyInfoId: number;
};

export const getComputationSupplierDataChooseApplyInfoId = (
  { applyInfoId }: getComputationSupplierDataChooseApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SupplierGasResp> => {
  let backendApiUrl = `/computation/supplierData/choose/${applyInfoId}`;

  return axios.request<通用接口返回对象SupplierGasResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 基准年碳排放列表
 * @param {integer}  [orgId]         [required]  orgId
 * @param {array}    [yearList]      [required]  yearList
 */

export type getComputationEmissionStandardComputationListProps = {
  orgId: number;
  yearList: number[];
};

export const getComputationEmissionStandardComputationList = (
  { orgId, yearList }: getComputationEmissionStandardComputationListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEmissionStatisticDto> => {
  let backendApiUrl = `/computation/emissionStandard/computation/list`;

  return axios.request<通用接口返回对象ListEmissionStatisticDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      yearList: yearList,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织已创建核算的年度列表
 * @param {integer}  [orgId]         [required]  orgId
 */

export type getComputationReportComputationYearListProps = {
  orgId: number;
};

export const getComputationReportComputationYearList = (
  { orgId }: getComputationReportComputationYearListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Listint> => {
  let backendApiUrl = `/computation/report/computation/year/list`;

  return axios.request<通用接口返回对象Listint>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制控制计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanCopyProps = {
  req: ControlPlanReq;
};

export const postComputationControlPlanCopy = (
  { req }: postComputationControlPlanCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/copy`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceCopyProps = {
  req: EmissionSourceReq;
};

export const postComputationEmissionSourceCopy = (
  { req }: postComputationEmissionSourceCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionSource/copy`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelCopyProps = {
  req: ModelReq;
};

export const postComputationModelCopy = (
  { req }: postComputationModelCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/model/copy`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 当前审批流程列表
 * @param {integer}  [computationDataId] [required]  排放数据id
 */

export type getComputationAuditNodeListCurrProps = {
  computationDataId: number;
};

export const getComputationAuditNodeListCurr = (
  { computationDataId }: getComputationAuditNodeListCurrProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditNode> => {
  let backendApiUrl = `/computation/audit/node/list/curr`;

  return axios.request<通用接口返回对象ListAuditNode>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据管理计划详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationControlPlanDataIdProps = {
  id: number;
};

export const getComputationControlPlanDataId = (
  { id }: getComputationControlPlanDataIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ControlPlanData> => {
  let backendApiUrl = `/computation/controlPlan/data/${id}`;

  return axios.request<通用接口返回对象ControlPlanData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算详情-排放数据列表
 * @param {integer}  [computationId] [required]  核算id
 */

export type getComputationComputationDataListProps = {
  computationId: number;
};

export const getComputationComputationDataList = (
  { computationId }: getComputationComputationDataListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListComputationData> => {
  let backendApiUrl = `/computation/computation/data/list`;

  return axios.request<通用接口返回对象ListComputationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationId: computationId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批记录列表-指定审批
 * @param {integer}  [auditDataId]   [required]  审核数据id
 */

export type getComputationAuditDataLogListProps = {
  auditDataId: number;
};

export const getComputationAuditDataLogList = (
  { auditDataId }: getComputationAuditDataLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/computation/audit/data/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源数据详情
 * @param {integer}  [computationDataId] [required]  排放数据id。(核算详情-排放数据列表)接口返回
 * @param {integer}  [emissionSourceId] [required]  排放源id
 */

export type getComputationDataSourceDetailProps = {
  computationDataId: number;
  emissionSourceId: number;
};

export const getComputationDataSourceDetail = (
  { computationDataId, emissionSourceId }: getComputationDataSourceDetailProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionSource> => {
  let backendApiUrl = `/computation/data/source/detail`;

  return axios.request<通用接口返回对象EmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
      emissionSourceId: emissionSourceId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑排放源数据
 * @param {any}      [req]           [required]  req
 */

export type postComputationDataSourceEditProps = {
  req: DataSourceReq;
};

export const postComputationDataSourceEdit = (
  { req }: postComputationDataSourceEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/data/source/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {integer}  [computationDataId] [required]  排放数据id。(核算详情-排放数据列表)接口返回
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationDataSourceListProps = {
  computationDataId: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationDataSourceList = (
  { computationDataId, pageNum, pageSize }: getComputationDataSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageEmissionSource> => {
  let backendApiUrl = `/computation/data/source/list`;

  return axios.request<通用接口返回对象IPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除核算
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationDeleteProps = {
  req: IdReq;
};

export const postComputationComputationDelete = (
  { req }: postComputationComputationDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/computation/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除控制计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanDeleteProps = {
  req: IdReq;
};

export const postComputationControlPlanDelete = (
  { req }: postComputationControlPlanDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceDeleteProps = {
  req: IdReq;
};

export const postComputationEmissionSourceDelete = (
  { req }: postComputationEmissionSourceDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionSource/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除基准年
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionStandardDeleteProps = {
  req: IdReq;
};

export const postComputationEmissionStandardDelete = (
  { req }: postComputationEmissionStandardDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionStandard/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelDeleteProps = {
  req: IdReq;
};

export const postComputationModelDelete = (
  { req }: postComputationModelDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/model/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationDataDeleteProps = {
  req: IdReq;
};

export const postComputationOperationDataDelete = (
  { req }: postComputationOperationDataDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/data/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除指标
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationMetricsDeleteProps = {
  req: IdReq;
};

export const postComputationOperationMetricsDelete = (
  { req }: postComputationOperationMetricsDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/metrics/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除减排场景
 * @param {any}      [req]           [required]  req
 */

export type postComputationReductionSceneDeleteProps = {
  req: IdReq;
};

export const postComputationReductionSceneDelete = (
  { req }: postComputationReductionSceneDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/reductionScene/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除报告
 * @param {any}      [req]           [required]  req
 */

export type postComputationReportDeleteProps = {
  req: IdReq;
};

export const postComputationReportDelete = (
  { req }: postComputationReportDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/report/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationComputationIdProps = {
  id: number;
};

export const getComputationComputationId = (
  { id }: getComputationComputationIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Computation> => {
  let backendApiUrl = `/computation/computation/${id}`;

  return axios.request<通用接口返回对象Computation>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放数据详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationDataIdProps = {
  id: number;
};

export const getComputationDataId = (
  { id }: getComputationDataIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ComputationData> => {
  let backendApiUrl = `/computation/data/${id}`;

  return axios.request<通用接口返回对象ComputationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 控制计划详情
 * @param {integer}  [id]            [required]  控制计划id
 */

export type getComputationControlPlanIdProps = {
  id: number;
};

export const getComputationControlPlanId = (
  { id }: getComputationControlPlanIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ControlPlanResp> => {
  let backendApiUrl = `/computation/controlPlan/${id}`;

  return axios.request<通用接口返回对象ControlPlanResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationEmissionSourceIdProps = {
  id: number;
};

export const getComputationEmissionSourceId = (
  { id }: getComputationEmissionSourceIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionSource> => {
  let backendApiUrl = `/computation/emissionSource/${id}`;

  return axios.request<通用接口返回对象EmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 基准年详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationEmissionStandardIdProps = {
  id: number;
};

export const getComputationEmissionStandardId = (
  { id }: getComputationEmissionStandardIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionStandard> => {
  let backendApiUrl = `/computation/emissionStandard/${id}`;

  return axios.request<通用接口返回对象EmissionStandard>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算模型详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationModelIdProps = {
  id: number;
};

export const getComputationModelId = (
  { id }: getComputationModelIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Model> => {
  let backendApiUrl = `/computation/model/${id}`;

  return axios.request<通用接口返回对象Model>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationOperationDataIdProps = {
  id: number;
};

export const getComputationOperationDataId = (
  { id }: getComputationOperationDataIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象OperationData> => {
  let backendApiUrl = `/computation/operation/data/${id}`;

  return axios.request<通用接口返回对象OperationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationOperationMetricsIdProps = {
  id: number;
};

export const getComputationOperationMetricsId = (
  { id }: getComputationOperationMetricsIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象OperationMetrics> => {
  let backendApiUrl = `/computation/operation/metrics/${id}`;

  return axios.request<通用接口返回对象OperationMetrics>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 减排场景详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationReductionSceneIdProps = {
  id: number;
};

export const getComputationReductionSceneId = (
  { id }: getComputationReductionSceneIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ReductionScene> => {
  let backendApiUrl = `/computation/reductionScene/${id}`;

  return axios.request<通用接口返回对象ReductionScene>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 报告详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationReportIdProps = {
  id: number;
};

export const getComputationReportId = (
  { id }: getComputationReportIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Report> => {
  let backendApiUrl = `/computation/report/${id}`;

  return axios.request<通用接口返回对象Report>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导出排放分类占比
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {any}      [standardType]  [required]  标准类型:1 GHG; 2 ISO;
 * @param {integer}  [year]             年份，默认为今年
 */

export type postComputationDataDashboardDownloadEmissionProportionProps = {
  includeChild: boolean;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  standardType: 1 | 2;
  year?: number | null | undefined;
};

export const postComputationDataDashboardDownloadEmissionProportion = (
  {
    includeChild,
    orgId,
    standardAllType,
    standardType,
    year,
  }: postComputationDataDashboardDownloadEmissionProportionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/dataDashboard/downloadEmissionProportion`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
      standardAllType: standardAllType,
      standardType: standardType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导出排放源清单
 * @param {any}      [categoryOrEmissionType] [required]  分类类型:1 按分类; 2 按排放量;
 * @param {any}      [includeChild]  [required]  是否包含子组织
 * @param {any}      [orgId]         [required]  组织id
 * @param {any}      [standardType]  [required]  标准类型:1 GHG; 2 ISO;
 * @param {any}      [year]          [required]  年份
 */

export type postComputationDataDashboardDownloadEmissionSourceListProps = {
  categoryOrEmissionType: 1 | 2;
  includeChild: boolean;
  orgId: number;
  standardType: 1 | 2;
  year: number;
};

export const postComputationDataDashboardDownloadEmissionSourceList = (
  {
    categoryOrEmissionType,
    includeChild,
    orgId,
    standardType,
    year,
  }: postComputationDataDashboardDownloadEmissionSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/dataDashboard/downloadEmissionSourceList`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    params: serializeQueryParam({
      categoryOrEmissionType: categoryOrEmissionType,
      includeChild: includeChild,
      orgId: orgId,
      standardType: standardType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放量趋势分析-导出排放量清单
 * @param {integer}  [endYear]          结束年份
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [startYear]        开始年份
 * @param {integer}  [year]             年份，默认为今年
 */

export type postComputationDataDashboardDownloadEmissionTrendProps = {
  endYear?: number | null | undefined;
  includeChild: boolean;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  startYear?: number | null | undefined;
  year?: number | null | undefined;
};

export const postComputationDataDashboardDownloadEmissionTrend = (
  {
    endYear,
    includeChild,
    orgId,
    standardAllType,
    startYear,
    year,
  }: postComputationDataDashboardDownloadEmissionTrendProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/dataDashboard/downloadEmissionTrend`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    params: serializeQueryParam({
      endYear: endYear,
      includeChild: includeChild,
      orgId: orgId,
      standardAllType: standardAllType,
      startYear: startYear,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导出排放强度趋势分析
 * @param {integer}  [endYear]          结束年份
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {any}      [metricId]      [required]  排放强度指标id
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [startYear]        开始年份
 * @param {integer}  [year]             年份，默认为今年
 */

export type postComputationDataDashboardDownloadIntensityTrendProps = {
  endYear?: number | null | undefined;
  includeChild: boolean;
  metricId: number;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  startYear?: number | null | undefined;
  year?: number | null | undefined;
};

export const postComputationDataDashboardDownloadIntensityTrend = (
  {
    endYear,
    includeChild,
    metricId,
    orgId,
    standardAllType,
    startYear,
    year,
  }: postComputationDataDashboardDownloadIntensityTrendProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/dataDashboard/downloadIntensityTrend`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    params: serializeQueryParam({
      endYear: endYear,
      includeChild: includeChild,
      metricId: metricId,
      orgId: orgId,
      standardAllType: standardAllType,
      startYear: startYear,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导出组织排放量清单
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [year]             年份，默认为今年
 */

export type postComputationDataDashboardDownloadorgEmissionAnalysisProps = {
  includeChild: boolean;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  year?: number | null | undefined;
};

export const postComputationDataDashboardDownloadorgEmissionAnalysis = (
  {
    includeChild,
    orgId,
    standardAllType,
    year,
  }: postComputationDataDashboardDownloadorgEmissionAnalysisProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/dataDashboard/downloadorgEmissionAnalysis`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
      standardAllType: standardAllType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-组织边界&amp;数据质量管理规定
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditBorderProps = {
  req: ControlPlanEditReq;
};

export const postComputationControlPlanEditBorder = (
  { req }: postComputationControlPlanEditBorderProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/edit/border`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-组织基本信息
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditOrgProps = {
  req: ControlPlanOrgReq;
};

export const postComputationControlPlanEditOrg = (
  { req }: postComputationControlPlanEditOrgProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/edit/org`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-数据管理计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditPlanProps = {
  req: ControlPlanDataReq;
};

export const postComputationControlPlanEditPlan = (
  { req }: postComputationControlPlanEditPlanProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/edit/plan`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑核算
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationEditProps = {
  req: ComputationReq;
};

export const postComputationComputationEdit = (
  { req }: postComputationComputationEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/computation/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceEditProps = {
  req: EmissionSourceReq;
};

export const postComputationEmissionSourceEdit = (
  { req }: postComputationEmissionSourceEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionSource/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑基准年
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionStandardEditProps = {
  req: EmissionStandardReq;
};

export const postComputationEmissionStandardEdit = (
  { req }: postComputationEmissionStandardEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/emissionStandard/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelEditProps = {
  req: ModelReq;
};

export const postComputationModelEdit = (
  { req }: postComputationModelEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/model/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationDataEditProps = {
  req: OperationDataReq;
};

export const postComputationOperationDataEdit = (
  { req }: postComputationOperationDataEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/data/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑指标
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationMetricsEditProps = {
  req: OperationMetricsReq;
};

export const postComputationOperationMetricsEdit = (
  { req }: postComputationOperationMetricsEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/metrics/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑减排场景
 * @param {any}      [req]           [required]  req
 */

export type postComputationReductionSceneEditProps = {
  req: ReductionSceneReq;
};

export const postComputationReductionSceneEdit = (
  { req }: postComputationReductionSceneEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/reductionScene/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑报告
 * @param {any}      [req]           [required]  req
 */

export type postComputationReportEditProps = {
  req: ReportReq;
};

export const postComputationReportEdit = (
  { req }: postComputationReportEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/report/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-版本及修订
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditVersionProps = {
  req: ControlPlanReq;
};

export const postComputationControlPlanEditVersion = (
  { req }: postComputationControlPlanEditVersionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/edit/version`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放分类占比
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [standardType]  [required]  标准类型:1 GHG; 2 ISO;
 * @param {integer}  [year]             年份，默认为今年
 */

export type getComputationDataDashboardEmissionProportionProps = {
  includeChild: boolean;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  standardType: 1 | 2;
  year?: number | null | undefined;
};

export const getComputationDataDashboardEmissionProportion = (
  {
    includeChild,
    orgId,
    standardAllType,
    standardType,
    year,
  }: getComputationDataDashboardEmissionProportionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionProportionResp> => {
  let backendApiUrl = `/computation/dataDashboard/emissionProportion`;

  return axios.request<通用接口返回对象EmissionProportionResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
      standardAllType: standardAllType,
      standardType: standardType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationEmissionSourceAddProps = {
  req: EmissionSourceBindReq;
};

export const postComputationComputationEmissionSourceAdd = (
  { req }: postComputationComputationEmissionSourceAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/computation/emissionSource/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelEmissionSourceAddProps = {
  req: EmissionSourceBindReq;
};

export const postComputationModelEmissionSourceAdd = (
  { req }: postComputationModelEmissionSourceAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/model/emissionSource/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationEmissionSourceDeleteProps = {
  req: EmissionSourceBindReq;
};

export const postComputationComputationEmissionSourceDelete = (
  { req }: postComputationComputationEmissionSourceDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/computation/emissionSource/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelEmissionSourceDeleteProps = {
  req: EmissionSourceBindReq;
};

export const postComputationModelEmissionSourceDelete = (
  { req }: postComputationModelEmissionSourceDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/model/emissionSource/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {integer}  [computationId] [required]  核算id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationComputationEmissionSourceListProps = {
  computationId: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationComputationEmissionSourceList = (
  {
    computationId,
    pageNum,
    pageSize,
  }: getComputationComputationEmissionSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageEmissionSource> => {
  let backendApiUrl = `/computation/computation/emissionSource/list`;

  return axios.request<通用接口返回对象IPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationId: computationId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源清单
 * @param {integer}  [categoryOrEmissionType] [required]  分类类型:1 按分类; 2 按排放量;
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  组织id
 * @param {integer}  [standardType]  [required]  标准类型:1 GHG; 2 ISO;
 * @param {integer}  [year]          [required]  年份
 */

export type getComputationDataDashboardEmissionSourceListProps = {
  categoryOrEmissionType: 1 | 2;
  includeChild: boolean;
  orgId: number;
  standardType: 1 | 2;
  year: number;
};

export const getComputationDataDashboardEmissionSourceList = (
  {
    categoryOrEmissionType,
    includeChild,
    orgId,
    standardType,
    year,
  }: getComputationDataDashboardEmissionSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEmissionSourceResp> => {
  let backendApiUrl = `/computation/dataDashboard/emissionSourceList`;

  return axios.request<通用接口返回对象ListEmissionSourceResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      categoryOrEmissionType: categoryOrEmissionType,
      includeChild: includeChild,
      orgId: orgId,
      standardType: standardType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {integer}  [modelId]       [required]  核算模型id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationModelEmissionSourceListProps = {
  modelId: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationModelEmissionSourceList = (
  { modelId, pageNum, pageSize }: getComputationModelEmissionSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageEmissionSource> => {
  let backendApiUrl = `/computation/model/emissionSource/list`;

  return axios.request<通用接口返回对象IPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      modelId: modelId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放量趋势分析
 * @param {integer}  [endYear]          结束年份
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [startYear]        开始年份
 * @param {integer}  [year]             年份，默认为今年
 */

export type getComputationDataDashboardEmissionTrendAnalysisProps = {
  endYear?: number | null | undefined;
  includeChild: boolean;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  startYear?: number | null | undefined;
  year?: number | null | undefined;
};

export const getComputationDataDashboardEmissionTrendAnalysis = (
  {
    endYear,
    includeChild,
    orgId,
    standardAllType,
    startYear,
    year,
  }: getComputationDataDashboardEmissionTrendAnalysisProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionTrendResp> => {
  let backendApiUrl = `/computation/dataDashboard/emissionTrendAnalysis`;

  return axios.request<通用接口返回对象EmissionTrendResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      endYear: endYear,
      includeChild: includeChild,
      orgId: orgId,
      standardAllType: standardAllType,
      startYear: startYear,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询枚举值（忽略大小写）
 * @param {string}   [enumName]      [required]  枚举名
 */

export type getComputationEnumsEnumNameProps = {
  enumName: string;
};

export const getComputationEnumsEnumName = (
  { enumName }: getComputationEnumsEnumNameProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEnumResp> => {
  let backendApiUrl = `/computation/enums/${enumName}`;

  return axios.request<通用接口返回对象ListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      enumName: enumName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算列表-导出
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [year]             核算年度
 */

export type getComputationComputationExportProps = {
  orgId?: number | null | undefined;
  year?: number | null | undefined;
};

export const getComputationComputationExport = (
  { orgId, year }: getComputationComputationExportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Export> => {
  let backendApiUrl = `/computation/computation/export`;

  return axios.request<通用接口返回对象Export>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 产品碳足迹结果详情
 * @param {integer}  [applyInfoId]   [required]  applyInfoId
 */

export type getComputationSupplierDataFootprintApplyInfoIdProps = {
  applyInfoId: number;
};

export const getComputationSupplierDataFootprintApplyInfoId = (
  { applyInfoId }: getComputationSupplierDataFootprintApplyInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象FootprintResult> => {
  let backendApiUrl = `/computation/supplierData/footprint/${applyInfoId}`;

  return axios.request<通用接口返回对象FootprintResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      applyInfoId: applyInfoId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 生成报告
 * @param {any}      [req]           [required]  req
 */

export type postComputationReportGenerateProps = {
  req: ReportGenerateReq;
};

export const postComputationReportGenerate = (
  { req }: postComputationReportGenerateProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/report/generate`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description GHG-&gt;ISO映射
 * @param {integer}  [ghgCategory]   [required]  GHG分类。1 范围一；2 范围二；3 范围三
 * @param {integer}  [ghgClassify]      GHG类别
 */

export type getComputationEnumsRelGhg2isoProps = {
  ghgCategory: 1 | 2 | 3;
  ghgClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | null
    | undefined;
};

export const getComputationEnumsRelGhg2iso = (
  { ghgCategory, ghgClassify }: getComputationEnumsRelGhg2isoProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ClassifyResp> => {
  let backendApiUrl = `/computation/enums/rel/ghg2iso`;

  return axios.request<通用接口返回对象ClassifyResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ghgCategory: ghgCategory,
      ghgClassify: ghgClassify,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description GHG类别列表
 * @param {integer}  [ghgCategory]   [required]  GHG分类。1 范围一；2 范围二；3 范围三
 */

export type getComputationEnumsGhgClassifyProps = {
  ghgCategory: 1 | 2 | 3;
};

export const getComputationEnumsGhgClassify = (
  { ghgCategory }: getComputationEnumsGhgClassifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEnumResp> => {
  let backendApiUrl = `/computation/enums/ghgClassify`;

  return axios.request<通用接口返回对象ListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ghgCategory: ghgCategory,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description innerDetail
 * @param {integer}  [id]            [required]  id
 */

export type getComputationEmissionSourceInnerIdProps = {
  id: number;
};

export const getComputationEmissionSourceInnerId = (
  { id }: getComputationEmissionSourceInnerIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionSourceDto> => {
  let backendApiUrl = `/computation/emissionSource/inner/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象EmissionSourceDto>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放强度趋势分析
 * @param {integer}  [endYear]          结束年份
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [metricId]      [required]  排放强度指标id
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [startYear]        开始年份
 * @param {integer}  [year]             年份，默认为今年
 */

export type getComputationDataDashboardIntensityTrendProps = {
  endYear?: number | null | undefined;
  includeChild: boolean;
  metricId: number;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  startYear?: number | null | undefined;
  year?: number | null | undefined;
};

export const getComputationDataDashboardIntensityTrend = (
  {
    endYear,
    includeChild,
    metricId,
    orgId,
    standardAllType,
    startYear,
    year,
  }: getComputationDataDashboardIntensityTrendProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IntensityTrendResp> => {
  let backendApiUrl = `/computation/dataDashboard/intensityTrend`;

  return axios.request<通用接口返回对象IntensityTrendResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      endYear: endYear,
      includeChild: includeChild,
      metricId: metricId,
      orgId: orgId,
      standardAllType: standardAllType,
      startYear: startYear,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description ISO-&gt;GHG映射
 * @param {integer}  [isoCategory]   [required]  ISO分类。1 直接排放或清除；2 能源间接排放；3 运输间接排放；4 外购产品或服务间接排放；5 供应链下游排放；6 其他间接排放
 * @param {integer}  [isoClassify]      ISO类别
 */

export type getComputationEnumsRelIso2ghgProps = {
  isoCategory: 1 | 2 | 3 | 4 | 5 | 6;
  isoClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | null
    | undefined;
};

export const getComputationEnumsRelIso2ghg = (
  { isoCategory, isoClassify }: getComputationEnumsRelIso2ghgProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ClassifyResp> => {
  let backendApiUrl = `/computation/enums/rel/iso2ghg`;

  return axios.request<通用接口返回对象ClassifyResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      isoCategory: isoCategory,
      isoClassify: isoClassify,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description ISO类别列表
 * @param {integer}  [isoCategory]   [required]  ISO分类。1 直接排放或清除；2 能源间接排放；3 运输间接排放；4 外购产品或服务间接排放；5 供应链下游排放；6 其他间接排放
 */

export type getComputationEnumsIsoClassifyProps = {
  isoCategory: 1 | 2 | 3 | 4 | 5 | 6;
};

export const getComputationEnumsIsoClassify = (
  { isoCategory }: getComputationEnumsIsoClassifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEnumResp> => {
  let backendApiUrl = `/computation/enums/isoClassify`;

  return axios.request<通用接口返回对象ListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      isoCategory: isoCategory,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批记录列表-关联数据的全量记录
 * @param {integer}  [computationDataId] [required]  排放数据id
 */

export type getComputationAuditLogListProps = {
  computationDataId: number;
};

export const getComputationAuditLogList = (
  { computationDataId }: getComputationAuditLogListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditLog> => {
  let backendApiUrl = `/computation/audit/log/list`;

  return axios.request<通用接口返回对象ListAuditLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放强度趋势分析-排放强度指标下拉框
 * @param {boolean}  [includeChild]  [required]  是否包含下级组织
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getComputationDataDashboardMetricListProps = {
  includeChild: boolean;
  orgId: number;
};

export const getComputationDataDashboardMetricList = (
  { includeChild, orgId }: getComputationDataDashboardMetricListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListOperationMetrics> => {
  let backendApiUrl = `/computation/dataDashboard/metricList`;

  return axios.request<通用接口返回对象ListOperationMetrics>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批流程列表
 * @param {integer}  [auditDataId]   [required]  审核数据id
 */

export type getComputationAuditNodeListProps = {
  auditDataId: number;
};

export const getComputationAuditNodeList = (
  { auditDataId }: getComputationAuditNodeListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAuditNode> => {
  let backendApiUrl = `/computation/audit/node/list`;

  return axios.request<通用接口返回对象ListAuditNode>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditDataId: auditDataId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 可选指标项
 * @param {array}    [metricsIds]       已选指标id列表
 */

export type getComputationOperationMetricsOptionsProps = {
  metricsIds?: number[] | null | undefined;
};

export const getComputationOperationMetricsOptions = (
  { metricsIds }: getComputationOperationMetricsOptionsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListOperationMetrics> => {
  let backendApiUrl = `/computation/operation/metrics/options`;

  return axios.request<通用接口返回对象ListOperationMetrics>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      metricsIds: metricsIds,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询是否有审批配置
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getComputationAuditOrgIdProps = {
  orgId: number;
};

export const getComputationAuditOrgId = (
  { orgId }: getComputationAuditOrgIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/audit/${orgId}`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织排放分析
 * @param {integer}  [year]          [required]  年份
 */

export type getComputationDataDashboardOrgEmissionAnalysisProps = {
  year: number;
};

export const getComputationDataDashboardOrgEmissionAnalysis = (
  { year }: getComputationDataDashboardOrgEmissionAnalysisProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象OrgBarChartResp> => {
  let backendApiUrl = `/computation/dataDashboard/orgEmissionAnalysis`;

  return axios.request<通用接口返回对象OrgBarChartResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织排放量列表
 * @param {integer}  [id]            [required]  id
 */

export type getComputationComputationOrgEmissionListIdProps = {
  id: number;
};

export const getComputationComputationOrgEmissionListId = (
  { id }: getComputationComputationOrgEmissionListIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEmissionStatisticDto> => {
  let backendApiUrl = `/computation/computation/org/emissionList/${id}`;

  return axios.request<通用接口返回对象ListEmissionStatisticDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织范围
 * @param {integer}  [computationId]    核算id
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getComputationComputationOrgListProps = {
  computationId?: number | null | undefined;
  orgId: number;
};

export const getComputationComputationOrgList = (
  { computationId, orgId }: getComputationComputationOrgListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象org树> => {
  let backendApiUrl = `/computation/computation/org/list`;

  return axios.request<通用接口返回对象org树>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationId: computationId,
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据审核列表-分页
 * @param {integer}  [auditStatus]      审核状态。0 待审核；1 审核通过；2 审核不通过；3 已撤回；4 已作废
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationAuditPageProps = {
  auditStatus?: 0 | 1 | 2 | 3 | 4 | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationAuditPage = (
  { auditStatus, pageNum, pageSize }: getComputationAuditPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditData> => {
  let backendApiUrl = `/computation/audit/page`;

  return axios.request<通用接口返回对象IPageAuditData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditStatus: auditStatus,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算列表-分页
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [year]             核算年度
 */

export type getComputationComputationPageProps = {
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  year?: number | null | undefined;
};

export const getComputationComputationPage = (
  { orgId, pageNum, pageSize, year }: getComputationComputationPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageComputation> => {
  let backendApiUrl = `/computation/computation/page`;

  return axios.request<通用接口返回对象IPageComputation>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 报告列表-分页
 * @param {string}   [likeReportName]    报告名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [year]             核算年度
 */

export type getComputationReportPageProps = {
  likeReportName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  year?: number | null | undefined;
};

export const getComputationReportPage = (
  {
    likeReportName,
    orgId,
    pageNum,
    pageSize,
    year,
  }: getComputationReportPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageReport> => {
  let backendApiUrl = `/computation/report/page`;

  return axios.request<通用接口返回对象IPageReport>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeReportName: likeReportName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 供应商数据列表-分页
 * @param {string}   [likeProductName]    likeProductName
 * @param {string}   [likeSupplierName]    likeSupplierName
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationSupplierDataPageProps = {
  likeProductName?: string | null | undefined;
  likeSupplierName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationSupplierDataPage = (
  {
    likeProductName,
    likeSupplierName,
    pageNum,
    pageSize,
  }: getComputationSupplierDataPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageProductDto> => {
  let backendApiUrl = `/computation/supplierData/page`;

  return axios.request<通用接口返回对象IPageProductDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeProductName: likeProductName,
      likeSupplierName: likeSupplierName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放数据列表-分页
 * @param {integer}  [dataStatus]       排放数据状态。0 待填报；1 未填报；2 已填报；3 已撤回；4 审核未通过；5 审核通过；6 审核不通过
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [year]             核算年度
 */

export type getComputationDataPageProps = {
  dataStatus?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  year?: number | null | undefined;
};

export const getComputationDataPage = (
  { dataStatus, orgId, pageNum, pageSize, year }: getComputationDataPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageComputationData> => {
  let backendApiUrl = `/computation/data/page`;

  return axios.request<通用接口返回对象IPageComputationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dataStatus: dataStatus,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 控制计划列表-分页
 * @param {string}   [likeVersion]      版本号
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationControlPlanPageProps = {
  likeVersion?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationControlPlanPage = (
  { likeVersion, orgId, pageNum, pageSize }: getComputationControlPlanPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageControlPlan> => {
  let backendApiUrl = `/computation/controlPlan/page`;

  return axios.request<通用接口返回对象IPageControlPlan>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeVersion: likeVersion,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {string}   [ghg]              GHG分类及类别
 * @param {string}   [iso]              iso分类及类别
 * @param {string}   [likeFacility]     排放设施
 * @param {string}   [likeSourceName]    排放源名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [sourceCode]       排放源ID
 */

export type getComputationEmissionSourcePageProps = {
  ghg?: string | null | undefined;
  iso?: string | null | undefined;
  likeFacility?: string | null | undefined;
  likeSourceName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
  sourceCode?: string | null | undefined;
};

export const getComputationEmissionSourcePage = (
  {
    ghg,
    iso,
    likeFacility,
    likeSourceName,
    pageNum,
    pageSize,
    sourceCode,
  }: getComputationEmissionSourcePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageEmissionSource> => {
  let backendApiUrl = `/computation/emissionSource/page`;

  return axios.request<通用接口返回对象IPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ghg: ghg,
      iso: iso,
      likeFacility: likeFacility,
      likeSourceName: likeSourceName,
      pageNum: pageNum,
      pageSize: pageSize,
      sourceCode: sourceCode,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 基准年列表-分页
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationEmissionStandardPageProps = {
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationEmissionStandardPage = (
  { orgId, pageNum, pageSize }: getComputationEmissionStandardPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageEmissionStandard> => {
  let backendApiUrl = `/computation/emissionStandard/page`;

  return axios.request<通用接口返回对象IPageEmissionStandard>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算模型列表-分页
 * @param {string}   [likeModelName]    模型名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationModelPageProps = {
  likeModelName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationModelPage = (
  { likeModelName, orgId, pageNum, pageSize }: getComputationModelPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageModel> => {
  let backendApiUrl = `/computation/model/page`;

  return axios.request<通用接口返回对象IPageModel>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeModelName: likeModelName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据列表-分页
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [year]             年份
 */

export type getComputationOperationDataPageProps = {
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  year?: number | null | undefined;
};

export const getComputationOperationDataPage = (
  { orgId, pageNum, pageSize, year }: getComputationOperationDataPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageOperationData> => {
  let backendApiUrl = `/computation/operation/data/page`;

  return axios.request<通用接口返回对象IPageOperationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 指标列表-分页
 * @param {string}   [likeMetricsName]    指标名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationOperationMetricsPageProps = {
  likeMetricsName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationOperationMetricsPage = (
  {
    likeMetricsName,
    pageNum,
    pageSize,
  }: getComputationOperationMetricsPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageOperationMetrics> => {
  let backendApiUrl = `/computation/operation/metrics/page`;

  return axios.request<通用接口返回对象IPageOperationMetrics>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeMetricsName: likeMetricsName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 减排场景列表-分页
 * @param {string}   [likeSceneName]    减排场景名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {array}    [reductionSceneIds]    id列表
 */

export type getComputationReductionScenePageProps = {
  likeSceneName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  reductionSceneIds?: number[] | null | undefined;
};

export const getComputationReductionScenePage = (
  {
    likeSceneName,
    orgId,
    pageNum,
    pageSize,
    reductionSceneIds,
  }: getComputationReductionScenePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageReductionScene> => {
  let backendApiUrl = `/computation/reductionScene/page`;

  return axios.request<通用接口返回对象IPageReductionScene>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeSceneName: likeSceneName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      reductionSceneIds: reductionSceneIds,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 温室气体产生路径图
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  所属组织id
 * @param {string}   [standardAllType]    标准类型
 * @param {integer}  [year]             年份，默认为今年
 */

export type getComputationDataDashboardPathwayProps = {
  includeChild: boolean;
  orgId: number;
  standardAllType?: '0' | '1' | '2' | null | undefined;
  year?: number | null | undefined;
};

export const getComputationDataDashboardPathway = (
  {
    includeChild,
    orgId,
    standardAllType,
    year,
  }: getComputationDataDashboardPathwayProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象PathwayResp> => {
  let backendApiUrl = `/computation/dataDashboard/pathway`;

  return axios.request<通用接口返回对象PathwayResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
      standardAllType: standardAllType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanProductAddProps = {
  req: ControlPlanProductReq;
};

export const postComputationControlPlanProductAdd = (
  { req }: postComputationControlPlanProductAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/product/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanProductDeleteProps = {
  req: IdReq;
};

export const postComputationControlPlanProductDelete = (
  { req }: postComputationControlPlanProductDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/product/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationControlPlanProductIdProps = {
  id: number;
};

export const getComputationControlPlanProductId = (
  { id }: getComputationControlPlanProductIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ControlPlanProduct> => {
  let backendApiUrl = `/computation/controlPlan/product/${id}`;

  return axios.request<通用接口返回对象ControlPlanProduct>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-编辑
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanProductEditProps = {
  req: ControlPlanProductReq;
};

export const postComputationControlPlanProductEdit = (
  { req }: postComputationControlPlanProductEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/controlPlan/product/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-列表
 * @param {integer}  [controlPlanId] [required]  控制计划id
 */

export type getComputationControlPlanProductListControlPlanIdProps = {
  controlPlanId: number;
};

export const getComputationControlPlanProductListControlPlanId = (
  { controlPlanId }: getComputationControlPlanProductListControlPlanIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListControlPlanProduct> => {
  let backendApiUrl = `/computation/controlPlan/product/list/${controlPlanId}`;

  return axios.request<通用接口返回对象ListControlPlanProduct>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      controlPlanId: controlPlanId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 撤回审批
 * @param {any}      [req]           [required]  req
 */

export type postComputationDataRollbackProps = {
  req: IdReq;
};

export const postComputationDataRollback = (
  { req }: postComputationDataRollbackProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/data/rollback`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 启用禁用指标
 * @param {any}      [req]           [required]  req
 */

export type postComputationOperationMetricsStatusProps = {
  req: EnableStatusReq;
};

export const postComputationOperationMetricsStatus = (
  { req }: postComputationOperationMetricsStatusProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/operation/metrics/status`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 提交审批
 * @param {any}      [req]           [required]  req
 */

export type postComputationDataSubmitProps = {
  req: IdReq;
};

export const postComputationDataSubmit = (
  { req }: postComputationDataSubmitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/data/submit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description TOP排放源分类-TOP排放分类
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  组织id
 * @param {integer}  [standardType]  [required]  标准类型:1 GHG; 2 ISO;
 * @param {integer}  [year]          [required]  年份
 */

export type getComputationDataDashboardTopEmissionClassifyProps = {
  includeChild: boolean;
  orgId: number;
  standardType: 1 | 2;
  year: number;
};

export const getComputationDataDashboardTopEmissionClassify = (
  {
    includeChild,
    orgId,
    standardType,
    year,
  }: getComputationDataDashboardTopEmissionClassifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SimpleBarChartResp> => {
  let backendApiUrl = `/computation/dataDashboard/topEmissionClassify`;

  return axios.request<通用接口返回对象SimpleBarChartResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
      standardType: standardType,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description TOP排放源分类-TOP排放源
 * @param {boolean}  [includeChild]  [required]  是否包含子组织
 * @param {integer}  [orgId]         [required]  组织id
 * @param {integer}  [year]          [required]  年份
 */

export type getComputationDataDashboardTopEmissionSourceProps = {
  includeChild: boolean;
  orgId: number;
  year: number;
};

export const getComputationDataDashboardTopEmissionSource = (
  {
    includeChild,
    orgId,
    year,
  }: getComputationDataDashboardTopEmissionSourceProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象SimpleBarChartResp> => {
  let backendApiUrl = `/computation/dataDashboard/topEmissionSource`;

  return axios.request<通用接口返回对象SimpleBarChartResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      includeChild: includeChild,
      orgId: orgId,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户所属组织下拉框
 */

export type getComputationDataDashboardUserListProps = {};

export const getComputationDataDashboardUserList = (
  {}: getComputationDataDashboardUserListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListOrg> => {
  let backendApiUrl = `/computation/dataDashboard/user/list`;

  return axios.request<通用接口返回对象ListOrg>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除核算校验
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationVerifyProps = {
  req: IdReq;
};

export const postComputationComputationVerify = (
  { req }: postComputationComputationVerifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/computation/computation/verify`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 年度碳排放明细（只统计本组织）
 * @param {integer}  [year]          [required]  year
 */

export type getComputationComputationYearProps = {
  year: number;
};

export const getComputationComputationYear = (
  { year }: getComputationComputationYearProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象EmissionStatisticDto> => {
  let backendApiUrl = `/computation/computation/year`;

  return axios.request<通用接口返回对象EmissionStatisticDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description gwp列表
 */

export type getComputationLibGwpListProps = {};

export const getComputationLibGwpList = (
  {}: getComputationLibGwpListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListGwpValueConfigResp> => {
  let backendApiUrl = `/computation/lib/gwp/list`;

  return axios.request<通用接口返回对象ListGwpValueConfigResp>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface AuditData {
  auditStatus?: 0 | 1 | 2 | 3 | 4;

  auditType?: 1 | 3 | 4;

  companyId?: number;

  createBy?: number;

  createByName?: string;

  createTime?: Date;

  dataId?: string;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  targetNames?: string;

  updateBy?: number;

  updateTime?: Date;

  userBtnFlag?: boolean;
}

export interface AuditDto {
  auditComment?: string;

  auditDataId?: number;

  auditStatus?: 0 | 1 | 2 | 3 | 4;
}

export interface AuditLog {
  auditBy?: number;

  auditByMobile?: string;

  auditByName?: string;

  auditComment?: string;

  auditDataId?: number;

  auditStatus?: 0 | 1 | 2 | 3 | 4;

  auditTime?: Date;

  auditType?: 1 | 3 | 4;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataId?: string;

  id?: number;

  orgId?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface AuditNode {
  auditDataId?: number;

  auditOrgId?: number;

  auditStatus?: 0 | 1 | 2 | 3 | 4;

  auditType?: 1 | 3 | 4;

  companyId?: number;

  configType?: 1 | 2;

  createBy?: number;

  createTime?: Date;

  dataId?: string;

  deleted?: boolean;

  id?: number;

  nodeLevel?: number;

  nodeName?: string;

  orgId?: number;

  passed?: boolean;

  sysAuditId?: number;

  targetIds?: number[];

  targetNames?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface AuditUserDto {
  orgId?: number;

  orgName?: string;

  realName?: string;

  userId?: number;

  username?: string;
}

export interface Classify {
  name?: string;

  value?: string[];
}

export interface ClassifyResp {
  categoryCode?: number;

  categoryName?: string;

  classifyCode?: number;

  classifyName?: string;
}

export interface Computation {
  allCheckedList?: number[];

  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataPeriod?: 1 | 2 | 3;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface ComputationData {
  carbonEmission?: number;

  companyId?: number;

  computationId?: number;

  createBy?: number;

  createTime?: Date;

  dataStatus?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;

  dateIdx?: number;

  dateRange?: string;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  rollbackBtnFlag?: boolean;

  submitTime?: Date;

  updateBy?: number;

  updateTime?: Date;

  year?: number;
}

export interface ComputationDataCalcReq {
  computationDataId?: number;

  dataValue?: string;

  emissionSourceId?: number;
}

export interface ComputationReq {
  allCheckedList?: number[];

  dataPeriod?: 1 | 2 | 3;

  id?: number;

  orgId?: number;

  year?: number;
}

export interface ControlPlan {
  borderChange?: string;

  borderDesc?: string;

  borderMethod?: 1 | 2 | 3;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataQuality?: string;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  planContent?: string;

  planDate?: string;

  remark?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  version?: string;
}

export interface ControlPlanData {
  activityDesc?: string;

  calculateDesc?: string;

  calculateType?: string;

  categoryDesc?: string;

  classify?: number;

  collectDesc?: string;

  computationFlag?: boolean;

  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  ghgCategory?: 1 | 2 | 3;

  ghgClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  id?: number;

  isoCategory?: 1 | 2 | 3 | 4 | 5 | 6;

  isoClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  standardType?: 1 | 2;

  storageDesc?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanDataReq {
  activityDesc?: string;

  calculateDesc?: string;

  calculateType?: string;

  collectDesc?: string;

  computationFlag?: boolean;

  controlPlanId?: number;

  id?: number;

  storageDesc?: string;
}

export interface ControlPlanEditReq {
  borderChange?: string;

  borderDesc?: string;

  borderMethod?: 1 | 2 | 3;

  dataQuality?: string;

  id?: number;
}

export interface ControlPlanOrg {
  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  deptName?: string;

  gasGroupDesc?: string;

  gasGroupImg?: string;

  id?: number;

  intro?: string;

  orgId?: number;

  orgName?: string;

  planeImg?: string;

  planeImgDesc?: string;

  produceAddress?: string;

  produceArea?: string;

  produceAreaCode?: number;

  produceCodes?: number[];

  regAddress?: string;

  regArea?: string;

  regAreaCode?: number;

  regCodes?: number[];

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanOrgReq {
  controlPlanId?: number;

  deptName?: string;

  gasGroupDesc?: string;

  gasGroupImg?: string;

  intro?: string;

  planeImg?: string;

  planeImgDesc?: string;

  produceAddress?: string;

  produceArea?: string;

  produceAreaCode?: number;

  produceCodes?: number[];

  regAddress?: string;

  regArea?: string;

  regAreaCode?: number;

  regCodes?: number[];
}

export interface ControlPlanProduct {
  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  serviceDesc?: string;

  serviceName?: string;

  serviceUnit?: string;

  serviceUnitName?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanProductReq {
  controlPlanId?: number;
  createBy?: number;
  createTime?: Date;

  id?: number;

  serviceDesc?: string;

  serviceName?: string;

  serviceUnit?: string;
  updateBy?: number;
  updateTime?: Date;
}

export interface ControlPlanReq {
  id?: number;

  orgId?: number;

  planContent?: string;

  planDate?: string;

  remark?: string;

  version?: string;
}

export interface ControlPlanResp {
  borderChange?: string;

  borderDesc?: string;

  borderMethod?: 1 | 2 | 3;

  companyId?: number;
  createBy?: number;
  createTime?: Date;

  dataQuality?: string;

  ghgList?: ControlPlanData[];

  id?: number;

  isoList?: ControlPlanData[];

  org?: ControlPlanOrg;

  orgId?: number;

  planContent?: string;

  planDate?: string;

  productList?: ControlPlanProduct[];

  remark?: string;
  updateBy?: number;
  updateTime?: Date;

  version?: string;
}

export interface DataSourceReq {
  activityCategory?: 1 | 2 | 3;

  activityDept?: string;

  activityRecordWay?: string;

  activityUnit?: string;

  computationDataId?: number;

  dataValue?: string;

  emissionSourceId?: number;

  facility?: string;

  factorId?: number;

  factorSource?: string;

  factorType?: 1 | 2 | 3 | 4 | 5 | 6;

  gasList?: EmissionSourceGas[];

  ghgCategory?: 1 | 2 | 3;

  ghgClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  isoCategory?: 1 | 2 | 3 | 4 | 5 | 6;

  isoClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  sourceCode?: string;

  sourceName?: string;

  supportFile?: string;

  unitConver?: string;

  year?: number;
}

export interface DataY {
  emissionList?: number[];

  emissionProportionList?: string[];
}

export interface EmissionProportionResp {
  pieRespList?: PieResp[];

  trendChartResp?: TrendChartResp;
}

export interface EmissionSource {
  activityCategory?: 1 | 2 | 3;

  activityDept?: string;

  activityRecordWay?: string;

  activityScore?: number;

  activityUnit?: string;

  activityUnitName?: string;

  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataValue?: number;

  deleted?: boolean;

  facility?: string;

  factorDesc?: string;

  factorId?: number;

  factorScore?: number;

  factorSource?: string;

  factorType?: 1 | 2 | 3 | 4 | 5 | 6;

  gasList?: EmissionSourceGas[];

  ghgCategory?: 1 | 2 | 3;

  ghgClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  id?: number;

  isoCategory?: 1 | 2 | 3 | 4 | 5 | 6;

  isoClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  snapshot?: boolean;

  sourceCode?: string;

  sourceName?: string;

  supportFile?: string;

  unitConver?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface EmissionSourceBindReq {
  emissionSourceIds?: string;

  id?: number;
}

export interface EmissionSourceDto {
  activityCategory?: 1 | 2 | 3;

  activityDept?: string;

  activityRecordWay?: string;

  activityScore?: number;

  activityUnit?: string;

  activityUnitName?: string;

  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataSourceId?: number;

  dataValue?: number;

  deleted?: boolean;

  emissionSourceId?: number;

  facility?: string;

  factorDesc?: string;

  factorId?: number;

  factorScore?: number;

  factorSource?: string;

  factorType?: 1 | 2 | 3 | 4 | 5 | 6;

  gasList?: EmissionSourceGasDto[];

  ghgCategory?: 1 | 2 | 3;

  ghgClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  isoCategory?: 1 | 2 | 3 | 4 | 5 | 6;

  isoClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  sourceCode?: string;

  sourceName?: string;

  supportFile?: string;

  unitConver?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface EmissionSourceGas {
  createBy?: number;

  createTime?: Date;

  emissionSourceId?: number;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  productName?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface EmissionSourceGasDto {
  createBy?: number;

  createTime?: Date;

  emissionSourceId?: number;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  productName?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface EmissionSourceReq {
  activityCategory?: 1 | 2 | 3;

  activityDept?: string;

  activityRecordWay?: string;

  activityUnit?: string;

  facility?: string;

  factorId?: number;

  factorSource?: string;

  factorType?: 1 | 2 | 3 | 4 | 5 | 6;

  gasList?: EmissionSourceGas[];

  ghgCategory?: 1 | 2 | 3;

  ghgClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  id?: number;

  isoCategory?: 1 | 2 | 3 | 4 | 5 | 6;

  isoClassify?:
    | 1
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 2
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9;

  sourceCode?: string;

  sourceName?: string;

  unitConver?: string;

  year?: number;
}

export interface EmissionSourceResp {
  categoryName?: string;

  classifyName?: string;

  emission?: number;

  emissionProportion?: string;

  sourceName?: string;
}

export interface EmissionStandard {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataList?: EmissionStandardData[];

  deleted?: boolean;

  endYear?: number;

  id?: number;

  orgId?: number;

  orgName?: string;

  policy?: string;

  settingType?: 1 | 2;

  standardEmission?: number;

  startYear?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface EmissionStandardData {
  createBy?: number;

  createTime?: Date;

  direct?: number;

  emissionStandardId?: number;

  energy?: number;

  id?: number;

  outsourcing?: number;

  rests?: number;

  scopeOne?: number;

  scopeThree?: number;

  scopeTwo?: number;

  supplyChain?: number;

  total?: number;

  transport?: number;

  updateBy?: number;

  updateTime?: Date;

  year?: number;
}

export interface EmissionStandardReq {
  dataList?: EmissionStandardData[];

  endYear?: number;

  id?: number;

  orgId?: number;

  policy?: string;

  settingType?: 1 | 2;

  startYear?: number;
}

export interface EmissionStatisticDto {
  carbonEmission?: number;
  createBy?: number;
  createTime?: Date;

  direct?: number;

  energy?: number;
  id?: number;

  orgId?: number;

  orgName?: string;

  outsourcing?: number;

  rests?: number;

  scopeOne?: number;

  scopeThree?: number;

  scopeTwo?: number;

  supplyChain?: number;

  transport?: number;
  updateBy?: number;
  updateTime?: Date;

  year?: number;
}

export interface EmissionTrendResp {
  carbonEmission?: number;

  carbonEmissionRatio?: number;

  growth?: number;

  lastYearCarbonEmission?: number;

  previousFirstYearEmission?: number;

  trendChart?: TrendChartResp;

  year?: number;
}

export interface EnableStatusReq {
  id?: number;

  status?: 0 | 1;
}

export interface EnumResp {
  code?: number;
  name?: string;
  score?: string;
  subList?: EnumResp[];
}

export interface Export {
  fileName?: string;

  url?: string;
}

export interface FootprintResult {
  applyInfoId?: number;
  createBy?: number;
  createTime?: Date;

  discardStage?: number;
  id?: number;

  materialStage?: number;

  periodType?: 1 | 2;

  produceStage?: number;

  productId?: number;

  productModel?: string;

  productName?: string;

  productUnit?: string;

  productionBusinessId?: number;

  storageStage?: number;

  supplierName?: string;

  total?: number;
  updateBy?: number;
  updateTime?: Date;

  useStage?: number;

  year?: number;
}

export interface GwpValueConfigResp {
  gas?: string;

  gasType?: string;

  gwpValue?: string;
}

export interface IPageAuditData {
  list?: AuditData[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageAuditUserDto {
  list?: AuditUserDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageComputationData {
  list?: ComputationData[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageComputation {
  list?: Computation[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageControlPlan {
  list?: ControlPlan[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageEmissionSource {
  list?: EmissionSource[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageEmissionStandard {
  list?: EmissionStandard[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageModel {
  list?: Model[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageOperationData {
  list?: OperationData[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageOperationMetrics {
  list?: OperationMetrics[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageProductDto {
  list?: ProductDto[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageReductionScene {
  list?: ReductionScene[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageReport {
  list?: Report[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IdReq {
  id: number;
}

export interface IntensityTrendResp {
  carbonIntensity?: number;

  carbonIntensityRatio?: number;

  growth?: number;

  lastYearCarbonIntensity?: number;

  trendChart?: TrendChartResp;

  year?: number;
}

export interface LinkDto {
  source?: string;

  target?: string;

  value?: number;
}

export interface Model {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  intro?: string;

  modelName?: string;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface ModelReq {
  id?: number;

  intro?: string;

  modelName?: string;

  orgId?: number;
}

export interface NodeDto {
  name?: string;

  value?: number;
}

export interface OperationData {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  metricsList?: OperationDataMetricsResp[];

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface OperationDataMetricsReq {
  metricsId?: number;

  metricsValue?: number;
}

export interface OperationDataMetricsResp {
  id?: number;

  metricsId?: number;

  metricsName?: string;

  metricsUnit?: string;

  metricsUnitName?: string;

  metricsValue?: number;
}

export interface OperationDataReq {
  id?: number;

  metricsList?: OperationDataMetricsReq[];

  orgId?: number;

  year?: number;
}

export interface OperationMetrics {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleteBtnFlag?: 0 | 1;

  deleted?: boolean;

  id?: number;

  metricsId?: number;

  metricsName?: string;

  metricsStatus?: 0 | 1;

  metricsUnit?: string;

  metricsUnitName?: string;

  presetType?: 0 | 1;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface OperationMetricsReq {
  id?: number;

  metricsName?: string;

  metricsUnit?: string;
}

export interface Org {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  orgAbbr?: string;

  orgCode?: string;

  orgInfo?: string;

  orgName?: string;

  orgPath?: string;

  orgType?: 0 | 1 | 2 | 3;

  pid?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface OrgBarChartResp {
  companyAvg?: number[];

  dataX?: string[];

  dataY?: DataY;
}

export interface OrgTree {
  children?: OrgTree[];
  code?: number;

  modelName?: string;
  name?: string;

  orgType?: 0 | 1 | 2 | 3;
  pcode?: number;
}

export interface PathwayResp {
  links?: LinkDto[];

  nodes?: NodeDto[];
}

export interface PieResp {
  name?: string;

  value?: number;
}

export interface ProductDto {
  applyInfoId?: number;

  applyType?: 1 | 2;

  beginDate?: Date;

  companyId?: number;

  discharge?: string;

  dischargeRate?: string;

  endTime?: Date;

  orgId?: number;

  periodType?: 1 | 2;

  productId?: number;

  productModel?: string;

  productName?: string;

  productUnit?: string;

  submitTime?: Date;

  supplierId?: number;

  supplierName?: string;
}

export interface ReductionScene {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  sceneDesc?: string;

  sceneName?: string;

  sceneType?: string;

  totalCarbonEmission?: string;

  totalDesc?: string;

  totalEndValue?: number;

  totalLessenType?: 0 | 1;

  totalStartValue?: number;

  totalUnit?: 1 | 2 | 3 | 4 | 5 | 6;

  unitCarbonEmission?: string;

  unitDenominatorUnit?: string;

  unitDesc?: string;

  unitEndValue?: number;

  unitLessenType?: 0 | 1;

  unitNumeratorUnit?: 1 | 2 | 3 | 4 | 5 | 6;

  unitStartValue?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface ReductionSceneReq {
  id?: number;

  orgId?: number;

  sceneDesc?: string;

  sceneName?: string;

  sceneType?: string;

  totalDesc?: string;

  totalEndValue?: number;

  totalLessenType?: 0 | 1;

  totalStartValue?: number;

  totalUnit?: 1 | 2 | 3 | 4 | 5 | 6;

  unitDenominatorUnit?: string;

  unitDesc?: string;

  unitEndValue?: number;

  unitLessenType?: 0 | 1;

  unitNumeratorUnit?: 1 | 2 | 3 | 4 | 5 | 6;

  unitStartValue?: number;
}

export interface Report {
  absolution?: string;

  biomassDesc?: string;

  carbonEmission?: number;

  companyId?: number;

  controlPlanId?: number;

  controlPlanVersion?: string;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  elseDesc?: string;

  id?: number;

  mainEmail?: string;

  mainName?: string;

  mainPhone?: string;

  orgId?: number;

  orgName?: string;

  quantizationChangeDesc?: string;

  reductionSceneIds?: number[];

  reportName?: string;

  standardEmission?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface ReportGenerateReq {
  reportId?: number;

  reportTypeList?: number[];
}

export interface ReportReq {
  absolution?: string;

  biomassDesc?: string;

  controlPlanId?: number;

  elseDesc?: string;

  id?: number;

  mainEmail?: string;

  mainName?: string;

  mainPhone?: string;

  orgId?: number;

  quantizationChangeDesc?: string;

  reductionSceneIds?: number[];

  reportName?: string;

  year?: number;
}

export interface SimpleBarChartResp {
  companyAvg?: number[];

  dataX?: string[];

  dataY?: number[];
}

export interface SupplierGasResp {
  factorUnitM?: string;

  factorUnitMName?: string;

  factorUnitZ?: string;

  factorUnitZName?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  productName?: string;

  supplierName?: string;

  year?: number;
}

export interface TrendChartResp {
  dataX?: string[];

  dataY?: Classify[];
}

export interface org树 {
  allCheckedList?: number[];

  halfCheckedList?: number[];

  tree?: OrgTree[];
}

export interface 通用接口返回对象 {
  code: number;

  data: unknown;

  msg: string;
}

export interface 通用接口返回对象ClassifyResp {
  code: number;

  data: ClassifyResp;

  msg: string;
}

export interface 通用接口返回对象ComputationData {
  code: number;

  data: ComputationData;

  msg: string;
}

export interface 通用接口返回对象Computation {
  code: number;

  data: Computation;

  msg: string;
}

export interface 通用接口返回对象ControlPlanData {
  code: number;

  data: ControlPlanData;

  msg: string;
}

export interface 通用接口返回对象ControlPlanProduct {
  code: number;

  data: ControlPlanProduct;

  msg: string;
}

export interface 通用接口返回对象ControlPlanResp {
  code: number;

  data: ControlPlanResp;

  msg: string;
}

export interface 通用接口返回对象EmissionProportionResp {
  code: number;

  data: EmissionProportionResp;

  msg: string;
}

export interface 通用接口返回对象EmissionSourceDto {
  code: number;

  data: EmissionSourceDto;

  msg: string;
}

export interface 通用接口返回对象EmissionSource {
  code: number;

  data: EmissionSource;

  msg: string;
}

export interface 通用接口返回对象EmissionStandard {
  code: number;

  data: EmissionStandard;

  msg: string;
}

export interface 通用接口返回对象EmissionStatisticDto {
  code: number;

  data: EmissionStatisticDto;

  msg: string;
}

export interface 通用接口返回对象EmissionTrendResp {
  code: number;

  data: EmissionTrendResp;

  msg: string;
}

export interface 通用接口返回对象Export {
  code: number;

  data: Export;

  msg: string;
}

export interface 通用接口返回对象FootprintResult {
  code: number;

  data: FootprintResult;

  msg: string;
}

export interface 通用接口返回对象IPageAuditData {
  code: number;

  data: IPageAuditData;

  msg: string;
}

export interface 通用接口返回对象IPageAuditUserDto {
  code: number;

  data: IPageAuditUserDto;

  msg: string;
}

export interface 通用接口返回对象IPageComputationData {
  code: number;

  data: IPageComputationData;

  msg: string;
}

export interface 通用接口返回对象IPageComputation {
  code: number;

  data: IPageComputation;

  msg: string;
}

export interface 通用接口返回对象IPageControlPlan {
  code: number;

  data: IPageControlPlan;

  msg: string;
}

export interface 通用接口返回对象IPageEmissionSource {
  code: number;

  data: IPageEmissionSource;

  msg: string;
}

export interface 通用接口返回对象IPageEmissionStandard {
  code: number;

  data: IPageEmissionStandard;

  msg: string;
}

export interface 通用接口返回对象IPageModel {
  code: number;

  data: IPageModel;

  msg: string;
}

export interface 通用接口返回对象IPageOperationData {
  code: number;

  data: IPageOperationData;

  msg: string;
}

export interface 通用接口返回对象IPageOperationMetrics {
  code: number;

  data: IPageOperationMetrics;

  msg: string;
}

export interface 通用接口返回对象IPageProductDto {
  code: number;

  data: IPageProductDto;

  msg: string;
}

export interface 通用接口返回对象IPageReductionScene {
  code: number;

  data: IPageReductionScene;

  msg: string;
}

export interface 通用接口返回对象IPageReport {
  code: number;

  data: IPageReport;

  msg: string;
}

export interface 通用接口返回对象IntensityTrendResp {
  code: number;

  data: IntensityTrendResp;

  msg: string;
}

export interface 通用接口返回对象ListAuditLog {
  code: number;

  data: AuditLog[];

  msg: string;
}

export interface 通用接口返回对象ListAuditNode {
  code: number;

  data: AuditNode[];

  msg: string;
}

export interface 通用接口返回对象ListComputationData {
  code: number;

  data: ComputationData[];

  msg: string;
}

export interface 通用接口返回对象ListControlPlanProduct {
  code: number;

  data: ControlPlanProduct[];

  msg: string;
}

export interface 通用接口返回对象ListEmissionSourceResp {
  code: number;

  data: EmissionSourceResp[];

  msg: string;
}

export interface 通用接口返回对象ListEmissionStatisticDto {
  code: number;

  data: EmissionStatisticDto[];

  msg: string;
}

export interface 通用接口返回对象ListEnumResp {
  code: number;

  data: EnumResp[];

  msg: string;
}

export interface 通用接口返回对象ListGwpValueConfigResp {
  code: number;

  data: GwpValueConfigResp[];

  msg: string;
}

export interface 通用接口返回对象ListOperationMetrics {
  code: number;

  data: OperationMetrics[];

  msg: string;
}

export interface 通用接口返回对象ListOrg {
  code: number;

  data: Org[];

  msg: string;
}

export interface 通用接口返回对象Listint {
  code: number;

  data: number[];

  msg: string;
}

export interface 通用接口返回对象Model {
  code: number;

  data: Model;

  msg: string;
}

export interface 通用接口返回对象OperationData {
  code: number;

  data: OperationData;

  msg: string;
}

export interface 通用接口返回对象OperationMetrics {
  code: number;

  data: OperationMetrics;

  msg: string;
}

export interface 通用接口返回对象OrgBarChartResp {
  code: number;

  data: OrgBarChartResp;

  msg: string;
}

export interface 通用接口返回对象PathwayResp {
  code: number;

  data: PathwayResp;

  msg: string;
}

export interface 通用接口返回对象ReductionScene {
  code: number;

  data: ReductionScene;

  msg: string;
}

export interface 通用接口返回对象Report {
  code: number;

  data: Report;

  msg: string;
}

export interface 通用接口返回对象SimpleBarChartResp {
  code: number;

  data: SimpleBarChartResp;

  msg: string;
}

export interface 通用接口返回对象SupplierGasResp {
  code: number;

  data: SupplierGasResp;

  msg: string;
}

export interface 通用接口返回对象org树 {
  code: number;

  data: org树;

  msg: string;
}
