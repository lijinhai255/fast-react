/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 新增审批
 * @param {any}      [req]           [required]  req
 */

export type postSystemAuditAddProps = {
  req: AuditReq;
};

export const postSystemAuditAdd = (
  { req }: postSystemAuditAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/audit/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增字典分类
 * @param {any}      [req]           [required]  req
 */

export type postSystemDictdataAddProps = {
  req: DictDataReq;
};

export const postSystemDictdataAdd = (
  { req }: postSystemDictdataAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dictdata/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增字典枚举值
 * @param {any}      [req]           [required]  req
 */

export type postSystemDictenumAddProps = {
  req: DictEnumReq;
};

export const postSystemDictenumAdd = (
  { req }: postSystemDictenumAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dictenum/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增字典
 * @param {any}      [req]           [required]  req
 */

export type postSystemDicttypeAddProps = {
  req: DictTypeReq;
};

export const postSystemDicttypeAdd = (
  { req }: postSystemDicttypeAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dicttype/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增
 * @param {any}      [req]           [required]  req
 */

export type postSystemFactorAddProps = {
  req: FactorReq;
};

export const postSystemFactorAdd = (
  { req }: postSystemFactorAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/factor/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增资讯
 * @param {any}      [req]           [required]  req
 */

export type postSystemInfoAddProps = {
  req: InfoReq;
};

export const postSystemInfoAdd = (
  { req }: postSystemInfoAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/info/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增组织
 * @param {any}      [req]           [required]  req
 */

export type postSystemOrgAddProps = {
  req: OrgReq;
};

export const postSystemOrgAdd = (
  { req }: postSystemOrgAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/org/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增角色
 * @param {any}      [req]           [required]  req
 */

export type postSystemRoleAddProps = {
  req: RoleReq;
};

export const postSystemRoleAdd = (
  { req }: postSystemRoleAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/role/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增用户
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserAddProps = {
  req: UserReq;
};

export const postSystemUserAdd = (
  { req }: postSystemUserAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 地址库查询
 * @param {integer}  [addressCode]   [required]  地址code
 */

export type getSystemLibAddressCodeProps = {
  addressCode: number;
};

export const getSystemLibAddressCode = (
  { addressCode }: getSystemLibAddressCodeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Tree> => {
  let backendApiUrl = `/system/lib/address/code`;

  return axios.request<通用接口返回对象Tree>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      addressCode: addressCode,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 地址库分级查询
 * @param {integer}  [pCode]         [required]  父级地址code，省级为0
 */

export type getSystemLibAddressListProps = {
  pCode: number;
};

export const getSystemLibAddressList = (
  { pCode }: getSystemLibAddressListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListTree> => {
  let backendApiUrl = `/system/lib/address/list`;

  return axios.request<通用接口返回对象ListTree>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pCode: pCode,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 地址树
 * @param {integer}  [level]            地址级别。省 1 市 2 区 3
 */

export type getSystemLibAddressTreeProps = {
  level?: number | null | undefined;
};

export const getSystemLibAddressTree = (
  { level }: getSystemLibAddressTreeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListTree> => {
  let backendApiUrl = `/system/lib/address/tree`;

  return axios.request<通用接口返回对象ListTree>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      level: level,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 全部已读
 */

export type postSystemMsgAllReadProps = {};

export const postSystemMsgAllRead = (
  {}: postSystemMsgAllReadProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/msg/allRead`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户是否处于当前审核节点
 * @param {integer}  [id]            [required]  id
 */

export type getSystemMsgCheckIdProps = {
  id: number;
};

export const getSystemMsgCheckId = (
  { id }: getSystemMsgCheckIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象boolean> => {
  let backendApiUrl = `/system/msg/check/${id}`;

  return axios.request<通用接口返回对象boolean>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 点击
 * @param {any}      [req]           [required]  req
 */

export type postSystemMsgClickProps = {
  req: IdReq;
};

export const postSystemMsgClick = (
  { req }: postSystemMsgClickProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/msg/click`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除资讯
 * @param {any}      [req]           [required]  req
 */

export type postSystemInfoDeleteProps = {
  req: IdReq;
};

export const postSystemInfoDelete = (
  { req }: postSystemInfoDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/info/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除组织
 * @param {any}      [req]           [required]  req
 */

export type postSystemOrgDeleteProps = {
  req: IdReq;
};

export const postSystemOrgDelete = (
  { req }: postSystemOrgDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/org/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除角色
 * @param {any}      [req]           [required]  req
 */

export type postSystemRoleDeleteProps = {
  req: IdReq;
};

export const postSystemRoleDelete = (
  { req }: postSystemRoleDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/role/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除用户
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserDeleteProps = {
  req: IdReq;
};

export const postSystemUserDelete = (
  { req }: postSystemUserDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批配置详情
 * @param {string}   [auditType]     [required]  审批内容
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getSystemAuditOrgIdAuditTypeProps = {
  auditType: '1' | '3' | '4';
  orgId: number;
};

export const getSystemAuditOrgIdAuditType = (
  { auditType, orgId }: getSystemAuditOrgIdAuditTypeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象AuditDetailDto> => {
  let backendApiUrl = `/system/audit/${orgId}/${auditType}`;

  return axios.request<通用接口返回对象AuditDetailDto>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditType: auditType,
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemFactorIdProps = {
  id: number;
};

export const getSystemFactorId = (
  { id }: getSystemFactorIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Factor> => {
  let backendApiUrl = `/system/factor/${id}`;

  return axios.request<通用接口返回对象Factor>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 字段明细
 * @param {integer}  [id]            [required]  id
 */

export type getSystemI18nIdProps = {
  id: number;
};

export const getSystemI18nId = (
  { id }: getSystemI18nIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象I18nResp> => {
  let backendApiUrl = `/system/i18n/${id}`;

  return axios.request<通用接口返回对象I18nResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 资讯详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemInfoIdProps = {
  id: number;
};

export const getSystemInfoId = (
  { id }: getSystemInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Info> => {
  let backendApiUrl = `/system/info/${id}`;

  return axios.request<通用接口返回对象Info>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 消息详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemMsgIdProps = {
  id: number;
};

export const getSystemMsgId = (
  { id }: getSystemMsgIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Msg> => {
  let backendApiUrl = `/system/msg/${id}`;

  return axios.request<通用接口返回对象Msg>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemOrgIdProps = {
  id: number;
};

export const getSystemOrgId = (
  { id }: getSystemOrgIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Org> => {
  let backendApiUrl = `/system/org/${id}`;

  return axios.request<通用接口返回对象Org>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 权限详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemPermissionIdProps = {
  id: number;
};

export const getSystemPermissionId = (
  { id }: getSystemPermissionIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Permission> => {
  let backendApiUrl = `/system/permission/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<通用接口返回对象Permission>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 角色详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemRoleIdProps = {
  id: number;
};

export const getSystemRoleId = (
  { id }: getSystemRoleIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Role> => {
  let backendApiUrl = `/system/role/${id}`;

  return axios.request<通用接口返回对象Role>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemUserIdProps = {
  id: number;
};

export const getSystemUserId = (
  { id }: getSystemUserIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象UserDetailResp> => {
  let backendApiUrl = `/system/user/${id}`;

  return axios.request<通用接口返回对象UserDetailResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 记录下载日志
 * @param {any}      [req]           [required]  req
 */

export type postSystemOperlogSaveDownloadLogProps = {
  req: DownloadLogReq;
};

export const postSystemOperlogSaveDownloadLog = (
  { req }: postSystemOperlogSaveDownloadLogProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/operlog/save/downloadLog`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postSystemAppConfigEditProps = {
  req: AppConfigReq;
};

export const postSystemAppConfigEdit = (
  { req }: postSystemAppConfigEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/appConfig/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑审批
 * @param {any}      [req]           [required]  req
 */

export type postSystemAuditEditProps = {
  req: AuditReq;
};

export const postSystemAuditEdit = (
  { req }: postSystemAuditEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/audit/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑用户
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserEditProps = {
  req: UserReq;
};

export const postSystemUserEdit = (
  { req }: postSystemUserEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑字典分类
 * @param {any}      [req]           [required]  req
 */

export type postSystemDictdataEditProps = {
  req: DictDataReq;
};

export const postSystemDictdataEdit = (
  { req }: postSystemDictdataEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dictdata/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑字典枚举值
 * @param {any}      [req]           [required]  req
 */

export type postSystemDictenumEditProps = {
  req: DictEnumReq;
};

export const postSystemDictenumEdit = (
  { req }: postSystemDictenumEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dictenum/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑字典
 * @param {any}      [req]           [required]  req
 */

export type postSystemDicttypeEditProps = {
  req: DictTypeReq;
};

export const postSystemDicttypeEdit = (
  { req }: postSystemDicttypeEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dicttype/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑
 * @param {any}      [req]           [required]  req
 */

export type postSystemFactorEditProps = {
  req: FactorReq;
};

export const postSystemFactorEdit = (
  { req }: postSystemFactorEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/factor/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑字段
 * @param {any}      [req]           [required]  req
 */

export type postSystemI18nEditProps = {
  req: SysI18nLangReq;
};

export const postSystemI18nEdit = (
  { req }: postSystemI18nEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/i18n/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑资讯
 * @param {any}      [req]           [required]  req
 */

export type postSystemInfoEditProps = {
  req: InfoReq;
};

export const postSystemInfoEdit = (
  { req }: postSystemInfoEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/info/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑组织
 * @param {any}      [req]           [required]  req
 */

export type postSystemOrgEditProps = {
  req: OrgReq;
};

export const postSystemOrgEdit = (
  { req }: postSystemOrgEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/org/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑角色
 * @param {any}      [req]           [required]  req
 */

export type postSystemRoleEditProps = {
  req: RoleReq;
};

export const postSystemRoleEdit = (
  { req }: postSystemRoleEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/role/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询枚举值（忽略大小写）
 * @param {string}   [enumName]      [required]  枚举名
 */

export type getSystemEnumsEnumNameProps = {
  enumName: string;
};

export const getSystemEnumsEnumName = (
  { enumName }: getSystemEnumsEnumNameProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListEnumResp> => {
  let backendApiUrl = `/system/enums/${enumName}`;

  return axios.request<通用接口返回对象ListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      enumName: enumName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 详情
 */

export type getSystemAppConfigGetAndSaveProps = {};

export const getSystemAppConfigGetAndSave = (
  {}: getSystemAppConfigGetAndSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListAppConfig> => {
  let backendApiUrl = `/system/appConfig/getAndSave`;

  return axios.request<通用接口返回对象ListAppConfig>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询多个用户信息
 * @param {array}    [ids]           [required]  ids
 */

export type getSystemUserGetByIdsProps = {
  ids: number[];
};

export const getSystemUserGetByIds = (
  { ids }: getSystemUserGetByIdsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListUser> => {
  let backendApiUrl = `/system/user/getByIds`;

  return axios.request<通用接口返回对象ListUser>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ids: ids,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询语言缓存
 * @param {string}   [lang]          [required]  lang
 */

export type getSystemI18nCacheLangProps = {
  lang: string;
};

export const getSystemI18nCacheLang = (
  { lang }: getSystemI18nCacheLangProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Mapstringstring> => {
  let backendApiUrl = `/system/i18n/cache/${lang}`;

  return axios.request<通用接口返回对象Mapstringstring>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      lang: lang,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 获取左侧菜单权限列表
 */

export type getSystemPermissionRouterProps = {};

export const getSystemPermissionRouter = (
  {}: getSystemPermissionRouterProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListPermissionResp> => {
  let backendApiUrl = `/system/permission/router`;

  return axios.request<通用接口返回对象ListPermissionResp>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 应用初始化
 * @param {integer}  [type]             类型标识(0--企业碳核算  1--碳核算行业版)
 */

export type getSystemAppConfigInitProps = {
  type?: number | null | undefined;
};

export const getSystemAppConfigInit = (
  { type }: getSystemAppConfigInitProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/appConfig/init`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      type: type,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 根据字典标识查询字典枚举值-批量查询
 * @param {string}   [dictTypes]     [required]  dictTypes
 */

export type getSystemDictenumListAllByDictTypeBatchProps = {
  dictTypes: string;
};

export const getSystemDictenumListAllByDictTypeBatch = (
  { dictTypes }: getSystemDictenumListAllByDictTypeBatchProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/dictenum/listAllByDictTypeBatch`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dictTypes: dictTypes,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 修改默认密码
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserPasswordModifyDefaultProps = {
  req: DefaultPasswordReq;
};

export const postSystemUserPasswordModifyDefault = (
  { req }: postSystemUserPasswordModifyDefaultProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/password/modifyDefault`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户修改密码
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserPasswordModifyProps = {
  req: PasswordReq;
};

export const postSystemUserPasswordModify = (
  { req }: postSystemUserPasswordModifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/password/modify`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 审批配置列表-分页
 * @param {string}   [auditType]        审批内容
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemAuditPageProps = {
  auditType?: '1' | '3' | '4' | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemAuditPage = (
  { auditType, orgId, pageNum, pageSize }: getSystemAuditPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageAuditResp> => {
  let backendApiUrl = `/system/audit/page`;

  return axios.request<通用接口返回对象IPageAuditResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      auditType: auditType,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 字典分类列表-分页
 * @param {string}   [dictLabel]        分类名称
 * @param {string}   [dictType]      [required]  字典类型
 * @param {string}   [dictValue]        分类标识
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemDictdataPageProps = {
  dictLabel?: string | null | undefined;
  dictType: string;
  dictValue?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemDictdataPage = (
  {
    dictLabel,
    dictType,
    dictValue,
    pageNum,
    pageSize,
  }: getSystemDictdataPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageDictDataResp> => {
  let backendApiUrl = `/system/dictdata/page`;

  return axios.request<通用接口返回对象IPageDictDataResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dictLabel: dictLabel,
      dictType: dictType,
      dictValue: dictValue,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 操作日志列表
 * @param {string}   [endDate]          结束时间
 * @param {string}   [likeUsername]     操作人姓名或账号
 * @param {string}   [moduleType]       模块类型
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [startDate]        开始时间
 */

export type getSystemOperlogPageProps = {
  endDate?: string | null | undefined;
  likeUsername?: string | null | undefined;
  moduleType?:
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '16'
    | '17'
    | '18'
    | '30'
    | '40'
    | '50'
    | '60'
    | '70'
    | '80'
    | null
    | undefined;
  pageNum: number;
  pageSize: number;
  startDate?: string | null | undefined;
};

export const getSystemOperlogPage = (
  {
    endDate,
    likeUsername,
    moduleType,
    pageNum,
    pageSize,
    startDate,
  }: getSystemOperlogPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageOperLog> => {
  let backendApiUrl = `/system/operlog/page`;

  return axios.request<通用接口返回对象IPageOperLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      endDate: endDate,
      likeUsername: likeUsername,
      moduleType: moduleType,
      pageNum: pageNum,
      pageSize: pageSize,
      startDate: startDate,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织列表-分页
 * @param {string}   [likeOrgName]      组织名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemOrgPageProps = {
  likeOrgName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemOrgPage = (
  { likeOrgName, pageNum, pageSize }: getSystemOrgPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageOrg> => {
  let backendApiUrl = `/system/org/page`;

  return axios.request<通用接口返回对象IPageOrg>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeOrgName: likeOrgName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 权限列表-分页
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemPermissionPageProps = {
  pageNum: number;
  pageSize: number;
};

export const getSystemPermissionPage = (
  { pageNum, pageSize }: getSystemPermissionPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPagePermission> => {
  let backendApiUrl = `/system/permission/page`;

  return axios.request<通用接口返回对象IPagePermission>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 角色列表-分页
 * @param {string}   [likeRoleName]     角色名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemRolePageProps = {
  likeRoleName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemRolePage = (
  { likeRoleName, pageNum, pageSize }: getSystemRolePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageRole> => {
  let backendApiUrl = `/system/role/page`;

  return axios.request<通用接口返回对象IPageRole>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeRoleName: likeRoleName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户列表-分页
 * @param {string}   [likeUserInfo]     用户信息
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [roleId]           角色id
 * @param {string}   [userStatus]       用户状态。0 启用 1 禁用
 */

export type getSystemUserPageProps = {
  likeUserInfo?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  roleId?: number | null | undefined;
  userStatus?: '0' | '1' | null | undefined;
};

export const getSystemUserPage = (
  {
    likeUserInfo,
    orgId,
    pageNum,
    pageSize,
    roleId,
    userStatus,
  }: getSystemUserPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageUserResp> => {
  let backendApiUrl = `/system/user/page`;

  return axios.request<通用接口返回对象IPageUserResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeUserInfo: likeUserInfo,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      roleId: roleId,
      userStatus: userStatus,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 字典枚举值列表-分页
 * @param {string}   [dictLabel]        枚举值名称
 * @param {string}   [dictType]      [required]  字典类型
 * @param {string}   [dictValue]        枚举值标识
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [sourceType]       所属分类
 */

export type getSystemDictenumPageProps = {
  dictLabel?: string | null | undefined;
  dictType: string;
  dictValue?: string | null | undefined;
  pageNum: number;
  pageSize: number;
  sourceType?: string | null | undefined;
};

export const getSystemDictenumPage = (
  {
    dictLabel,
    dictType,
    dictValue,
    pageNum,
    pageSize,
    sourceType,
  }: getSystemDictenumPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageDictEnumResp> => {
  let backendApiUrl = `/system/dictenum/page`;

  return axios.request<通用接口返回对象IPageDictEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dictLabel: dictLabel,
      dictType: dictType,
      dictValue: dictValue,
      pageNum: pageNum,
      pageSize: pageSize,
      sourceType: sourceType,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 字典列表-分页
 * @param {string}   [dictName]         字典名称
 * @param {string}   [dictType]         字典类型
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemDicttypePageProps = {
  dictName?: string | null | undefined;
  dictType?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemDicttypePage = (
  { dictName, dictType, pageNum, pageSize }: getSystemDicttypePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageDictTypeResp> => {
  let backendApiUrl = `/system/dicttype/page`;

  return axios.request<通用接口返回对象IPageDictTypeResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dictName: dictName,
      dictType: dictType,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 因子列表-分页
 * @param {string}   [firstClassify]    一级分类
 * @param {string}   [likeDescription]    适用场景
 * @param {string}   [likeInstitution]    发布机构
 * @param {string}   [likeName]         名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [secondClassify]    二级分类
 * @param {string}   [status]           状态。0 启用 1 禁用
 * @param {string}   [year]             发布年份
 */

export type getSystemFactorPageProps = {
  firstClassify?: string | null | undefined;
  likeDescription?: string | null | undefined;
  likeInstitution?: string | null | undefined;
  likeName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
  secondClassify?: string | null | undefined;
  status?: '0' | '1' | null | undefined;
  year?: string | null | undefined;
};

export const getSystemFactorPage = (
  {
    firstClassify,
    likeDescription,
    likeInstitution,
    likeName,
    pageNum,
    pageSize,
    secondClassify,
    status,
    year,
  }: getSystemFactorPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageFactor> => {
  let backendApiUrl = `/system/factor/page`;

  return axios.request<通用接口返回对象IPageFactor>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      firstClassify: firstClassify,
      likeDescription: likeDescription,
      likeInstitution: likeInstitution,
      likeName: likeName,
      pageNum: pageNum,
      pageSize: pageSize,
      secondClassify: secondClassify,
      status: status,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 文件下载列表
 * @param {string}   [bizModule]        功能模块。1 系统管理；2 排放因子库；3 产品碳足迹；4 企业碳核算
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemFilelogPageProps = {
  bizModule?: '2' | '3' | '4' | '6' | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemFilelogPage = (
  { bizModule, orgId, pageNum, pageSize }: getSystemFilelogPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageFileLog> => {
  let backendApiUrl = `/system/filelog/page`;

  return axios.request<通用接口返回对象IPageFileLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      bizModule: bizModule,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 字段列表-分页
 * @param {string}   [i18nType]         所属产品。1 通用 2 错误码 3 系统管理 4 碳因子库 5 组织碳核算 6 产品碳阻迹 7 供应链 8 碳账户 9 降碳课题
 * @param {string}   [likeFieldKey]     字段标识
 * @param {string}   [likeFieldName]    字段名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemI18nPageProps = {
  i18nType?: '1' | '2' | '3' | null | undefined;
  likeFieldKey?: string | null | undefined;
  likeFieldName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemI18nPage = (
  {
    i18nType,
    likeFieldKey,
    likeFieldName,
    pageNum,
    pageSize,
  }: getSystemI18nPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageI18n> => {
  let backendApiUrl = `/system/i18n/page`;

  return axios.request<通用接口返回对象IPageI18n>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      i18nType: i18nType,
      likeFieldKey: likeFieldKey,
      likeFieldName: likeFieldName,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 导入记录列表-分页
 * @param {string}   [importType]       导入内容。1 供应商；2 采购产品
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemImportLogPageProps = {
  importType?: '1' | '2' | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemImportLogPage = (
  { importType, pageNum, pageSize }: getSystemImportLogPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageImportLog> => {
  let backendApiUrl = `/system/importLog/page`;

  return axios.request<通用接口返回对象IPageImportLog>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      importType: importType,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 资讯列表-分页
 * @param {string}   [infoStatus]       资讯状态。0 待发布；1 已发布；2 已下架
 * @param {string}   [infoType]         资讯类型
 * @param {string}   [likeTitle]        标题
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemInfoPageProps = {
  infoStatus?: '0' | '1' | '2' | null | undefined;
  infoType?: string | null | undefined;
  likeTitle?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemInfoPage = (
  {
    infoStatus,
    infoType,
    likeTitle,
    pageNum,
    pageSize,
  }: getSystemInfoPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageInfo> => {
  let backendApiUrl = `/system/info/page`;

  return axios.request<通用接口返回对象IPageInfo>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      infoStatus: infoStatus,
      infoType: infoType,
      likeTitle: likeTitle,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 消息列表-分页
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemMsgPageProps = {
  pageNum: number;
  pageSize: number;
};

export const getSystemMsgPage = (
  { pageNum, pageSize }: getSystemMsgPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageMsg> => {
  let backendApiUrl = `/system/msg/page`;

  return axios.request<通用接口返回对象IPageMsg>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 重新缓存
 */

export type getSystemI18nReCacheProps = {};

export const getSystemI18nReCache = (
  {}: getSystemI18nReCacheProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/i18n/reCache`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 重新缓存权限点名称
 */

export type getSystemPermissionReCacheProps = {};

export const getSystemPermissionReCache = (
  {}: getSystemPermissionReCacheProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/permission/reCache`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 管理员重置密码
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserPasswordResetProps = {
  req: IdReq;
};

export const postSystemUserPasswordReset = (
  { req }: postSystemUserPasswordResetProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/password/reset`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 记录下载日志
 * @param {any}      [req]           [required]  req
 */

export type postSystemFilelogDownloadLogSaveProps = {
  req: IdReq;
};

export const postSystemFilelogDownloadLogSave = (
  { req }: postSystemFilelogDownloadLogSaveProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/filelog/downloadLog/save`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 启用禁用
 * @param {any}      [req]           [required]  req
 */

export type postSystemFactorStatusProps = {
  req: EnableStatusReq;
};

export const postSystemFactorStatus = (
  { req }: postSystemFactorStatusProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/factor/status`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 上下架
 * @param {any}      [req]           [required]  req
 */

export type postSystemInfoStatusProps = {
  req: InfoStatusReq;
};

export const postSystemInfoStatus = (
  { req }: postSystemInfoStatusProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/info/status`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 启用禁用用户
 * @param {any}      [req]           [required]  req
 */

export type postSystemUserStatusProps = {
  req: UserStatusReq;
};

export const postSystemUserStatus = (
  { req }: postSystemUserStatusProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/user/status`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 切换语言
 * @param {string}   [lang]          [required]  lang
 */

export type getSystemI18nSwitchLangProps = {
  lang: string;
};

export const getSystemI18nSwitchLang = (
  { lang }: getSystemI18nSwitchLangProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象Mapstringstring> => {
  let backendApiUrl = `/system/i18n/switch/${lang}`;

  return axios.request<通用接口返回对象Mapstringstring>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      lang: lang,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织树
 * @param {integer}  [userId]           用户id
 */

export type getSystemOrgTreeProps = {
  userId?: number | null | undefined;
};

export const getSystemOrgTree = (
  { userId }: getSystemOrgTreeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象org树> => {
  let backendApiUrl = `/system/org/tree`;

  return axios.request<通用接口返回对象org树>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      userId: userId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 权限树
 * @param {integer}  [roleId]           角色id
 */

export type getSystemPermissionTreeProps = {
  roleId?: number | null | undefined;
};

export const getSystemPermissionTree = (
  { roleId }: getSystemPermissionTreeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象树> => {
  let backendApiUrl = `/system/permission/tree`;

  return axios.request<通用接口返回对象树>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      roleId: roleId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增单位换算
 * @param {any}      [req]           [required]  req
 */

export type postSystemLibUnitAddProps = {
  req: LibUnitConversionReq;
};

export const postSystemLibUnitAdd = (
  { req }: postSystemLibUnitAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/lib/unit/add`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单位换算比例
 * @param {string}   [unitFrom]      [required]  unitFrom
 * @param {string}   [unitTo]        [required]  unitTo
 */

export type getSystemLibUnitUnitConvertProps = {
  unitFrom: string;
  unitTo: string;
};

export const getSystemLibUnitUnitConvert = (
  { unitFrom, unitTo }: getSystemLibUnitUnitConvertProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象string> => {
  let backendApiUrl = `/system/lib/unit/unitConvert`;

  return axios.request<通用接口返回对象string>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      unitFrom: unitFrom,
      unitTo: unitTo,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除单位换算
 * @param {any}      [req]           [required]  req
 */

export type postSystemLibUnitDeleteProps = {
  req: IdReq;
};

export const postSystemLibUnitDelete = (
  { req }: postSystemLibUnitDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/lib/unit/delete`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑单位换算
 * @param {any}      [req]           [required]  req
 */

export type postSystemLibUnitEditProps = {
  req: LibUnitConversionReq;
};

export const postSystemLibUnitEdit = (
  { req }: postSystemLibUnitEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/lib/unit/edit`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 单位换算列表-分页
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [unit]             单位
 * @param {string}   [unitClass]        单位类别
 */

export type getSystemLibUnitPageProps = {
  pageNum: number;
  pageSize: number;
  unit?: string | null | undefined;
  unitClass?: string | null | undefined;
};

export const getSystemLibUnitPage = (
  { pageNum, pageSize, unit, unitClass }: getSystemLibUnitPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageLibUnitConversion> => {
  let backendApiUrl = `/system/lib/unit/page`;

  return axios.request<通用接口返回对象IPageLibUnitConversion>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pageNum: pageNum,
      pageSize: pageSize,
      unit: unit,
      unitClass: unitClass,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 未读消息数量
 */

export type getSystemMsgUnreadNumProps = {};

export const getSystemMsgUnreadNum = (
  {}: getSystemMsgUnreadNumProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象int> => {
  let backendApiUrl = `/system/msg/unreadNum`;

  return axios.request<通用接口返回对象int>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户详情
 * @param {integer}  [id]            [required]  id
 */

export type getSystemUserUserInfoIdProps = {
  id: number;
};

export const getSystemUserUserInfoId = (
  { id }: getSystemUserUserInfoIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象UserDetailResp> => {
  let backendApiUrl = `/system/user/userInfo/${id}`;

  return axios.request<通用接口返回对象UserDetailResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户所属组织下拉框
 * @param {string}   [likeOrgName]      组织名称
 */

export type getSystemOrgUserListProps = {
  likeOrgName?: string | null | undefined;
};

export const getSystemOrgUserList = (
  { likeOrgName }: getSystemOrgUserListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListOrgPojo> => {
  let backendApiUrl = `/system/org/user/list`;

  return axios.request<通用接口返回对象ListOrgPojo>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeOrgName: likeOrgName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 用户端资讯列表-分页
 * @param {string}   [infoType]         资讯类型
 * @param {string}   [likeTitle]        标题
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getSystemInfoUserPageProps = {
  infoType?: string | null | undefined;
  likeTitle?: string | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getSystemInfoUserPage = (
  { infoType, likeTitle, pageNum, pageSize }: getSystemInfoUserPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象IPageInfo> => {
  let backendApiUrl = `/system/info/user/page`;

  return axios.request<通用接口返回对象IPageInfo>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      infoType: infoType,
      likeTitle: likeTitle,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description cache
 * @param {string}   [key]           [required]  key
 */

export type getSystemCacheKeyProps = {
  key: string;
};

export const getSystemCacheKey = (
  { key }: getSystemCacheKeyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象ListDictEnum> => {
  let backendApiUrl = `/system/cache/${key}`;
  backendApiUrl = backendApiUrl.replace('{key}', encodeURIComponent('' + key));

  return axios.request<通用接口返回对象ListDictEnum>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description core
 */

export type getSystemCoreProps = {};

export const getSystemCore = (
  {}: getSystemCoreProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/system/core`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description flush
 */

export type getSystemFlushProps = {};

export const getSystemFlush = (
  {}: getSystemFlushProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<通用接口返回对象> => {
  let backendApiUrl = `/system/flush`;

  return axios.request<通用接口返回对象>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description health
 */

export type getSystemHealthProps = {};

export const getSystemHealth = (
  {}: getSystemHealthProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<string> => {
  let backendApiUrl = `/system/health`;

  return axios.request<string>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface AppConfig {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataAuditRollback?: '0' | '1';

  emissionStandardEdit?: '0' | '1';

  id?: number;

  type?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface AppConfigReq {
  dataAuditRollback?: '0' | '1';

  emissionStandardEdit?: '0' | '1';

  type?: number;
}

export interface AuditDetailDto {
  auditType?: '1' | '3' | '4';

  companyId?: number;

  nodeList?: AuditNodeDto[];

  orgId?: number;
}

export interface AuditNodeDto {
  auditOrgId?: number;

  configType?: '1' | '2';

  id?: number;

  nodeLevel?: number;

  nodeName?: string;

  targetIds?: number[];
}

export interface AuditReq {
  auditType?: '1' | '3' | '4';

  nodeList?: AuditNodeDto[];

  orgId?: number;
}

export interface AuditResp {
  auditType?: '1' | '3' | '4';

  companyId?: number;

  createBy?: number;

  createTime?: Date;
  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface DefaultPasswordReq {
  newPassword?: string;
}

export interface DictDataReq {
  dictLabel?: string;

  dictSort?: number;

  dictType?: string;

  dictValue?: string;

  id?: number;
}

export interface DictDataResp {
  dictLabel?: string;

  dictSort?: number;

  dictType?: string;

  dictValue?: string;

  id?: number;
}

export interface DictEnum {
  createBy?: number;
  createTime?: Date;

  dictLabel?: string;

  dictSort?: number;

  dictType?: string;

  dictValue?: string;

  id?: number;

  relatedValue?: string;

  remark?: string;

  sourceType?: string;

  status?: string;
  updateBy?: number;
  updateTime?: Date;
}

export interface DictEnumReq {
  dictLabel?: string;

  dictSort?: number;

  dictType?: string;

  dictValue?: string;

  id?: number;

  relatedValue?: string;

  sourceType?: string;
}

export interface DictEnumResp {
  dictLabel?: string;

  dictSort?: number;

  dictType?: string;

  dictValue?: string;

  id?: number;

  relatedValue?: string;

  sourceType?: string;

  sourceTypeName?: string;
}

export interface DictTypeReq {
  dictName?: string;

  dictType?: string;

  id?: number;
}

export interface DictTypeResp {
  dictName?: string;

  dictType?: string;

  id?: number;
}

export interface DownloadLogReq {
  content: string;

  moduleType:
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '16'
    | '17'
    | '18'
    | '30'
    | '40'
    | '50'
    | '60'
    | '70'
    | '80';

  url?: string;
}

export interface EnableStatusReq {
  id?: number;

  status?: '0' | '1';
}

export interface EnumResp {
  code?: number;
  name?: string;
  score?: string;
  subList?: EnumResp[];
}

export interface Factor {
  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  description?: string;

  factorValue?: string;

  firstClassify?: string;

  gasList?: FactorGasRes[];

  id?: number;

  institution?: string;

  name?: string;

  secondClassify?: string;

  source?: string;

  sourceLanguage?: string;

  sourceLanguageName?: string;

  sourceLevel?: string;

  status?: '0' | '1';

  unit?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  url?: string;

  year?: string;
}

export interface FactorGasReq {
  createBy?: number;

  createTime?: Date;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface FactorGasRes {
  createBy?: number;

  createTime?: Date;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  updateBy?: number;

  updateTime?: Date;
  valid?: boolean;
}

export interface FactorReq {
  description?: string;

  firstClassify?: string;

  gasList?: FactorGasReq[];

  id?: number;

  institution?: string;

  name?: string;

  secondClassify?: string;

  source?: string;

  sourceLanguage?: string;

  sourceLanguageName?: string;

  sourceLevel?: string;

  url?: string;

  year?: string;
}

export interface FileLog {
  bizModule?: '2' | '3' | '4' | '6';

  companyId?: number;

  createBy?: number;

  createByName?: string;

  createTime?: Date;

  deleted?: boolean;

  fileName?: string;

  filePath?: string;

  fileStatus?: '-1' | '0' | '1';

  fileUrl?: string;

  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface I18n {
  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  fieldKey?: string;

  fieldName?: string;

  fieldNameEn?: string;

  i18nType?: '1' | '2' | '3';

  id?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface I18nResp {
  fieldKey?: string;

  fieldName?: string;

  i18nType?: '1' | '2' | '3';

  id?: number;

  langList?: SysI18nLang[];
}

export interface IPageAuditResp {
  list?: AuditResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageDictDataResp {
  list?: DictDataResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageDictEnumResp {
  list?: DictEnumResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageDictTypeResp {
  list?: DictTypeResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageFactor {
  list?: Factor[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageFileLog {
  list?: FileLog[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageI18n {
  list?: I18n[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageImportLog {
  list?: ImportLog[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageInfo {
  list?: Info[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageLibUnitConversion {
  list?: LibUnitConversion[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageMsg {
  list?: Msg[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageOperLog {
  list?: OperLog[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageOrg {
  list?: Org[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPagePermission {
  list?: Permission[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageRole {
  list?: Role[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageUserResp {
  list?: UserResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IdReq {
  id: number;
}

export interface ImportLog {
  companyId?: number;

  createBy?: number;

  createByName?: string;

  createTime?: Date;

  doneTime?: Date;

  failedCount?: number;

  failedFileUrl?: string;

  fileName?: string;

  fileUrl?: string;

  id?: number;

  importStatus?: '-1' | '0' | '1';

  importTime?: Date;

  importType?: '1' | '2';

  orgId?: number;

  orgName?: string;

  successCount?: number;

  totalCount?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface Info {
  attachment?: string;

  companyId?: number;

  content?: string;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  infoStatus?: '0' | '1' | '2';

  infoType?: string;

  publishBy?: number;

  publishByName?: string;

  publishTime?: Date;

  title?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface InfoReq {
  attachment?: string;

  content?: string;

  id?: number;

  infoType?: string;

  title?: string;
}

export interface InfoStatusReq {
  id?: number;

  infoStatus?: '0' | '1' | '2';
}

export interface LibUnitConversion {
  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  unitClass?: string;

  unitClassName?: string;

  unitFrom?: string;

  unitFromName?: string;

  unitTo?: string;

  unitToName?: string;

  unitValue?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface LibUnitConversionReq {
  id?: number;

  unitClass?: string;

  unitFrom?: string;

  unitTo?: string;

  unitValue?: string;
}

export interface Msg {
  bizModule?: '2' | '3' | '4' | '6';

  companyId?: number;

  content?: string;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  msgBizType?: '401' | '402' | '403';

  pagePermFlag?: boolean;

  readFlag?: boolean;

  relation?: string;

  updateBy?: number;

  updateTime?: Date;

  userId?: number;
}

export interface OperLog {
  companyId?: number;

  content?: string;

  createBy?: number;

  createTime?: Date;

  id?: number;

  ipAddr?: string;

  moduleType?:
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '16'
    | '17'
    | '18'
    | '30'
    | '40'
    | '50'
    | '60'
    | '70'
    | '80';

  operType?: '1' | '2' | '3';

  realName?: string;
  updateBy?: number;
  updateTime?: Date;

  username?: string;
}

export interface Org {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  orgAbbr?: string;

  orgCode?: string;

  orgInfo?: string;

  orgName?: string;

  orgPath?: string;

  orgType?: '0' | '1' | '2' | '3';

  pid?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface OrgPojo {
  id?: number;

  orgCode?: string;

  orgName?: string;

  orgPath?: string;

  orgType?: '0' | '1' | '2' | '3';

  pid?: number;
}

export interface OrgReq {
  id?: number;

  orgAbbr?: string;

  orgCode?: string;

  orgInfo?: string;

  orgName?: string;

  orgType?: '0' | '1' | '2' | '3';

  pid?: number;
}

export interface OrgTree {
  abbr?: string;
  children?: OrgTree[];

  code?: number;

  level?: number;

  name?: string;

  orgCode?: string;

  orgType?: '0' | '1' | '2' | '3';

  pcode?: number;
  region?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface PasswordReq {
  newPassword?: string;

  oldPassword?: string;
}

export interface Permission {
  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  icon?: string;

  id?: number;

  menuType?: 'C' | 'F' | 'M';

  orderNum?: number;

  path?: string;

  permissionName?: string;

  perms?: string;

  pid?: number;

  remark?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface PermissionResp {
  icon?: string;

  id?: number;

  menuType?: 'C' | 'F' | 'M';

  orderNum?: number;

  path?: string;

  permissionName?: string;

  perms?: string;

  pid?: number;

  remark?: string;
}

export interface Role {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  linkUser?: boolean;

  roleInfo?: string;

  roleName?: string;

  roleType?: '0' | '1';

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface RoleReq {
  allCheckedList?: number[];

  halfCheckedList?: number[];

  id?: number;

  roleInfo?: string;

  roleName?: string;
}

export interface SysI18nLang {
  fieldKey?: string;

  langDict?: string;

  langValue?: string;
}

export interface SysI18nLangReq {
  fieldKey?: string;

  langList?: SysI18nLang[];
}

export interface Tree {
  children?: Tree[];
  code?: number;
  name?: string;
  pcode?: number;
}

export interface User {
  adminFlag?: boolean;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  defaultPassword?: boolean;

  deleted?: boolean;

  email?: string;

  id?: number;

  lastLoginTime?: Date;

  mobile?: string;

  realName?: string;

  updateBy?: number;

  updateTime?: Date;

  userStatus?: '0' | '1';

  username?: string;
}

export interface UserDetailResp {
  email?: string;

  id?: number;

  lastLoginTime?: Date;

  mobile?: string;

  orgList?: Org[];

  orgNames?: string;

  realName?: string;

  roleList?: Role[];

  roleNames?: string;

  userStatus?: '0' | '1';

  username?: string;
}

export interface UserReq {
  email?: string;

  id?: number;

  mobile?: string;

  orgs?: string;

  realName?: string;

  roles?: string;

  username?: string;
}

export interface UserResp {
  adminFlag?: boolean;

  companyId?: number;

  defaultPassword?: boolean;

  deleted?: boolean;

  email?: string;

  id?: number;

  lastLoginTime?: Date;

  mobile?: string;

  orgNames?: string;

  realName?: string;

  roleNames?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  userStatus?: '0' | '1';

  username?: string;
}

export interface UserStatusReq {
  id?: number;

  userStatus?: '0' | '1';
}

export interface org树 {
  allCheckedList?: number[];

  halfCheckedList?: number[];

  tree?: OrgTree[];
}

export interface 树 {
  allCheckedList?: number[];

  halfCheckedList?: number[];

  tree?: Tree[];
}

export interface 通用接口返回对象 {
  code: number;

  data: unknown;

  msg: string;
}

export interface 通用接口返回对象AuditDetailDto {
  code: number;

  data: AuditDetailDto;

  msg: string;
}

export interface 通用接口返回对象Factor {
  code: number;

  data: Factor;

  msg: string;
}

export interface 通用接口返回对象I18nResp {
  code: number;

  data: I18nResp;

  msg: string;
}

export interface 通用接口返回对象IPageAuditResp {
  code: number;

  data: IPageAuditResp;

  msg: string;
}

export interface 通用接口返回对象IPageDictDataResp {
  code: number;

  data: IPageDictDataResp;

  msg: string;
}

export interface 通用接口返回对象IPageDictEnumResp {
  code: number;

  data: IPageDictEnumResp;

  msg: string;
}

export interface 通用接口返回对象IPageDictTypeResp {
  code: number;

  data: IPageDictTypeResp;

  msg: string;
}

export interface 通用接口返回对象IPageFactor {
  code: number;

  data: IPageFactor;

  msg: string;
}

export interface 通用接口返回对象IPageFileLog {
  code: number;

  data: IPageFileLog;

  msg: string;
}

export interface 通用接口返回对象IPageI18n {
  code: number;

  data: IPageI18n;

  msg: string;
}

export interface 通用接口返回对象IPageImportLog {
  code: number;

  data: IPageImportLog;

  msg: string;
}

export interface 通用接口返回对象IPageInfo {
  code: number;

  data: IPageInfo;

  msg: string;
}

export interface 通用接口返回对象IPageLibUnitConversion {
  code: number;

  data: IPageLibUnitConversion;

  msg: string;
}

export interface 通用接口返回对象IPageMsg {
  code: number;

  data: IPageMsg;

  msg: string;
}

export interface 通用接口返回对象IPageOperLog {
  code: number;

  data: IPageOperLog;

  msg: string;
}

export interface 通用接口返回对象IPageOrg {
  code: number;

  data: IPageOrg;

  msg: string;
}

export interface 通用接口返回对象IPagePermission {
  code: number;

  data: IPagePermission;

  msg: string;
}

export interface 通用接口返回对象IPageRole {
  code: number;

  data: IPageRole;

  msg: string;
}

export interface 通用接口返回对象IPageUserResp {
  code: number;

  data: IPageUserResp;

  msg: string;
}

export interface 通用接口返回对象Info {
  code: number;

  data: Info;

  msg: string;
}

export interface 通用接口返回对象ListAppConfig {
  code: number;

  data: AppConfig[];

  msg: string;
}

export interface 通用接口返回对象ListDictEnum {
  code: number;

  data: DictEnum[];

  msg: string;
}

export interface 通用接口返回对象ListEnumResp {
  code: number;

  data: EnumResp[];

  msg: string;
}

export interface 通用接口返回对象ListOrgPojo {
  code: number;

  data: OrgPojo[];

  msg: string;
}

export interface 通用接口返回对象ListPermissionResp {
  code: number;

  data: PermissionResp[];

  msg: string;
}

export interface 通用接口返回对象ListTree {
  code: number;

  data: Tree[];

  msg: string;
}

export interface 通用接口返回对象ListUser {
  code: number;

  data: User[];

  msg: string;
}

export interface 通用接口返回对象Mapstringstring {
  code: number;

  data: { [key: string]: string };

  msg: string;
}

export interface 通用接口返回对象Msg {
  code: number;

  data: Msg;

  msg: string;
}

export interface 通用接口返回对象Org {
  code: number;

  data: Org;

  msg: string;
}

export interface 通用接口返回对象Permission {
  code: number;

  data: Permission;

  msg: string;
}

export interface 通用接口返回对象Role {
  code: number;

  data: Role;

  msg: string;
}

export interface 通用接口返回对象Tree {
  code: number;

  data: Tree;

  msg: string;
}

export interface 通用接口返回对象UserDetailResp {
  code: number;

  data: UserDetailResp;

  msg: string;
}

export interface 通用接口返回对象boolean {
  code: number;

  data: boolean;

  msg: string;
}

export interface 通用接口返回对象int {
  code: number;

  data: number;

  msg: string;
}

export interface 通用接口返回对象org树 {
  code: number;

  data: org树;

  msg: string;
}

export interface 通用接口返回对象string {
  code: number;

  data: string;

  msg: string;
}

export interface 通用接口返回对象树 {
  code: number;

  data: 树;

  msg: string;
}
