/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 新增核算
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationAddProps = {
  req: ComputationReq;
};

export const postComputationComputationAdd = (
  { req }: postComputationComputationAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/computation/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算详情-排放数据列表
 * @param {integer}  [computationId] [required]  核算id
 */

export type getComputationComputationDataListProps = {
  computationId: number;
};

export const getComputationComputationDataList = (
  { computationId }: getComputationComputationDataListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListComputationData> => {
  let backendApiUrl = `/computation/computation/data/list`;

  return axios.request<ApiResultListComputationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationId: computationId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算详情-排放源列表-分页
 * @param {integer}  [computationDataId] [required]  排放数据id。(核算详情-排放数据列表)接口返回
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationComputationDataSourceListProps = {
  computationDataId: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationComputationDataSourceList = (
  {
    computationDataId,
    pageNum,
    pageSize,
  }: getComputationComputationDataSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageEmissionSourceResp> => {
  let backendApiUrl = `/computation/computation/dataSource/list`;

  return axios.request<ApiResultIPageEmissionSourceResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationDataId: computationDataId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除核算
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationDeleteProps = {
  req: IdReq;
};

export const postComputationComputationDelete = (
  { req }: postComputationComputationDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/computation/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationComputationIdProps = {
  id: number;
};

export const getComputationComputationId = (
  { id }: getComputationComputationIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultComputation> => {
  let backendApiUrl = `/computation/computation/${id}`;

  return axios.request<ApiResultComputation>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑核算
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationEditProps = {
  req: ComputationReq;
};

export const postComputationComputationEdit = (
  { req }: postComputationComputationEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/computation/edit`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationEmissionSourceAddProps = {
  req: EmissionSourceBindReq;
};

export const postComputationComputationEmissionSourceAdd = (
  { req }: postComputationComputationEmissionSourceAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/computation/emissionSource/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationComputationEmissionSourceDeleteProps = {
  req: EmissionSourceBindReq;
};

export const postComputationComputationEmissionSourceDelete = (
  { req }: postComputationComputationEmissionSourceDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/computation/emissionSource/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {integer}  [computationId] [required]  核算id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationComputationEmissionSourceListProps = {
  computationId: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationComputationEmissionSourceList = (
  {
    computationId,
    pageNum,
    pageSize,
  }: getComputationComputationEmissionSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageEmissionSource> => {
  let backendApiUrl = `/computation/computation/emissionSource/list`;

  return axios.request<ApiResultIPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationId: computationId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算列表-导出
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [year]             核算年度
 */

export type getComputationComputationExportProps = {
  orgId?: number | null | undefined;
  year?: number | null | undefined;
};

export const getComputationComputationExport = (
  { orgId, year }: getComputationComputationExportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultExport> => {
  let backendApiUrl = `/computation/computation/export`;

  return axios.request<ApiResultExport>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织排放量列表
 * @param {integer}  [id]            [required]  id
 */

export type getComputationComputationOrgEmissionListIdProps = {
  id: number;
};

export const getComputationComputationOrgEmissionListId = (
  { id }: getComputationComputationOrgEmissionListIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListComputationEmissionResp> => {
  let backendApiUrl = `/computation/computation/org/emissionList/${id}`;

  return axios.request<ApiResultListComputationEmissionResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 组织范围
 * @param {integer}  [computationId]    核算id
 * @param {integer}  [orgId]         [required]  组织id
 */

export type getComputationComputationOrgListProps = {
  computationId?: number | null | undefined;
  orgId: number;
};

export const getComputationComputationOrgList = (
  { computationId, orgId }: getComputationComputationOrgListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultorg树> => {
  let backendApiUrl = `/computation/computation/org/list`;

  return axios.request<ApiResultorg树>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      computationId: computationId,
      orgId: orgId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算列表-分页
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [year]             核算年度
 */

export type getComputationComputationPageProps = {
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  year?: number | null | undefined;
};

export const getComputationComputationPage = (
  { orgId, pageNum, pageSize, year }: getComputationComputationPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageComputation> => {
  let backendApiUrl = `/computation/computation/page`;

  return axios.request<ApiResultIPageComputation>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放数据列表-分页
 * @param {string}   [dataStatus]       排放数据状态。0 待填报；1 未填报；2 已填报；3 已撤回；4 审核未通过；5 审核通过；6 审核不通过
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {integer}  [year]             核算年度
 */

export type getComputationDataPageProps = {
  dataStatus?: '0' | '1' | '2' | '3' | '4' | '5' | '6' | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
  year?: number | null | undefined;
};

export const getComputationDataPage = (
  { dataStatus, orgId, pageNum, pageSize, year }: getComputationDataPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageComputationData> => {
  let backendApiUrl = `/computation/data/page`;

  return axios.request<ApiResultIPageComputationData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      dataStatus: dataStatus,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
      year: year,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增控制计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanAddProps = {
  req: ControlPlanReq;
};

export const postComputationControlPlanAdd = (
  { req }: postComputationControlPlanAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceAddProps = {
  req: EmissionSourceReq;
};

export const postComputationEmissionSourceAdd = (
  { req }: postComputationEmissionSourceAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionSource/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增基准年
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionStandardAddProps = {
  req: EmissionStandardReq;
};

export const postComputationEmissionStandardAdd = (
  { req }: postComputationEmissionStandardAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionStandard/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelAddProps = {
  req: ModelReq;
};

export const postComputationModelAdd = (
  { req }: postComputationModelAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/model/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 新增减排场景
 * @param {any}      [req]           [required]  req
 */

export type postComputationReductionSceneAddProps = {
  req: ReductionSceneReq;
};

export const postComputationReductionSceneAdd = (
  { req }: postComputationReductionSceneAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/reductionScene/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制控制计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanCopyProps = {
  req: ControlPlanReq;
};

export const postComputationControlPlanCopy = (
  { req }: postComputationControlPlanCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/copy`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceCopyProps = {
  req: EmissionSourceReq;
};

export const postComputationEmissionSourceCopy = (
  { req }: postComputationEmissionSourceCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionSource/copy`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 复制核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelCopyProps = {
  req: ModelReq;
};

export const postComputationModelCopy = (
  { req }: postComputationModelCopyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/model/copy`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 数据管理计划详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationControlPlanDataIdProps = {
  id: number;
};

export const getComputationControlPlanDataId = (
  { id }: getComputationControlPlanDataIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultControlPlanData> => {
  let backendApiUrl = `/computation/controlPlan/data/${id}`;

  return axios.request<ApiResultControlPlanData>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除控制计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanDeleteProps = {
  req: IdReq;
};

export const postComputationControlPlanDelete = (
  { req }: postComputationControlPlanDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceDeleteProps = {
  req: IdReq;
};

export const postComputationEmissionSourceDelete = (
  { req }: postComputationEmissionSourceDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionSource/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除基准年
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionStandardDeleteProps = {
  req: IdReq;
};

export const postComputationEmissionStandardDelete = (
  { req }: postComputationEmissionStandardDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionStandard/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelDeleteProps = {
  req: IdReq;
};

export const postComputationModelDelete = (
  { req }: postComputationModelDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/model/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 删除减排场景
 * @param {any}      [req]           [required]  req
 */

export type postComputationReductionSceneDeleteProps = {
  req: IdReq;
};

export const postComputationReductionSceneDelete = (
  { req }: postComputationReductionSceneDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/reductionScene/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 控制计划详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationControlPlanIdProps = {
  id: number;
};

export const getComputationControlPlanId = (
  { id }: getComputationControlPlanIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultControlPlanResp> => {
  let backendApiUrl = `/computation/controlPlan/${id}`;

  return axios.request<ApiResultControlPlanResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationEmissionSourceIdProps = {
  id: number;
};

export const getComputationEmissionSourceId = (
  { id }: getComputationEmissionSourceIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultEmissionSource> => {
  let backendApiUrl = `/computation/emissionSource/${id}`;

  return axios.request<ApiResultEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 基准年详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationEmissionStandardIdProps = {
  id: number;
};

export const getComputationEmissionStandardId = (
  { id }: getComputationEmissionStandardIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultEmissionStandard> => {
  let backendApiUrl = `/computation/emissionStandard/${id}`;

  return axios.request<ApiResultEmissionStandard>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算模型详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationModelIdProps = {
  id: number;
};

export const getComputationModelId = (
  { id }: getComputationModelIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultModel> => {
  let backendApiUrl = `/computation/model/${id}`;

  return axios.request<ApiResultModel>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 减排场景详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationReductionSceneIdProps = {
  id: number;
};

export const getComputationReductionSceneId = (
  { id }: getComputationReductionSceneIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultReductionScene> => {
  let backendApiUrl = `/computation/reductionScene/${id}`;

  return axios.request<ApiResultReductionScene>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-组织边界&amp;数据质量管理规定
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditBorderProps = {
  req: ControlPlanEditReq;
};

export const postComputationControlPlanEditBorder = (
  { req }: postComputationControlPlanEditBorderProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/edit/border`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-组织基本信息
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditOrgProps = {
  req: ControlPlanOrgReq;
};

export const postComputationControlPlanEditOrg = (
  { req }: postComputationControlPlanEditOrgProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/edit/org`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-数据管理计划
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditPlanProps = {
  req: ControlPlanDataReq;
};

export const postComputationControlPlanEditPlan = (
  { req }: postComputationControlPlanEditPlanProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/edit/plan`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑排放源
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionSourceEditProps = {
  req: EmissionSourceReq;
};

export const postComputationEmissionSourceEdit = (
  { req }: postComputationEmissionSourceEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionSource/edit`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑基准年
 * @param {any}      [req]           [required]  req
 */

export type postComputationEmissionStandardEditProps = {
  req: EmissionStandardReq;
};

export const postComputationEmissionStandardEdit = (
  { req }: postComputationEmissionStandardEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/emissionStandard/edit`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑核算模型
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelEditProps = {
  req: ModelReq;
};

export const postComputationModelEdit = (
  { req }: postComputationModelEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/model/edit`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑减排场景
 * @param {any}      [req]           [required]  req
 */

export type postComputationReductionSceneEditProps = {
  req: ReductionSceneReq;
};

export const postComputationReductionSceneEdit = (
  { req }: postComputationReductionSceneEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/reductionScene/edit`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 编辑控制计划-版本及修订
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanEditVersionProps = {
  req: ControlPlanReq;
};

export const postComputationControlPlanEditVersion = (
  { req }: postComputationControlPlanEditVersionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/edit/version`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelEmissionSourceAddProps = {
  req: EmissionSourceBindReq;
};

export const postComputationModelEmissionSourceAdd = (
  { req }: postComputationModelEmissionSourceAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/model/emissionSource/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源-删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationModelEmissionSourceDeleteProps = {
  req: EmissionSourceBindReq;
};

export const postComputationModelEmissionSourceDelete = (
  { req }: postComputationModelEmissionSourceDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/model/emissionSource/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {integer}  [modelId]       [required]  核算模型id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationModelEmissionSourceListProps = {
  modelId: number;
  pageNum: number;
  pageSize: number;
};

export const getComputationModelEmissionSourceList = (
  { modelId, pageNum, pageSize }: getComputationModelEmissionSourceListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageEmissionSource> => {
  let backendApiUrl = `/computation/model/emissionSource/list`;

  return axios.request<ApiResultIPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      modelId: modelId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 查询枚举值（忽略大小写）
 * @param {string}   [enumName]      [required]  枚举名
 */

export type getComputationEnumsEnumNameProps = {
  enumName: string;
};

export const getComputationEnumsEnumName = (
  { enumName }: getComputationEnumsEnumNameProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListEnumResp> => {
  let backendApiUrl = `/computation/enums/${enumName}`;

  return axios.request<ApiResultListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      enumName: enumName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description GHG-&gt;ISO映射
 * @param {string}   [ghgCategory]   [required]  GHG分类。1 范围一；2 范围二；3 范围三
 * @param {string}   [ghgClassify]      GHG类别
 */

export type getComputationEnumsRelGhg2isoProps = {
  ghgCategory: '1' | '2' | '3';
  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9'
    | null
    | undefined;
};

export const getComputationEnumsRelGhg2iso = (
  { ghgCategory, ghgClassify }: getComputationEnumsRelGhg2isoProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultClassifyResp> => {
  let backendApiUrl = `/computation/enums/rel/ghg2iso`;

  return axios.request<ApiResultClassifyResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ghgCategory: ghgCategory,
      ghgClassify: ghgClassify,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description GHG类别列表
 * @param {string}   [ghgCategory]   [required]  GHG分类。1 范围一；2 范围二；3 范围三
 */

export type getComputationEnumsGhgClassifyProps = {
  ghgCategory: '1' | '2' | '3';
};

export const getComputationEnumsGhgClassify = (
  { ghgCategory }: getComputationEnumsGhgClassifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListEnumResp> => {
  let backendApiUrl = `/computation/enums/ghgClassify`;

  return axios.request<ApiResultListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ghgCategory: ghgCategory,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description ISO-&gt;GHG映射
 * @param {string}   [isoCategory]   [required]  ISO分类。1 直接排放或清除；2 能源间接排放；3 运输间接排放；4 外购产品或服务间接排放；5 供应链下游排放；6 其他间接排放
 * @param {string}   [isoClassify]      ISO类别
 */

export type getComputationEnumsRelIso2ghgProps = {
  isoCategory: '1' | '2' | '3' | '4' | '5' | '6';
  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9'
    | null
    | undefined;
};

export const getComputationEnumsRelIso2ghg = (
  { isoCategory, isoClassify }: getComputationEnumsRelIso2ghgProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultClassifyResp> => {
  let backendApiUrl = `/computation/enums/rel/iso2ghg`;

  return axios.request<ApiResultClassifyResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      isoCategory: isoCategory,
      isoClassify: isoClassify,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description ISO类别列表
 * @param {string}   [isoCategory]   [required]  ISO分类。1 直接排放或清除；2 能源间接排放；3 运输间接排放；4 外购产品或服务间接排放；5 供应链下游排放；6 其他间接排放
 */

export type getComputationEnumsIsoClassifyProps = {
  isoCategory: '1' | '2' | '3' | '4' | '5' | '6';
};

export const getComputationEnumsIsoClassify = (
  { isoCategory }: getComputationEnumsIsoClassifyProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListEnumResp> => {
  let backendApiUrl = `/computation/enums/isoClassify`;

  return axios.request<ApiResultListEnumResp>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      isoCategory: isoCategory,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 控制计划列表-分页
 * @param {string}   [likeVersion]      版本号
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationControlPlanPageProps = {
  likeVersion?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationControlPlanPage = (
  { likeVersion, orgId, pageNum, pageSize }: getComputationControlPlanPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageControlPlan> => {
  let backendApiUrl = `/computation/controlPlan/page`;

  return axios.request<ApiResultIPageControlPlan>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeVersion: likeVersion,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 排放源列表-分页
 * @param {string}   [ghgCategory]      GHG分类。1 范围一；2 范围二；3 范围三；
 * @param {string}   [isoCategory]      ISO分类。1 直接排放或清除；2 能源间接排放；3 运输间接排放；4 外购产品或服务间接排放；5 供应链下游排放；6 其他间接排放；
 * @param {string}   [likeFacility]     排放设施
 * @param {string}   [likeSourceName]    排放源名称
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 * @param {string}   [sourceCode]       排放源ID
 */

export type getComputationEmissionSourcePageProps = {
  ghgCategory?: '1' | '2' | '3' | null | undefined;
  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6' | null | undefined;
  likeFacility?: string | null | undefined;
  likeSourceName?: string | null | undefined;
  pageNum: number;
  pageSize: number;
  sourceCode?: string | null | undefined;
};

export const getComputationEmissionSourcePage = (
  {
    ghgCategory,
    isoCategory,
    likeFacility,
    likeSourceName,
    pageNum,
    pageSize,
    sourceCode,
  }: getComputationEmissionSourcePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageEmissionSource> => {
  let backendApiUrl = `/computation/emissionSource/page`;

  return axios.request<ApiResultIPageEmissionSource>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ghgCategory: ghgCategory,
      isoCategory: isoCategory,
      likeFacility: likeFacility,
      likeSourceName: likeSourceName,
      pageNum: pageNum,
      pageSize: pageSize,
      sourceCode: sourceCode,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 基准年列表-分页
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationEmissionStandardPageProps = {
  orgId: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationEmissionStandardPage = (
  { orgId, pageNum = 1, pageSize }: getComputationEmissionStandardPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageEmissionStandard> => {
  let backendApiUrl = `/computation/emissionStandard/page`;

  return axios.request<ApiResultIPageEmissionStandard>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 核算模型列表-分页
 * @param {string}   [likeModelName]    模型名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationModelPageProps = {
  likeModelName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationModelPage = (
  { likeModelName, orgId, pageNum, pageSize }: getComputationModelPageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageModel> => {
  let backendApiUrl = `/computation/model/page`;

  return axios.request<ApiResultIPageModel>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      likeModelName: likeModelName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 减排场景列表-分页
 * @param {string}   [ids]              id列表。,分割
 * @param {string}   [likeSceneName]    减排场景名称
 * @param {integer}  [orgId]            组织id
 * @param {integer}  [pageNum]       [required]  页码
 * @param {integer}  [pageSize]      [required]  每页条数
 */

export type getComputationReductionScenePageProps = {
  ids?: string | null | undefined;
  likeSceneName?: string | null | undefined;
  orgId?: number | null | undefined;
  pageNum: number;
  pageSize: number;
};

export const getComputationReductionScenePage = (
  {
    ids,
    likeSceneName,
    orgId,
    pageNum,
    pageSize,
  }: getComputationReductionScenePageProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultIPageReductionScene> => {
  let backendApiUrl = `/computation/reductionScene/page`;

  return axios.request<ApiResultIPageReductionScene>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      ids: ids,
      likeSceneName: likeSceneName,
      orgId: orgId,
      pageNum: pageNum,
      pageSize: pageSize,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-新增
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanProductAddProps = {
  req: ControlPlanProductReq;
};

export const postComputationControlPlanProductAdd = (
  { req }: postComputationControlPlanProductAddProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/product/add`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-删除
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanProductDeleteProps = {
  req: IdReq;
};

export const postComputationControlPlanProductDelete = (
  { req }: postComputationControlPlanProductDeleteProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/product/delete`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-详情
 * @param {integer}  [id]            [required]  id
 */

export type getComputationControlPlanProductIdProps = {
  id: number;
};

export const getComputationControlPlanProductId = (
  { id }: getComputationControlPlanProductIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultControlPlanProduct> => {
  let backendApiUrl = `/computation/controlPlan/product/${id}`;

  return axios.request<ApiResultControlPlanProduct>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-编辑
 * @param {any}      [req]           [required]  req
 */

export type postComputationControlPlanProductEditProps = {
  req: ControlPlanProductReq;
};

export const postComputationControlPlanProductEdit = (
  { req }: postComputationControlPlanProductEditProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/computation/controlPlan/product/edit`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 主营产品-列表
 * @param {integer}  [controlPlanId] [required]  控制计划id
 */

export type getComputationControlPlanProductListControlPlanIdProps = {
  controlPlanId: number;
};

export const getComputationControlPlanProductListControlPlanId = (
  { controlPlanId }: getComputationControlPlanProductListControlPlanIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListControlPlanProduct> => {
  let backendApiUrl = `/computation/controlPlan/product/list/${controlPlanId}`;

  return axios.request<ApiResultListControlPlanProduct>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      controlPlanId: controlPlanId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description gwp列表
 */

export type getComputationLibGwpListProps = {};

export const getComputationLibGwpList = (
  {}: getComputationLibGwpListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultListGwpValueConfigResp> => {
  let backendApiUrl = `/computation/lib/gwp/list`;

  return axios.request<ApiResultListGwpValueConfigResp>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface ApiResult {
  code?: number;
  data?: unknown;
  msg?: string;
}

export interface ApiResultClassifyResp {
  code?: number;
  data?: ClassifyResp;
  msg?: string;
}

export interface ApiResultComputation {
  code?: number;
  data?: Computation;
  msg?: string;
}

export interface ApiResultControlPlanData {
  code?: number;
  data?: ControlPlanData;
  msg?: string;
}

export interface ApiResultControlPlanProduct {
  code?: number;
  data?: ControlPlanProduct;
  msg?: string;
}

export interface ApiResultControlPlanResp {
  code?: number;
  data?: ControlPlanResp;
  msg?: string;
}

export interface ApiResultEmissionSource {
  code?: number;
  data?: EmissionSource;
  msg?: string;
}

export interface ApiResultEmissionStandard {
  code?: number;
  data?: EmissionStandard;
  msg?: string;
}

export interface ApiResultExport {
  code?: number;
  data?: Export;
  msg?: string;
}

export interface ApiResultIPageComputationData {
  code?: number;
  data?: IPageComputationData;
  msg?: string;
}

export interface ApiResultIPageComputation {
  code?: number;
  data?: IPageComputation;
  msg?: string;
}

export interface ApiResultIPageControlPlan {
  code?: number;
  data?: IPageControlPlan;
  msg?: string;
}

export interface ApiResultIPageEmissionSourceResp {
  code?: number;
  data?: IPageEmissionSourceResp;
  msg?: string;
}

export interface ApiResultIPageEmissionSource {
  code?: number;
  data?: IPageEmissionSource;
  msg?: string;
}

export interface ApiResultIPageEmissionStandard {
  code?: number;
  data?: IPageEmissionStandard;
  msg?: string;
}

export interface ApiResultIPageModel {
  code?: number;
  data?: IPageModel;
  msg?: string;
}

export interface ApiResultIPageReductionScene {
  code?: number;
  data?: IPageReductionScene;
  msg?: string;
}

export interface ApiResultListComputationData {
  code?: number;
  data?: ComputationData[];
  msg?: string;
}

export interface ApiResultListComputationEmissionResp {
  code?: number;
  data?: ComputationEmissionResp[];
  msg?: string;
}

export interface ApiResultListControlPlanProduct {
  code?: number;
  data?: ControlPlanProduct[];
  msg?: string;
}

export interface ApiResultListEnumResp {
  code?: number;
  data?: EnumResp[];
  msg?: string;
}

export interface ApiResultListGwpValueConfigResp {
  code?: number;
  data?: GwpValueConfigResp[];
  msg?: string;
}

export interface ApiResultModel {
  code?: number;
  data?: Model;
  msg?: string;
}

export interface ApiResultReductionScene {
  code?: number;
  data?: ReductionScene;
  msg?: string;
}

export interface ApiResultorg树 {
  code?: number;
  data?: org树;
  msg?: string;
}

export interface ClassifyResp {
  categoryCode?: number;

  categoryName?: string;

  classifyCode?: number;

  classifyName?: string;
}

export interface Computation {
  carbonEmission?: number;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataPeriod?: '1' | '2' | '3';

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
  isoCategory_name?: string;
  ghgCategory_name?: string;
  sourceName?: string;
}

export interface ComputationData {
  carbonEmission?: number;

  companyId?: number;

  computationId?: number;

  createBy?: number;

  createTime?: Date;

  dataStatus?: '0' | '1' | '2' | '3' | '4' | '5' | '6';

  dateIdx?: number;

  dateRange?: string;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateTime?: Date;

  year?: number;
}

export interface ComputationEmissionResp {
  carbonEmission?: number;

  orgId?: number;

  orgName?: string;

  year?: number;
}

export interface ComputationReq {
  allCheckedList?: number[];
  createBy?: number;
  createTime?: Date;

  dataPeriod?: '1' | '2' | '3';

  id?: number;

  orgId?: number;
  updateBy?: number;
  updateTime?: Date;

  year?: number;
}

export interface ControlPlan {
  borderChange?: string;

  borderDesc?: string;

  borderMethod?: '1' | '2' | '3';

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataQuality?: string;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  planContent?: string;

  planDate?: string;

  remark?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  version?: string;
}

export interface ControlPlanData {
  activityDesc?: string;

  calculateDesc?: string;

  calculateType?: string;

  categoryDesc?: string;

  classify?: number;

  collectDesc?: string;

  computationFlag?: boolean;

  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  ghgCategory?: '1' | '2' | '3';

  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  id?: number;

  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6';

  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  standardType?: '1' | '2';

  storageDesc?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanDataReq {
  activityDesc?: string;

  calculateDesc?: string;

  calculateType?: string;

  collectDesc?: string;

  computationFlag?: boolean;

  controlPlanId?: number;
  createBy?: number;
  createTime?: Date;

  id?: number;

  storageDesc?: string;
  updateBy?: number;
  updateTime?: Date;
}

export interface ControlPlanEditReq {
  borderChange?: string;

  borderDesc?: string;

  borderMethod?: '1' | '2' | '3';

  dataQuality?: string;

  id?: number;
}

export interface ControlPlanOrg {
  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  deptName?: string;

  gasGroupDesc?: string;

  gasGroupImg?: string;

  id?: number;

  intro?: string;

  orgId?: number;

  planeImg?: string;

  planeImgDesc?: string;

  produceAddress?: string;

  produceArea?: string;

  produceAreaCode?: number;

  produceCodes?: number[];

  regAddress?: string;

  regArea?: string;

  regAreaCode?: number;

  regCodes?: number[];

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanOrgReq {
  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  deptName?: string;

  gasGroupDesc?: string;

  gasGroupImg?: string;
  id?: number;

  intro?: string;

  planeImg?: string;

  planeImgDesc?: string;

  produceAddress?: string;

  produceArea?: string;

  produceAreaCode?: number;

  produceCodes?: number[];

  regAddress?: string;

  regArea?: string;

  regAreaCode?: number;

  regCodes?: number[];

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanProduct {
  controlPlanId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  serviceDesc?: string;

  serviceName?: string;

  serviceUnit?: string;

  updateBy?: number;

  updateTime?: Date;
}

export interface ControlPlanProductReq {
  controlPlanId?: number;
  createBy?: number;
  createTime?: Date;

  id?: number;

  serviceDesc?: string;

  serviceName?: string;

  serviceUnit?: string;
  updateBy?: number;
  updateTime?: Date;
}

export interface ControlPlanReq {
  id?: number;

  orgId?: number;

  planContent?: string;

  planDate?: string;

  remark?: string;

  version?: string;
}

export interface ControlPlanResp {
  borderChange?: string;

  borderDesc?: string;

  borderMethod?: '1' | '2' | '3';

  companyId?: number;
  createBy?: number;
  createTime?: Date;

  dataQuality?: string;

  ghgList?: ControlPlanData[];

  id?: number;

  isoList?: ControlPlanData[];

  org?: ControlPlanOrg;

  orgId?: number;

  planContent?: string;

  planDate?: string;

  productList?: ControlPlanProduct[];

  remark?: string;
  updateBy?: number;
  updateTime?: Date;

  version?: string;
}

export interface EmissionSource {
  activityCategory?: '1' | '2' | '3';

  activityDept?: string;

  activityRecordWay?: string;

  activityScore?: number;

  activityUnit?: string;

  activityUnitName?: string;

  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  facility?: string;

  factorId?: number;

  factorScore?: number;

  factorSource?: string;

  factorType?: '1' | '2' | '3' | '4' | '5' | '6';

  gasList?: EmissionSourceGas[];

  ghgCategory?: '1' | '2' | '3';

  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  id?: number;

  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6';

  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  sourceCode?: string;

  sourceName?: string;

  unitConver?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;

  year?: number;
}

export interface EmissionSourceBindReq {
  emissionSourceIds?: string;

  id?: number;
}

export interface EmissionSourceGas {
  createBy?: number;

  createTime?: Date;

  emissionSourceId?: number;

  factorId?: number;

  factorUnitM?: string;

  factorUnitZ?: string;

  factorValue?: string;

  gas?: string;

  gasType?: string;

  id?: number;

  updateBy?: number;

  updateTime?: Date;
}

export interface EmissionSourceReq {
  activityCategory?: '1' | '2' | '3';

  activityDept?: string;

  activityRecordWay?: string;

  activityUnit?: string;

  facility?: string;

  factorId?: number;

  factorSource?: string;

  factorType?: '1' | '2' | '3' | '4' | '5' | '6';

  gasList?: EmissionSourceGas[];

  ghgCategory?: '1' | '2' | '3';

  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  id?: number;

  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6';

  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  sourceCode?: string;

  sourceName?: string;

  unitConver?: string;

  year?: number;
}

export interface EmissionSourceResp {
  activityCategory?: '1' | '2' | '3';

  activityDept?: string;

  activityRecordWay?: string;

  activityScore?: number;

  activityUnit?: string;

  activityUnitName?: string;

  carbonEmission?: number;

  companyId?: number;

  dataValue?: number;

  facility?: string;

  factorId?: number;

  factorScore?: number;

  factorSource?: string;

  factorType?: '1' | '2' | '3' | '4' | '5' | '6';

  ghgCategory?: '1' | '2' | '3';

  ghgClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  id?: number;

  isoCategory?: '1' | '2' | '3' | '4' | '5' | '6';

  isoClassify?:
    | '1'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17'
    | '18'
    | '19'
    | '2'
    | '20'
    | '21'
    | '22'
    | '23'
    | '24'
    | '25'
    | '26'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9';

  sourceCode?: string;

  sourceName?: string;

  unitConver?: string;

  updateByName?: string;

  year?: number;
}

export interface EmissionStandard {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  dataList?: EmissionStandardData[];

  deleted?: boolean;

  endYear?: number;

  id?: number;

  orgId?: number;

  orgName?: string;

  policy?: string;

  settingType?: '1' | '2';

  standardEmission?: number;

  startYear?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface EmissionStandardData {
  createBy?: number;

  createTime?: Date;

  direct?: number;

  emissionStandardId?: number;

  energy?: number;

  id?: number;

  outsourcing?: number;

  rests?: number;

  scopeOne?: number;

  scopeThree?: number;

  scopeTwo?: number;

  supplyChain?: number;

  total?: number;

  transport?: number;

  updateBy?: number;

  updateTime?: Date;

  year?: number;
}

export interface EmissionStandardReq {
  dataList?: EmissionStandardData[];

  endYear?: number;

  id?: number;

  orgId?: number;

  policy?: string;

  settingType?: '1' | '2';

  startYear?: number;
}

export interface EnumResp {
  code?: number;
  name?: string;
  score?: string;
  subList?: EnumResp[];
}

export interface Export {
  fileName?: string;

  url?: string;
}

export interface GwpValueConfigResp {
  gas?: string;

  gasType?: string;

  gwpValue?: number;
}

export interface IPageComputationData {
  list?: ComputationData[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageComputation {
  list?: Computation[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageControlPlan {
  list?: ControlPlan[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageEmissionSourceResp {
  list?: EmissionSourceResp[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageEmissionSource {
  list?: EmissionSource[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageEmissionStandard {
  list?: EmissionStandard[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageModel {
  list?: Model[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IPageReductionScene {
  list?: ReductionScene[];

  pageNum?: number;

  pageSize?: number;

  pages?: number;

  size?: number;

  total?: number;
}

export interface IdReq {
  id: number;
}

export interface Model {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  intro?: string;

  modelName?: string;

  orgId?: number;

  orgName?: string;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface ModelReq {
  id?: number;

  intro?: string;

  modelName?: string;

  orgId?: number;
}

export interface OrgTree {
  children?: OrgTree[];
  code?: number;

  modelName?: string;
  name?: string;

  orgType?: '0' | '1' | '2' | '3';
  pcode?: number;
}

export interface ReductionScene {
  companyId?: number;

  createBy?: number;

  createTime?: Date;

  deleted?: boolean;

  id?: number;

  orgId?: number;

  orgName?: string;

  sceneDesc?: string;

  sceneName?: string;

  sceneType?: string;

  totalCarbonEmission?: string;

  totalDesc?: string;

  totalEndValue?: number;

  totalLessenType?: '0' | '1';

  totalStartValue?: number;

  totalUnit?: '1' | '2' | '3' | '4' | '5' | '6';

  unitCarbonEmission?: string;

  unitDenominatorUnit?: string;

  unitDesc?: string;

  unitEndValue?: number;

  unitLessenType?: '0' | '1';

  unitNumeratorUnit?: '1' | '2' | '3' | '4' | '5' | '6';

  unitStartValue?: number;

  updateBy?: number;

  updateByName?: string;

  updateTime?: Date;
}

export interface ReductionSceneReq {
  id?: number;

  orgId?: number;

  sceneDesc?: string;

  sceneName?: string;

  sceneType?: string;

  totalDesc?: string;

  totalEndValue?: number;

  totalLessenType?: '0' | '1';

  totalStartValue?: number;

  totalUnit?: '1' | '2' | '3' | '4' | '5' | '6';

  unitDenominatorUnit?: string;

  unitDesc?: string;

  unitEndValue?: number;

  unitLessenType?: '0' | '1';

  unitNumeratorUnit?: '1' | '2' | '3' | '4' | '5' | '6';

  unitStartValue?: number;
}

export interface org树 {
  allCheckedList?: number[];

  halfCheckedList?: number[];

  tree?: OrgTree[];
}
