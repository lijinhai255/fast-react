/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description links
 */

export type getFootprintActuatorProps = {};

export const getFootprintActuator = (
  {}: getFootprintActuatorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<{ [key: string]: { [key: string]: Link } }> => {
  let backendApiUrl = `/footprint/actuator`;

  return axios.request<{ [key: string]: { [key: string]: Link } }>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description handle
 * @param {any}      [body]             body
 */

export type getFootprintActuatorHealthProps = {
  body?: { [key: string]: string } | null | undefined;
};

export const getFootprintActuatorHealth = (
  { body }: getFootprintActuatorHealthProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/footprint/actuator/health`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    data: body,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description handle
 * @param {any}      [body]             body
 */

export type getFootprintActuatorHealthDoubleStarProps = {
  body?: { [key: string]: string } | null | undefined;
};

export const getFootprintActuatorHealthDoubleStar = (
  { body }: getFootprintActuatorHealthDoubleStarProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/footprint/actuator/health/**`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    data: body,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description coreUrl
 */

export type getFootprintCoreProps = {};

export const getFootprintCore = (
  {}: getFootprintCoreProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<unknown> => {
  let backendApiUrl = `/footprint/core`;

  return axios.request<unknown>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description flush
 */

export type getFootprintFlushProps = {};

export const getFootprintFlush = (
  {}: getFootprintFlushProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/footprint/flush`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description health
 */

export type getFootprintHealthProps = {};

export const getFootprintHealth = (
  {}: getFootprintHealthProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<string> => {
  let backendApiUrl = `/footprint/health`;

  return axios.request<string>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type DELETE4fa8c7a29a229e60159792d2219a96f8Props = {};

export const DELETE4fa8c7a29a229e60159792d2219a96f8 = (
  {}: DELETE4fa8c7a29a229e60159792d2219a96f8Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'DELETE',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type getFootprintErrorProps = {};

export const getFootprintError = (
  {}: getFootprintErrorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type HEADd60ebb49ac0843f00d86148518956c02Props = {};

export const HEADd60ebb49ac0843f00d86148518956c02 = (
  {}: HEADd60ebb49ac0843f00d86148518956c02Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'HEAD',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type OPTIONS4a0cd2a7c1826c05f38926f4ac426b45Props = {};

export const OPTIONS4a0cd2a7c1826c05f38926f4ac426b45 = (
  {}: OPTIONS4a0cd2a7c1826c05f38926f4ac426b45Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'OPTIONS',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type PATCH4727c77afb5d3fbc7a9fe898016fcc99Props = {};

export const PATCH4727c77afb5d3fbc7a9fe898016fcc99 = (
  {}: PATCH4727c77afb5d3fbc7a9fe898016fcc99Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'PATCH',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type postFootprintErrorProps = {};

export const postFootprintError = (
  {}: postFootprintErrorProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'POST',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description errorHtml
 */

export type PUT905d9af485d6605a8a8b252091b3f88cProps = {};

export const PUT905d9af485d6605a8a8b252091b3f88c = (
  {}: PUT905d9af485d6605a8a8b252091b3f88cProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ModelAndView> => {
  let backendApiUrl = `/footprint/error`;

  return axios.request<ModelAndView>({
    url: backendApiUrl,
    method: 'PUT',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description delete
 * @param {integer}  [id]            [required]  id
 */

export type DELETE5cf8de156848b3006e55e40547abf292Props = {
  id: number;
};

export const DELETE5cf8de156848b3006e55e40547abf292 = (
  { id }: DELETE5cf8de156848b3006e55e40547abf292Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/fileDownload`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'DELETE',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [fileDownload]  [required]  fileDownload
 */

export type postFootprintFileDownloadProps = {
  fileDownload: FileDownload;
};

export const postFootprintFileDownload = (
  { fileDownload }: postFootprintFileDownloadProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultlong> => {
  let backendApiUrl = `/footprint/fileDownload`;

  return axios.request<ApiResultlong>({
    url: backendApiUrl,
    method: 'POST',
    data: fileDownload,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {string}   [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [delFlag]
 * @param {string}   [fileName]
 * @param {string}   [filePath]
 * @param {integer}  [id]
 * @param {integer}  [orgId]
 * @param {integer}  [page]             page
 * @param {integer}  [reportId]
 * @param {integer}  [size]             size
 * @param {integer}  [status]
 * @param {string}   [updateBy]
 * @param {string}   [updateByName]
 * @param {string}   [updateTime]
 */

export type getFootprintFileDownloadProps = {
  createBy?: string | null | undefined;
  createTime?: Date | null | undefined;
  delFlag?: number | null | undefined;
  fileName?: string | null | undefined;
  filePath?: string | null | undefined;
  id?: number | null | undefined;
  orgId?: number | null | undefined;
  page?: number | null | undefined;
  reportId?: number | null | undefined;
  size?: number | null | undefined;
  status?: number | null | undefined;
  updateBy?: string | null | undefined;
  updateByName?: string | null | undefined;
  updateTime?: Date | null | undefined;
};

export const getFootprintFileDownload = (
  {
    createBy,
    createTime,
    delFlag,
    fileName,
    filePath,
    id,
    orgId,
    page,
    reportId,
    size,
    status,
    updateBy,
    updateByName,
    updateTime,
  }: getFootprintFileDownloadProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageFileDownload> => {
  let backendApiUrl = `/footprint/fileDownload`;

  return axios.request<ApiResultPageFileDownload>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      createBy: createBy,
      createTime: createTime,
      delFlag: delFlag,
      fileName: fileName,
      filePath: filePath,
      id: id,
      orgId: orgId,
      page: page,
      reportId: reportId,
      size: size,
      status: status,
      updateBy: updateBy,
      updateByName: updateByName,
      updateTime: updateTime,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintFileDownloadIdProps = {
  id: string;
};

export const getFootprintFileDownloadId = (
  { id }: getFootprintFileDownloadIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultFileDownload> => {
  let backendApiUrl = `/footprint/fileDownload/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultFileDownload>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [fileDownload]  [required]  fileDownload
 */

export type PUT452d93cf31234adb299fb1c35495fb35Props = {
  fileDownload: FileDownload;
};

export const PUT452d93cf31234adb299fb1c35495fb35 = (
  { fileDownload }: PUT452d93cf31234adb299fb1c35495fb35Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/fileDownload`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: fileDownload,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [fileUpload]    [required]  fileUpload
 */

export type postFootprintFileUploadProps = {
  fileUpload: FileUpload;
};

export const postFootprintFileUpload = (
  { fileUpload }: postFootprintFileUploadProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultFileUpload> => {
  let backendApiUrl = `/footprint/fileUpload`;

  return axios.request<ApiResultFileUpload>({
    url: backendApiUrl,
    method: 'POST',
    data: fileUpload,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {integer}  [companyId]
 * @param {string}   [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [failNum]
 * @param {string}   [failPath]
 * @param {string}   [fileName]
 * @param {string}   [filePath]
 * @param {integer}  [id]
 * @param {integer}  [orgId]
 * @param {string}   [orgName]
 * @param {integer}  [page]             page
 * @param {integer}  [size]             size
 * @param {integer}  [status]
 * @param {integer}  [successNum]
 * @param {integer}  [totalNum]
 * @param {integer}  [type]
 * @param {string}   [updateBy]
 * @param {string}   [updateByName]
 * @param {string}   [updateTime]
 */

export type getFootprintFileUploadProps = {
  companyId?: number | null | undefined;
  createBy?: string | null | undefined;
  createTime?: Date | null | undefined;
  failNum?: number | null | undefined;
  failPath?: string | null | undefined;
  fileName?: string | null | undefined;
  filePath?: string | null | undefined;
  id?: number | null | undefined;
  orgId?: number | null | undefined;
  orgName?: string | null | undefined;
  page?: number | null | undefined;
  size?: number | null | undefined;
  status?: number | null | undefined;
  successNum?: number | null | undefined;
  totalNum?: number | null | undefined;
  type?: number | null | undefined;
  updateBy?: string | null | undefined;
  updateByName?: string | null | undefined;
  updateTime?: Date | null | undefined;
};

export const getFootprintFileUpload = (
  {
    companyId,
    createBy,
    createTime,
    failNum,
    failPath,
    fileName,
    filePath,
    id,
    orgId,
    orgName,
    page,
    size,
    status,
    successNum,
    totalNum,
    type,
    updateBy,
    updateByName,
    updateTime,
  }: getFootprintFileUploadProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageFileUpload> => {
  let backendApiUrl = `/footprint/fileUpload`;

  return axios.request<ApiResultPageFileUpload>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      companyId: companyId,
      createBy: createBy,
      createTime: createTime,
      failNum: failNum,
      failPath: failPath,
      fileName: fileName,
      filePath: filePath,
      id: id,
      orgId: orgId,
      orgName: orgName,
      page: page,
      size: size,
      status: status,
      successNum: successNum,
      totalNum: totalNum,
      type: type,
      updateBy: updateBy,
      updateByName: updateByName,
      updateTime: updateTime,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintFileUploadIdProps = {
  id: string;
};

export const getFootprintFileUploadId = (
  { id }: getFootprintFileUploadIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultFileUpload> => {
  let backendApiUrl = `/footprint/fileUpload/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultFileUpload>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [fileUpload]    [required]  fileUpload
 */

export type PUTf30ba6fd1321eea90666a5bb708162ebProps = {
  fileUpload: FileUpload;
};

export const PUTf30ba6fd1321eea90666a5bb708162eb = (
  { fileUpload }: PUTf30ba6fd1321eea90666a5bb708162ebProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/fileUpload`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: fileUpload,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description uploadFile
 * @param {string}   [file]          [required]  file
 * @param {integer}  [fileId]        [required]  fileId
 * @param {string}   [fileType]      [required]  fileType
 * @param {string}   [productionBusinessId] [required]  productionBusinessId
 */

export type postFootprintFileUploadUploadFileProps = {
  file: string;
  fileId: number;
  fileType: string;
  productionBusinessId: string;
};

export const postFootprintFileUploadUploadFile = (
  {
    file,
    fileId,
    fileType,
    productionBusinessId,
  }: postFootprintFileUploadUploadFileProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultobject> => {
  let backendApiUrl = `/footprint/fileUpload/uploadFile`;

  return axios.request<ApiResultobject>({
    url: backendApiUrl,
    method: 'POST',
    params: serializeQueryParam({
      file: file,
      fileId: fileId,
      fileType: fileType,
      productionBusinessId: productionBusinessId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description delete
 * @param {integer}  [idList]        [required]  idList
 */

export type DELETEa3c82e35b342f9211b72009f96265b07Props = {
  idList: number;
};

export const DELETEa3c82e35b342f9211b72009f96265b07 = (
  { idList }: DELETEa3c82e35b342f9211b72009f96265b07Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/processModel`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'DELETE',
    params: serializeQueryParam({
      idList: idList,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [processModel]  [required]  processModel
 */

export type postFootprintProcessModelProps = {
  processModel: ProcessModel;
};

export const postFootprintProcessModel = (
  { processModel }: postFootprintProcessModelProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/processModel`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'POST',
    data: processModel,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {integer}  [delFlag]
 * @param {integer}  [id]
 * @param {string}   [modelName]
 * @param {integer}  [page]          [required]  page
 * @param {integer}  [parentId]
 * @param {string}   [reportName]
 * @param {integer}  [size]             size
 * @param {integer}  [type]
 */

export type getFootprintProcessModelProps = {
  delFlag?: number | null | undefined;
  id?: number | null | undefined;
  modelName?: string | null | undefined;
  page: number;
  parentId?: number | null | undefined;
  reportName?: string | null | undefined;
  size?: number | null | undefined;
  type?: number | null | undefined;
};

export const getFootprintProcessModel = (
  {
    delFlag,
    id,
    modelName,
    page,
    parentId,
    reportName,
    size,
    type,
  }: getFootprintProcessModelProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageProcessModel> => {
  let backendApiUrl = `/footprint/processModel`;

  return axios.request<ApiResultPageProcessModel>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      delFlag: delFlag,
      id: id,
      modelName: modelName,
      page: page,
      parentId: parentId,
      reportName: reportName,
      size: size,
      type: type,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintProcessModelIdProps = {
  id: string;
};

export const getFootprintProcessModelId = (
  { id }: getFootprintProcessModelIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProcessModel> => {
  let backendApiUrl = `/footprint/processModel/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultProcessModel>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [processModel]  [required]  processModel
 */

export type PUT80cfec8fa4d96dfc5189826babf804a3Props = {
  processModel: ProcessModel;
};

export const PUT80cfec8fa4d96dfc5189826babf804a3 = (
  { processModel }: PUT80cfec8fa4d96dfc5189826babf804a3Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/processModel`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: processModel,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description companyList
 * @param {string}   [companyName]      companyName
 */

export type getFootprintProductionCompanyListProps = {
  companyName?: string | null | undefined;
};

export const getFootprintProductionCompanyList = (
  { companyName }: getFootprintProductionCompanyListProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultList> => {
  let backendApiUrl = `/footprint/production/companyList`;

  return axios.request<ApiResultList>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      companyName: companyName,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description deleteExists
 * @param {integer}  [id]            [required]  id
 */

export type getFootprintProductionDeleteExistsProps = {
  id: number;
};

export const getFootprintProductionDeleteExists = (
  { id }: getFootprintProductionDeleteExistsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/production/deleteExists`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description delete
 * @param {integer}  [id]            [required]  id
 */

export type deleteFootprintProductionProps = {
  id: number;
};

export const deleteFootprintProduction = (
  { id }: deleteFootprintProductionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/production`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'DELETE',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [production]    [required]  production
 */

export type postFootprintProductionProps = {
  production: Production;
};

export const postFootprintProduction = (
  { production }: postFootprintProductionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProduction> => {
  let backendApiUrl = `/footprint/production`;

  return axios.request<ApiResultProduction>({
    url: backendApiUrl,
    method: 'POST',
    data: production,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {string}   [basicUnit]
 * @param {integer}  [companyId]
 * @param {string}   [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [delFlag]
 * @param {string}   [description]
 * @param {integer}  [id]            [required]
 * @param {integer}  [orgId]         [required]
 * @param {string}   [orgName]
 * @param {integer}  [page]             page
 * @param {string}   [productionCode] [required]
 * @param {string}   [productionName] [required]
 * @param {integer}  [size]             size
 * @param {integer}  [status]
 * @param {string}   [technological]
 * @param {string}   [technologicalMsg]
 * @param {string}   [updateBy]
 * @param {string}   [updateByName]
 * @param {string}   [updateTime]
 */

export type getFootprintProductionProps = {
  basicUnit?: string | null | undefined;
  companyId?: number | null | undefined;
  createBy?: string | null | undefined;
  createTime?: Date | null | undefined;
  delFlag?: number | null | undefined;
  description?: string | null | undefined;
  id: number;
  orgId: number;
  orgName?: string | null | undefined;
  page?: number | null | undefined;
  productionCode: string;
  productionName: string;
  size?: number | null | undefined;
  status?: number | null | undefined;
  technological?: string | null | undefined;
  technologicalMsg?: string | null | undefined;
  updateBy?: string | null | undefined;
  updateByName?: string | null | undefined;
  updateTime?: Date | null | undefined;
};

export const getFootprintProduction = (
  {
    basicUnit,
    companyId,
    createBy,
    createTime,
    delFlag,
    description,
    id,
    orgId,
    orgName,
    page,
    productionCode,
    productionName,
    size,
    status,
    technological,
    technologicalMsg,
    updateBy,
    updateByName,
    updateTime,
  }: getFootprintProductionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageProduction> => {
  let backendApiUrl = `/footprint/production`;

  return axios.request<ApiResultPageProduction>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      basicUnit: basicUnit,
      companyId: companyId,
      createBy: createBy,
      createTime: createTime,
      delFlag: delFlag,
      description: description,
      id: id,
      orgId: orgId,
      orgName: orgName,
      page: page,
      productionCode: productionCode,
      productionName: productionName,
      size: size,
      status: status,
      technological: technological,
      technologicalMsg: technologicalMsg,
      updateBy: updateBy,
      updateByName: updateByName,
      updateTime: updateTime,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintProductionIdProps = {
  id: string;
};

export const getFootprintProductionId = (
  { id }: getFootprintProductionIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProduction> => {
  let backendApiUrl = `/footprint/production/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultProduction>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [production]    [required]  production
 */

export type putFootprintProductionProps = {
  production: Production;
};

export const putFootprintProduction = (
  { production }: putFootprintProductionProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/production`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: production,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description delete
 * @param {integer}  [id]            [required]  id
 */

export type DELETE4e5b6d36de8eda619086b4551bf5b679Props = {
  id: number;
};

export const DELETE4e5b6d36de8eda619086b4551bf5b679 = (
  { id }: DELETE4e5b6d36de8eda619086b4551bf5b679Props,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/productionBusiness`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'DELETE',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [productionBusiness] [required]  productionBusiness
 */

export type postFootprintProductionBusinessProps = {
  productionBusiness: ProductionBusiness;
};

export const postFootprintProductionBusiness = (
  { productionBusiness }: postFootprintProductionBusinessProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProductionBusiness> => {
  let backendApiUrl = `/footprint/productionBusiness`;

  return axios.request<ApiResultProductionBusiness>({
    url: backendApiUrl,
    method: 'POST',
    data: productionBusiness,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {string}   [beginDate]     [required]
 * @param {number}   [checkCount]    [required]
 * @param {string}   [checkUnit]     [required]
 * @param {integer}  [companyId]
 * @param {string}   [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [delFlag]
 * @param {string}   [discharge]
 * @param {string}   [dischargeRate]
 * @param {string}   [endTime]       [required]
 * @param {string}   [functionalUnit] [required]
 * @param {integer}  [id]            [required]
 * @param {string}   [operateMsg]
 * @param {integer}  [orgId]
 * @param {string}   [orgName]
 * @param {integer}  [page]             page
 * @param {string}   [productionCode]
 * @param {integer}  [productionId]  [required]
 * @param {string}   [productionName]
 * @param {integer}  [size]             size
 * @param {integer}  [status]
 * @param {string}   [technological]
 * @param {integer}  [type]          [required]
 * @param {string}   [unitCode]
 * @param {string}   [updateBy]
 * @param {string}   [updateByName]
 * @param {string}   [updateTime]
 */

export type getFootprintProductionBusinessProps = {
  beginDate: Date;
  checkCount: number;
  checkUnit: string;
  companyId?: number | null | undefined;
  createBy?: string | null | undefined;
  createTime?: Date | null | undefined;
  delFlag?: number | null | undefined;
  discharge?: string | null | undefined;
  dischargeRate?: string | null | undefined;
  endTime: Date;
  functionalUnit: string;
  id: number;
  operateMsg?: string | null | undefined;
  orgId?: number | null | undefined;
  orgName?: string | null | undefined;
  page?: number | null | undefined;
  productionCode?: string | null | undefined;
  productionId: number;
  productionName?: string | null | undefined;
  size?: number | null | undefined;
  status?: number | null | undefined;
  technological?: string | null | undefined;
  type: number;
  unitCode?: string | null | undefined;
  updateBy?: string | null | undefined;
  updateByName?: string | null | undefined;
  updateTime?: Date | null | undefined;
};

export const getFootprintProductionBusiness = (
  {
    beginDate,
    checkCount,
    checkUnit,
    companyId,
    createBy,
    createTime,
    delFlag,
    discharge,
    dischargeRate,
    endTime,
    functionalUnit,
    id,
    operateMsg,
    orgId,
    orgName,
    page,
    productionCode,
    productionId,
    productionName,
    size,
    status,
    technological,
    type,
    unitCode,
    updateBy,
    updateByName,
    updateTime,
  }: getFootprintProductionBusinessProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageProductionBusiness> => {
  let backendApiUrl = `/footprint/productionBusiness`;

  return axios.request<ApiResultPageProductionBusiness>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      beginDate: beginDate,
      checkCount: checkCount,
      checkUnit: checkUnit,
      companyId: companyId,
      createBy: createBy,
      createTime: createTime,
      delFlag: delFlag,
      discharge: discharge,
      dischargeRate: dischargeRate,
      endTime: endTime,
      functionalUnit: functionalUnit,
      id: id,
      operateMsg: operateMsg,
      orgId: orgId,
      orgName: orgName,
      page: page,
      productionCode: productionCode,
      productionId: productionId,
      productionName: productionName,
      size: size,
      status: status,
      technological: technological,
      type: type,
      unitCode: unitCode,
      updateBy: updateBy,
      updateByName: updateByName,
      updateTime: updateTime,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintProductionBusinessIdProps = {
  id: string;
};

export const getFootprintProductionBusinessId = (
  { id }: getFootprintProductionBusinessIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProductionBusiness> => {
  let backendApiUrl = `/footprint/productionBusiness/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultProductionBusiness>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [productionBusiness] [required]  productionBusiness
 */

export type putFootprintProductionBusinessProps = {
  productionBusiness: ProductionBusiness;
};

export const putFootprintProductionBusiness = (
  { productionBusiness }: putFootprintProductionBusinessProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/productionBusiness`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: productionBusiness,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description delete
 * @param {integer}  [id]            [required]  id
 */

export type deleteFootprintProductionMaterialsProps = {
  id: number;
};

export const deleteFootprintProductionMaterials = (
  { id }: deleteFootprintProductionMaterialsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/productionMaterials`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'DELETE',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description downMaterials
 * @param {integer}  [pbId]             pbId
 */

export type getFootprintProductionMaterialsDownMaterialsProps = {
  pbId?: number | null | undefined;
};

export const getFootprintProductionMaterialsDownMaterials = (
  { pbId }: getFootprintProductionMaterialsDownMaterialsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultobject> => {
  let backendApiUrl = `/footprint/productionMaterials/downMaterials`;

  return axios.request<ApiResultobject>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      pbId: pbId,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [productionMaterials] [required]  productionMaterials
 */

export type postFootprintProductionMaterialsProps = {
  productionMaterials: ProductionMaterials;
};

export const postFootprintProductionMaterials = (
  { productionMaterials }: postFootprintProductionMaterialsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProductionMaterials> => {
  let backendApiUrl = `/footprint/productionMaterials`;

  return axios.request<ApiResultProductionMaterials>({
    url: backendApiUrl,
    method: 'POST',
    data: productionMaterials,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {string}   [backingMaterial]
 * @param {string}   [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [delFlag]
 * @param {string}   [discharge]
 * @param {number}   [distance]
 * @param {integer}  [factorId]
 * @param {string}   [factorName]
 * @param {string}   [factorSource]
 * @param {integer}  [factorType]
 * @param {string}   [factorUnit]
 * @param {string}   [factorValue]
 * @param {string}   [factorYear]
 * @param {string}   [formula]
 * @param {integer}  [id]            [required]
 * @param {string}   [maMeasure]
 * @param {string}   [materialName]
 * @param {string}   [materialsType]
 * @param {string}   [measureCode]
 * @param {integer}  [orgId]
 * @param {integer}  [page]             page
 * @param {string}   [percentMeasure]
 * @param {integer}  [processModelId]
 * @param {integer}  [processModelParentId]
 * @param {integer}  [productionBusinessId] [required]
 * @param {integer}  [size]             size
 * @param {integer}  [status]
 * @param {integer}  [type]
 * @param {string}   [unitCode]
 * @param {string}   [updateBy]
 * @param {string}   [updateTime]
 * @param {number}   [weight]
 */

export type getFootprintProductionMaterialsProps = {
  backingMaterial?: string | null | undefined;
  createBy?: string | null | undefined;
  createTime?: Date | null | undefined;
  delFlag?: number | null | undefined;
  discharge?: string | null | undefined;
  distance?: number | null | undefined;
  factorId?: number | null | undefined;
  factorName?: string | null | undefined;
  factorSource?: string | null | undefined;
  factorType?: number | null | undefined;
  factorUnit?: string | null | undefined;
  factorValue?: string | null | undefined;
  factorYear?: string | null | undefined;
  formula?: string | null | undefined;
  id: number;
  maMeasure?: string | null | undefined;
  materialName?: string | null | undefined;
  materialsType?: string | null | undefined;
  measureCode?: string | null | undefined;
  orgId?: number | null | undefined;
  page?: number | null | undefined;
  percentMeasure?: string | null | undefined;
  processModelId?: number | null | undefined;
  processModelParentId?: number | null | undefined;
  productionBusinessId: number;
  size?: number | null | undefined;
  status?: number | null | undefined;
  type?: number | null | undefined;
  unitCode?: string | null | undefined;
  updateBy?: string | null | undefined;
  updateTime?: Date | null | undefined;
  weight?: number | null | undefined;
};

export const getFootprintProductionMaterials = (
  {
    backingMaterial,
    createBy,
    createTime,
    delFlag,
    discharge,
    distance,
    factorId,
    factorName,
    factorSource,
    factorType,
    factorUnit,
    factorValue,
    factorYear,
    formula,
    id,
    maMeasure,
    materialName,
    materialsType,
    measureCode,
    orgId,
    page,
    percentMeasure,
    processModelId,
    processModelParentId,
    productionBusinessId,
    size,
    status,
    type,
    unitCode,
    updateBy,
    updateTime,
    weight,
  }: getFootprintProductionMaterialsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageProductionMaterials> => {
  let backendApiUrl = `/footprint/productionMaterials`;

  return axios.request<ApiResultPageProductionMaterials>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      backingMaterial: backingMaterial,
      createBy: createBy,
      createTime: createTime,
      delFlag: delFlag,
      discharge: discharge,
      distance: distance,
      factorId: factorId,
      factorName: factorName,
      factorSource: factorSource,
      factorType: factorType,
      factorUnit: factorUnit,
      factorValue: factorValue,
      factorYear: factorYear,
      formula: formula,
      id: id,
      maMeasure: maMeasure,
      materialName: materialName,
      materialsType: materialsType,
      measureCode: measureCode,
      orgId: orgId,
      page: page,
      percentMeasure: percentMeasure,
      processModelId: processModelId,
      processModelParentId: processModelParentId,
      productionBusinessId: productionBusinessId,
      size: size,
      status: status,
      type: type,
      unitCode: unitCode,
      updateBy: updateBy,
      updateTime: updateTime,
      weight: weight,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintProductionMaterialsIdProps = {
  id: string;
};

export const getFootprintProductionMaterialsId = (
  { id }: getFootprintProductionMaterialsIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultProductionMaterials> => {
  let backendApiUrl = `/footprint/productionMaterials/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultProductionMaterials>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [productionMaterials] [required]  productionMaterials
 */

export type putFootprintProductionMaterialsProps = {
  productionMaterials: ProductionMaterials;
};

export const putFootprintProductionMaterials = (
  { productionMaterials }: putFootprintProductionMaterialsProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/productionMaterials`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: productionMaterials,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description delete
 * @param {integer}  [id]            [required]  id
 */

export type deleteFootprintReportProps = {
  id: number;
};

export const deleteFootprintReport = (
  { id }: deleteFootprintReportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/report`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'DELETE',
    params: serializeQueryParam({
      id: id,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description insert
 * @param {any}      [report]        [required]  report
 */

export type postFootprintReportProps = {
  report: Report;
};

export const postFootprintReport = (
  { report }: postFootprintReportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultReport> => {
  let backendApiUrl = `/footprint/report`;

  return axios.request<ApiResultReport>({
    url: backendApiUrl,
    method: 'POST',
    data: report,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectAll
 * @param {string}   [beginDate]
 * @param {string}   [carbonMsg]
 * @param {integer}  [companyId]
 * @param {string}   [createBy]
 * @param {string}   [createTime]
 * @param {integer}  [delFlag]
 * @param {string}   [endTime]
 * @param {string}   [functionalUnit]
 * @param {integer}  [id]
 * @param {integer}  [orgId]
 * @param {string}   [orgMsg]
 * @param {string}   [orgName]
 * @param {integer}  [page]             page
 * @param {integer}  [productionBusinessId]
 * @param {string}   [productionCode]
 * @param {string}   [productionName]
 * @param {string}   [reportActive0_activeLevel]   (API name: reportActive[0].activeLevel)
 * @param {integer}  [reportActive0_activeType]   (API name: reportActive[0].activeType)
 * @param {string}   [reportActive0_createBy]   (API name: reportActive[0].createBy)
 * @param {string}   [reportActive0_createTime]   (API name: reportActive[0].createTime)
 * @param {integer}  [reportActive0_delFlag]   (API name: reportActive[0].delFlag)
 * @param {integer}  [reportActive0_id]   (API name: reportActive[0].id)
 * @param {integer}  [reportActive0_modelId]   (API name: reportActive[0].modelId)
 * @param {string}   [reportActive0_modelName]   (API name: reportActive[0].modelName)
 * @param {string}   [reportActive0_msg]   (API name: reportActive[0].msg)
 * @param {integer}  [reportActive0_reportId]   (API name: reportActive[0].reportId)
 * @param {integer}  [reportActive0_score]   (API name: reportActive[0].score)
 * @param {string}   [reportActive0_updateBy]   (API name: reportActive[0].updateBy)
 * @param {string}   [reportActive0_updateTime]   (API name: reportActive[0].updateTime)
 * @param {integer}  [reportFactor0_accuracyScore]   (API name: reportFactor[0].accuracyScore)
 * @param {string}   [reportFactor0_createBy]   (API name: reportFactor[0].createBy)
 * @param {string}   [reportFactor0_createTime]   (API name: reportFactor[0].createTime)
 * @param {integer}  [reportFactor0_dataAccuracy]   (API name: reportFactor[0].dataAccuracy)
 * @param {integer}  [reportFactor0_delFlag]   (API name: reportFactor[0].delFlag)
 * @param {integer}  [reportFactor0_id]   (API name: reportFactor[0].id)
 * @param {integer}  [reportFactor0_methodology]   (API name: reportFactor[0].methodology)
 * @param {integer}  [reportFactor0_methodScore]   (API name: reportFactor[0].methodScore)
 * @param {integer}  [reportFactor0_modelId]   (API name: reportFactor[0].modelId)
 * @param {string}   [reportFactor0_modelName]   (API name: reportFactor[0].modelName)
 * @param {string}   [reportFactor0_msg]   (API name: reportFactor[0].msg)
 * @param {integer}  [reportFactor0_reportId]   (API name: reportFactor[0].reportId)
 * @param {integer}  [reportFactor0_technologyCorrelation]   (API name: reportFactor[0].technologyCorrelation)
 * @param {integer}  [reportFactor0_technologyScore]   (API name: reportFactor[0].technologyScore)
 * @param {integer}  [reportFactor0_timeCorrelation]   (API name: reportFactor[0].timeCorrelation)
 * @param {integer}  [reportFactor0_timeScore]   (API name: reportFactor[0].timeScore)
 * @param {string}   [reportFactor0_updateBy]   (API name: reportFactor[0].updateBy)
 * @param {string}   [reportFactor0_updateTime]   (API name: reportFactor[0].updateTime)
 * @param {integer}  [reportFactor0_zoneCorrelation]   (API name: reportFactor[0].zoneCorrelation)
 * @param {integer}  [reportFactor0_zoneScore]   (API name: reportFactor[0].zoneScore)
 * @param {string}   [reportName]
 * @param {integer}  [size]             size
 * @param {string}   [updateBy]
 * @param {string}   [updateByName]
 * @param {string}   [updateTime]
 */

export type getFootprintReportProps = {
  beginDate?: Date | null | undefined;
  carbonMsg?: string | null | undefined;
  companyId?: number | null | undefined;
  createBy?: string | null | undefined;
  createTime?: Date | null | undefined;
  delFlag?: number | null | undefined;
  endTime?: Date | null | undefined;
  functionalUnit?: string | null | undefined;
  id?: number | null | undefined;
  orgId?: number | null | undefined;
  orgMsg?: string | null | undefined;
  orgName?: string | null | undefined;
  page?: number | null | undefined;
  productionBusinessId?: number | null | undefined;
  productionCode?: string | null | undefined;
  productionName?: string | null | undefined;
  reportActive0_activeLevel?: string | null | undefined;
  reportActive0_activeType?: number | null | undefined;
  reportActive0_createBy?: string | null | undefined;
  reportActive0_createTime?: Date | null | undefined;
  reportActive0_delFlag?: number | null | undefined;
  reportActive0_id?: number | null | undefined;
  reportActive0_modelId?: number | null | undefined;
  reportActive0_modelName?: string | null | undefined;
  reportActive0_msg?: string | null | undefined;
  reportActive0_reportId?: number | null | undefined;
  reportActive0_score?: number | null | undefined;
  reportActive0_updateBy?: string | null | undefined;
  reportActive0_updateTime?: Date | null | undefined;
  reportFactor0_accuracyScore?: number | null | undefined;
  reportFactor0_createBy?: string | null | undefined;
  reportFactor0_createTime?: Date | null | undefined;
  reportFactor0_dataAccuracy?: number | null | undefined;
  reportFactor0_delFlag?: number | null | undefined;
  reportFactor0_id?: number | null | undefined;
  reportFactor0_methodology?: number | null | undefined;
  reportFactor0_methodScore?: number | null | undefined;
  reportFactor0_modelId?: number | null | undefined;
  reportFactor0_modelName?: string | null | undefined;
  reportFactor0_msg?: string | null | undefined;
  reportFactor0_reportId?: number | null | undefined;
  reportFactor0_technologyCorrelation?: number | null | undefined;
  reportFactor0_technologyScore?: number | null | undefined;
  reportFactor0_timeCorrelation?: number | null | undefined;
  reportFactor0_timeScore?: number | null | undefined;
  reportFactor0_updateBy?: string | null | undefined;
  reportFactor0_updateTime?: Date | null | undefined;
  reportFactor0_zoneCorrelation?: number | null | undefined;
  reportFactor0_zoneScore?: number | null | undefined;
  reportName?: string | null | undefined;
  size?: number | null | undefined;
  updateBy?: string | null | undefined;
  updateByName?: string | null | undefined;
  updateTime?: Date | null | undefined;
};

export const getFootprintReport = (
  {
    beginDate,
    carbonMsg,
    companyId,
    createBy,
    createTime,
    delFlag,
    endTime,
    functionalUnit,
    id,
    orgId,
    orgMsg,
    orgName,
    page,
    productionBusinessId,
    productionCode,
    productionName,
    reportActive0_activeLevel,
    reportActive0_activeType,
    reportActive0_createBy,
    reportActive0_createTime,
    reportActive0_delFlag,
    reportActive0_id,
    reportActive0_modelId,
    reportActive0_modelName,
    reportActive0_msg,
    reportActive0_reportId,
    reportActive0_score,
    reportActive0_updateBy,
    reportActive0_updateTime,
    reportFactor0_accuracyScore,
    reportFactor0_createBy,
    reportFactor0_createTime,
    reportFactor0_dataAccuracy,
    reportFactor0_delFlag,
    reportFactor0_id,
    reportFactor0_methodology,
    reportFactor0_methodScore,
    reportFactor0_modelId,
    reportFactor0_modelName,
    reportFactor0_msg,
    reportFactor0_reportId,
    reportFactor0_technologyCorrelation,
    reportFactor0_technologyScore,
    reportFactor0_timeCorrelation,
    reportFactor0_timeScore,
    reportFactor0_updateBy,
    reportFactor0_updateTime,
    reportFactor0_zoneCorrelation,
    reportFactor0_zoneScore,
    reportName,
    size,
    updateBy,
    updateByName,
    updateTime,
  }: getFootprintReportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultPageReport> => {
  let backendApiUrl = `/footprint/report`;

  return axios.request<ApiResultPageReport>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      beginDate: beginDate,
      carbonMsg: carbonMsg,
      companyId: companyId,
      createBy: createBy,
      createTime: createTime,
      delFlag: delFlag,
      endTime: endTime,
      functionalUnit: functionalUnit,
      id: id,
      orgId: orgId,
      orgMsg: orgMsg,
      orgName: orgName,
      page: page,
      productionBusinessId: productionBusinessId,
      productionCode: productionCode,
      productionName: productionName,
      'reportActive[0].activeLevel': reportActive0_activeLevel,
      'reportActive[0].activeType': reportActive0_activeType,
      'reportActive[0].createBy': reportActive0_createBy,
      'reportActive[0].createTime': reportActive0_createTime,
      'reportActive[0].delFlag': reportActive0_delFlag,
      'reportActive[0].id': reportActive0_id,
      'reportActive[0].modelId': reportActive0_modelId,
      'reportActive[0].modelName': reportActive0_modelName,
      'reportActive[0].msg': reportActive0_msg,
      'reportActive[0].reportId': reportActive0_reportId,
      'reportActive[0].score': reportActive0_score,
      'reportActive[0].updateBy': reportActive0_updateBy,
      'reportActive[0].updateTime': reportActive0_updateTime,
      'reportFactor[0].accuracyScore': reportFactor0_accuracyScore,
      'reportFactor[0].createBy': reportFactor0_createBy,
      'reportFactor[0].createTime': reportFactor0_createTime,
      'reportFactor[0].dataAccuracy': reportFactor0_dataAccuracy,
      'reportFactor[0].delFlag': reportFactor0_delFlag,
      'reportFactor[0].id': reportFactor0_id,
      'reportFactor[0].methodology': reportFactor0_methodology,
      'reportFactor[0].methodScore': reportFactor0_methodScore,
      'reportFactor[0].modelId': reportFactor0_modelId,
      'reportFactor[0].modelName': reportFactor0_modelName,
      'reportFactor[0].msg': reportFactor0_msg,
      'reportFactor[0].reportId': reportFactor0_reportId,
      'reportFactor[0].technologyCorrelation':
        reportFactor0_technologyCorrelation,
      'reportFactor[0].technologyScore': reportFactor0_technologyScore,
      'reportFactor[0].timeCorrelation': reportFactor0_timeCorrelation,
      'reportFactor[0].timeScore': reportFactor0_timeScore,
      'reportFactor[0].updateBy': reportFactor0_updateBy,
      'reportFactor[0].updateTime': reportFactor0_updateTime,
      'reportFactor[0].zoneCorrelation': reportFactor0_zoneCorrelation,
      'reportFactor[0].zoneScore': reportFactor0_zoneScore,
      reportName: reportName,
      size: size,
      updateBy: updateBy,
      updateByName: updateByName,
      updateTime: updateTime,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description selectOne
 * @param {string}   [id]            [required]  id
 */

export type getFootprintReportIdProps = {
  id: string;
};

export const getFootprintReportId = (
  { id }: getFootprintReportIdProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultReport> => {
  let backendApiUrl = `/footprint/report/${id}`;
  backendApiUrl = backendApiUrl.replace('{id}', encodeURIComponent('' + id));

  return axios.request<ApiResultReport>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description update
 * @param {any}      [report]        [required]  report
 */

export type putFootprintReportProps = {
  report: Report;
};

export const putFootprintReport = (
  { report }: putFootprintReportProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultboolean> => {
  let backendApiUrl = `/footprint/report`;

  return axios.request<ApiResultboolean>({
    url: backendApiUrl,
    method: 'PUT',
    data: report,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface ApiResult {
  code?: number;
  data?: unknown;
  msg?: string;
}

export interface ApiResultFileDownload {
  code?: number;
  data?: FileDownload;
  msg?: string;
}

export interface ApiResultFileUpload {
  code?: number;
  data?: FileUpload;
  msg?: string;
}

export interface ApiResultList {
  code?: number;
  data?: unknown[];
  msg?: string;
}

export interface ApiResultPageFileDownload {
  code?: number;
  data?: PageFileDownload;
  msg?: string;
}

export interface ApiResultPageFileUpload {
  code?: number;
  data?: PageFileUpload;
  msg?: string;
}

export interface ApiResultPageProcessModel {
  code?: number;
  data?: PageProcessModel;
  msg?: string;
}

export interface ApiResultPageProductionBusiness {
  code?: number;
  data?: PageProductionBusiness;
  msg?: string;
}

export interface ApiResultPageProductionMaterials {
  code?: number;
  data?: PageProductionMaterials;
  msg?: string;
}

export interface ApiResultPageProduction {
  code?: number;
  data?: PageProduction;
  msg?: string;
}

export interface ApiResultPageReport {
  code?: number;
  data?: PageReport;
  msg?: string;
}

export interface ApiResultProcessModel {
  code?: number;
  data?: ProcessModel;
  msg?: string;
}

export interface ApiResultProductionBusiness {
  code?: number;
  data?: ProductionBusiness;
  msg?: string;
}

export interface ApiResultProductionMaterials {
  code?: number;
  data?: ProductionMaterials;
  msg?: string;
}

export interface ApiResultProduction {
  code?: number;
  data?: Production;
  msg?: string;
}

export interface ApiResultReport {
  code?: number;
  data?: Report;
  msg?: string;
}

export interface ApiResultboolean {
  code?: number;
  data?: boolean;
  msg?: string;
}

export interface ApiResultlong {
  code?: number;
  data?: number;
  msg?: string;
}

export interface ApiResultobject {
  code?: number;
  data?: unknown;
  msg?: string;
}

export interface FileDownload {
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  fileName?: string;
  filePath?: string;
  id?: number;
  orgId?: number;
  reportId?: number;
  status?: number;
  updateBy?: string;
  updateByName?: string;
  updateTime?: Date;
}

export interface FileUpload {
  companyId?: number;
  createBy?: string;
  createTime?: Date;
  failNum?: number;
  failPath?: string;
  fileName?: string;
  filePath?: string;
  id?: number;
  orgId?: number;
  orgName?: string;
  status?: number;
  successNum?: number;
  totalNum?: number;
  type?: number;
  updateBy?: string;
  updateByName?: string;
  updateTime?: Date;
}

export interface Link {
  href?: string;
  templated?: boolean;
}

export interface ModelAndView {
  empty?: boolean;
  model?: unknown;
  modelMap?: { [key: string]: unknown };
  reference?: boolean;
  status?:
    | 'ACCEPTED'
    | 'ALREADY_REPORTED'
    | 'BAD_GATEWAY'
    | 'BAD_REQUEST'
    | 'BANDWIDTH_LIMIT_EXCEEDED'
    | 'CHECKPOINT'
    | 'CONFLICT'
    | 'CONTINUE'
    | 'CREATED'
    | 'DESTINATION_LOCKED'
    | 'EXPECTATION_FAILED'
    | 'FAILED_DEPENDENCY'
    | 'FORBIDDEN'
    | 'FOUND'
    | 'GATEWAY_TIMEOUT'
    | 'GONE'
    | 'HTTP_VERSION_NOT_SUPPORTED'
    | 'IM_USED'
    | 'INSUFFICIENT_SPACE_ON_RESOURCE'
    | 'INSUFFICIENT_STORAGE'
    | 'INTERNAL_SERVER_ERROR'
    | 'I_AM_A_TEAPOT'
    | 'LENGTH_REQUIRED'
    | 'LOCKED'
    | 'LOOP_DETECTED'
    | 'METHOD_FAILURE'
    | 'METHOD_NOT_ALLOWED'
    | 'MOVED_PERMANENTLY'
    | 'MOVED_TEMPORARILY'
    | 'MULTIPLE_CHOICES'
    | 'MULTI_STATUS'
    | 'NETWORK_AUTHENTICATION_REQUIRED'
    | 'NON_AUTHORITATIVE_INFORMATION'
    | 'NOT_ACCEPTABLE'
    | 'NOT_EXTENDED'
    | 'NOT_FOUND'
    | 'NOT_IMPLEMENTED'
    | 'NOT_MODIFIED'
    | 'NO_CONTENT'
    | 'OK'
    | 'PARTIAL_CONTENT'
    | 'PAYLOAD_TOO_LARGE'
    | 'PAYMENT_REQUIRED'
    | 'PERMANENT_REDIRECT'
    | 'PRECONDITION_FAILED'
    | 'PRECONDITION_REQUIRED'
    | 'PROCESSING'
    | 'PROXY_AUTHENTICATION_REQUIRED'
    | 'REQUESTED_RANGE_NOT_SATISFIABLE'
    | 'REQUEST_ENTITY_TOO_LARGE'
    | 'REQUEST_HEADER_FIELDS_TOO_LARGE'
    | 'REQUEST_TIMEOUT'
    | 'REQUEST_URI_TOO_LONG'
    | 'RESET_CONTENT'
    | 'SEE_OTHER'
    | 'SERVICE_UNAVAILABLE'
    | 'SWITCHING_PROTOCOLS'
    | 'TEMPORARY_REDIRECT'
    | 'TOO_EARLY'
    | 'TOO_MANY_REQUESTS'
    | 'UNAUTHORIZED'
    | 'UNAVAILABLE_FOR_LEGAL_REASONS'
    | 'UNPROCESSABLE_ENTITY'
    | 'UNSUPPORTED_MEDIA_TYPE'
    | 'UPGRADE_REQUIRED'
    | 'URI_TOO_LONG'
    | 'USE_PROXY'
    | 'VARIANT_ALSO_NEGOTIATES';
  view?: View;
  viewName?: string;
}

export interface OrderItem {
  asc?: boolean;
  column?: string;
}

export interface PageFileDownload {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: FileDownload[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageFileUpload {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: FileUpload[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageProcessModel {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: ProcessModel[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageProductionBusiness {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: ProductionBusiness[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageProductionMaterials {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: ProductionMaterials[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageProduction {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Production[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface PageReport {
  countId?: string;
  current?: number;
  maxLimit?: number;
  optimizeCountSql?: boolean;
  orders?: OrderItem[];
  pages?: number;
  records?: Report[];
  searchCount?: boolean;
  size?: number;
  total?: number;
}

export interface ProcessModel {
  delFlag?: number;
  id?: number;
  modelName?: string;
  parentId?: number;
  reportName?: string;
  type?: number;
}

export interface Production {
  id: number;
  orgId: number;
  productionCode: string;
  productionName: string;
  basicUnit?: string;
  companyId?: number;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  description?: string;
  orgName?: string;
  status?: number;
  technological?: string;
  technologicalMsg?: string;
  updateBy?: string;
  updateByName?: string;
  updateTime?: Date;
}

export interface ProductionBusiness {
  beginDate: Date;
  checkCount: number;
  checkUnit: string;
  endTime: Date;
  functionalUnit: string;
  id: number;
  productionId: number;
  type: number;
  companyId?: number;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  discharge?: string;
  dischargeRate?: string;
  operateMsg?: string;
  orgId?: number;
  orgName?: string;
  productionCode?: string;
  productionName?: string;
  status?: number;
  technological?: string;
  unitCode?: string;
  updateBy?: string;
  updateByName?: string;
  updateTime?: Date;
}

export interface ProductionMaterials {
  id: number;
  productionBusinessId: number;
  backingMaterial?: string;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  discharge?: string;
  distance?: number;
  factorId?: number;
  factorName?: string;
  factorSource?: string;
  factorType?: number;
  factorUnit?: string;
  factorValue?: string;
  factorYear?: string;
  formula?: string;
  maMeasure?: string;
  materialName?: string;
  materialsType?: string;
  measureCode?: string;
  orgId?: number;
  percentMeasure?: string;
  processModelId?: number;
  processModelParentId?: number;
  status?: number;
  type?: number;
  unitCode?: string;
  updateBy?: string;
  updateTime?: Date;
  weight?: number;
}

export interface Report {
  beginDate?: Date;
  carbonMsg?: string;
  companyId?: number;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  endTime?: Date;
  functionalUnit?: string;
  id?: number;
  orgId?: number;
  orgMsg?: string;
  orgName?: string;
  productionBusinessId?: number;
  productionCode?: string;
  productionName?: string;
  reportActive?: ReportActive[];
  reportFactor?: ReportFactor[];
  reportName?: string;
  updateBy?: string;
  updateByName?: string;
  updateTime?: Date;
}

export interface ReportActive {
  activeLevel?: string;
  activeType?: number;
  createBy?: string;
  createTime?: Date;
  delFlag?: number;
  id?: number;
  modelId?: number;
  modelName?: string;
  msg?: string;
  reportId?: number;
  score?: number;
  updateBy?: string;
  updateTime?: Date;
}

export interface ReportFactor {
  accuracyScore?: number;
  createBy?: string;
  createTime?: Date;
  dataAccuracy?: number;
  delFlag?: number;
  id?: number;
  methodScore?: number;
  methodology?: number;
  modelId?: number;
  modelName?: string;
  msg?: string;
  reportId?: number;
  technologyCorrelation?: number;
  technologyScore?: number;
  timeCorrelation?: number;
  timeScore?: number;
  updateBy?: string;
  updateTime?: Date;
  zoneCorrelation?: number;
  zoneScore?: number;
}

export interface View {
  contentType?: string;
}
