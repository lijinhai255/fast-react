/* eslint-disable */
/* tslint:disable */
//----------------------
// <auto-generated>
// Generated using Swaggie (https://github.com/yhnavein/swaggie)
// Please avoid doing any manual changes in this file
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
// deno-lint-ignore-file

import Axios, { AxiosPromise, AxiosRequestConfig } from 'axios';

export const axios = Axios;
/**
 * @description 账号密码登录
 * @param {any}      [req]           [required]  req
 */

export type postAuthTokenAccountLoginProps = {
  req: LoginReq;
};

export const postAuthTokenAccountLogin = (
  { req }: postAuthTokenAccountLoginProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultloginToken> => {
  let backendApiUrl = `/auth/token/account/login`;

  return axios.request<ApiResultloginToken>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description test-login登录测试
 * @param {string}   [companyCode]      登录代码
 * @param {string}   [lang]             语言
 * @param {string}   [username]      [required]  用户名
 */

export type getAuthTokenLogintestProps = {
  companyCode?: string | null | undefined;
  lang?: string | null | undefined;
  username: string;
};

export const getAuthTokenLogintest = (
  { companyCode, lang, username }: getAuthTokenLogintestProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultloginToken> => {
  let backendApiUrl = `/auth/token/logintest`;

  return axios.request<ApiResultloginToken>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      companyCode: companyCode,
      lang: lang,
      username: username,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 登出
 */

export type getAuthTokenLogoutProps = {};

export const getAuthTokenLogout = (
  {}: getAuthTokenLogoutProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultobject> => {
  let backendApiUrl = `/auth/token/logout`;

  return axios.request<ApiResultobject>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 刷新token
 */

export type getAuthTokenRefreshProps = {};

export const getAuthTokenRefresh = (
  {}: getAuthTokenRefreshProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultloginToken> => {
  let backendApiUrl = `/auth/token/refresh`;

  return axios.request<ApiResultloginToken>({
    url: backendApiUrl,
    method: 'GET',
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 发送验证码
 * @param {string}   [mobile]        [required]  mobile
 */

export type getAuthTokenMobileVfcodeProps = {
  mobile: string;
};

export const getAuthTokenMobileVfcode = (
  { mobile }: getAuthTokenMobileVfcodeProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResult> => {
  let backendApiUrl = `/auth/token/mobile/vfcode`;

  return axios.request<ApiResult>({
    url: backendApiUrl,
    method: 'GET',
    params: serializeQueryParam({
      mobile: mobile,
    }),
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

/**
 * @description 验证码登录
 * @param {any}      [req]           [required]  req
 */

export type postAuthTokenVfcodeLoginProps = {
  req: MobileReq;
};

export const postAuthTokenVfcodeLogin = (
  { req }: postAuthTokenVfcodeLoginProps,
  $config?: AxiosRequestConfig,
): AxiosPromise<ApiResultloginToken> => {
  let backendApiUrl = `/auth/token/vfcode/login`;

  return axios.request<ApiResultloginToken>({
    url: backendApiUrl,
    method: 'POST',
    data: req,
    // baseURL: `${process.env.REACT_APP_API_URL}`,
    ...$config,
  });
};

function serializeQueryParam(obj?: Record<string, any>) {
  if (obj === null || typeof obj !== 'object') return '';
  // if (obj instanceof Date) return obj.toJSON();
  // if (typeof obj !== 'object' || Array.isArray(obj)) return obj;
  let newObj: Record<string, any> = {};
  Object.entries(obj).forEach(([k, val]) => {
    if (![NaN, null, undefined].includes(val)) newObj[k] = val;
  });
  return newObj;
}
export interface ApiResult {
  code?: number;
  data?: unknown;
  msg?: string;
}

export interface ApiResultloginToken {
  code?: number;
  data?: loginToken;
  msg?: string;
}

export interface ApiResultobject {
  code?: number;
  data?: unknown;
  msg?: string;
}

export interface LoginReq {
  companyCode?: string;

  lang?: string;

  password?: string;
  requestStr?: string;

  username?: string;
}

export interface MobileReq {
  companyCode?: string;

  lang?: string;

  mobile?: string;

  vfcode?: string;
}

export interface loginToken {
  accessToken?: string;

  companyId?: number;

  companyName?: string;

  defaultPassword?: boolean;

  expiresIn?: number;

  lang?: string;

  orgId?: number;

  orgName?: string;

  permissions?: string[];

  realName?: string;

  roles?: string[];

  userId?: number;

  username?: string;
}
